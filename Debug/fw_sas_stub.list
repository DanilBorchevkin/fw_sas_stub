
fw_sas_stub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000608c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800621c  0800621c  0001621c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006330  08006330  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006330  08006330  00016330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006338  08006338  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006338  08006338  00016338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800633c  0800633c  0001633c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005348  20000010  08006350  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005358  08006350  00025358  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018e2c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003640  00000000  00000000  00038e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001568  00000000  00000000  0003c4b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013b0  00000000  00000000  0003da18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cdd0  00000000  00000000  0003edc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001193a  00000000  00000000  0005bb98  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b19c1  00000000  00000000  0006d4d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011ee93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057d8  00000000  00000000  0011ef10  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00000076  00000000  00000000  001246e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006204 	.word	0x08006204

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08006204 	.word	0x08006204

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	; (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	; (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000002c 	.word	0x2000002c
 8000500:	20000080 	.word	0x20000080

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fafc 	bl	8000b06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f81f 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f8eb 	bl	80006ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000516:	f000 f8b9 	bl	800068c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800051a:	f000 f887 	bl	800062c <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800051e:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <main+0x44>)
 8000520:	1d3c      	adds	r4, r7, #4
 8000522:	461d      	mov	r5, r3
 8000524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000526:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000528:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800052c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	2100      	movs	r1, #0
 8000534:	4618      	mov	r0, r3
 8000536:	f003 f94f 	bl	80037d8 <osThreadCreate>
 800053a:	4602      	mov	r2, r0
 800053c:	4b03      	ldr	r3, [pc, #12]	; (800054c <main+0x48>)
 800053e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000540:	f003 f943 	bl	80037ca <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000544:	e7fe      	b.n	8000544 <main+0x40>
 8000546:	bf00      	nop
 8000548:	08006228 	.word	0x08006228
 800054c:	200051f0 	.word	0x200051f0

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b0a4      	sub	sp, #144	; 0x90
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800055a:	2244      	movs	r2, #68	; 0x44
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f005 fe47 	bl	80061f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2234      	movs	r2, #52	; 0x34
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f005 fe39 	bl	80061f2 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000580:	f000 fda6 	bl	80010d0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000584:	4b28      	ldr	r3, [pc, #160]	; (8000628 <SystemClock_Config+0xd8>)
 8000586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800058a:	4a27      	ldr	r2, [pc, #156]	; (8000628 <SystemClock_Config+0xd8>)
 800058c:	f023 0318 	bic.w	r3, r3, #24
 8000590:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000594:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000598:	f000 fdb8 	bl	800110c <HAL_PWREx_ControlVoltageScaling>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80005a2:	f000 f90f 	bl	80007c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005a6:	2314      	movs	r3, #20
 80005a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005aa:	2301      	movs	r3, #1
 80005ac:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005ae:	2301      	movs	r3, #1
 80005b0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80005b6:	23a0      	movs	r3, #160	; 0xa0
 80005b8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ba:	2300      	movs	r3, #0
 80005bc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 fdf8 	bl	80011b8 <HAL_RCC_OscConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005ce:	f000 f8f9 	bl	80007c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d2:	230f      	movs	r3, #15
 80005d4:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005d6:	2300      	movs	r3, #0
 80005d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005ea:	2101      	movs	r1, #1
 80005ec:	4618      	mov	r0, r3
 80005ee:	f001 fa49 	bl	8001a84 <HAL_RCC_ClockConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80005f8:	f000 f8e4 	bl	80007c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80005fc:	2303      	movs	r3, #3
 80005fe:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000600:	2300      	movs	r3, #0
 8000602:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000604:	2300      	movs	r3, #0
 8000606:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	4618      	mov	r0, r3
 800060c:	f001 fc70 	bl	8001ef0 <HAL_RCCEx_PeriphCLKConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000616:	f000 f8d5 	bl	80007c4 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800061a:	f001 fdef 	bl	80021fc <HAL_RCCEx_EnableMSIPLLMode>
}
 800061e:	bf00      	nop
 8000620:	3790      	adds	r7, #144	; 0x90
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40021000 	.word	0x40021000

0800062c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000630:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_USART1_UART_Init+0x58>)
 8000632:	4a15      	ldr	r2, [pc, #84]	; (8000688 <MX_USART1_UART_Init+0x5c>)
 8000634:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <MX_USART1_UART_Init+0x58>)
 8000638:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 800063c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_USART1_UART_Init+0x58>)
 8000640:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000644:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_USART1_UART_Init+0x58>)
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800064c:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <MX_USART1_UART_Init+0x58>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_USART1_UART_Init+0x58>)
 8000654:	220c      	movs	r2, #12
 8000656:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000658:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <MX_USART1_UART_Init+0x58>)
 800065a:	2200      	movs	r2, #0
 800065c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_USART1_UART_Init+0x58>)
 8000660:	2200      	movs	r2, #0
 8000662:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <MX_USART1_UART_Init+0x58>)
 8000666:	2200      	movs	r2, #0
 8000668:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_USART1_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <MX_USART1_UART_Init+0x58>)
 8000672:	f001 fffd 	bl	8002670 <HAL_UART_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 800067c:	f000 f8a2 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	200051f4 	.word	0x200051f4
 8000688:	40013800 	.word	0x40013800

0800068c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 8000692:	4a15      	ldr	r2, [pc, #84]	; (80006e8 <MX_USART2_UART_Init+0x5c>)
 8000694:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000696:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 8000698:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800069c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800069e:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 80006b2:	220c      	movs	r2, #12
 80006b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 80006d0:	f001 ffce 	bl	8002670 <HAL_UART_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006da:	f000 f873 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20005274 	.word	0x20005274
 80006e8:	40004400 	.word	0x40004400

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <MX_GPIO_Init+0x8c>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	4a1c      	ldr	r2, [pc, #112]	; (8000778 <MX_GPIO_Init+0x8c>)
 8000708:	f043 0304 	orr.w	r3, r3, #4
 800070c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070e:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <MX_GPIO_Init+0x8c>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	f003 0304 	and.w	r3, r3, #4
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <MX_GPIO_Init+0x8c>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	4a16      	ldr	r2, [pc, #88]	; (8000778 <MX_GPIO_Init+0x8c>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000726:	4b14      	ldr	r3, [pc, #80]	; (8000778 <MX_GPIO_Init+0x8c>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_GPIO_Init+0x8c>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	4a10      	ldr	r2, [pc, #64]	; (8000778 <MX_GPIO_Init+0x8c>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_GPIO_Init+0x8c>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2108      	movs	r1, #8
 800074e:	480b      	ldr	r0, [pc, #44]	; (800077c <MX_GPIO_Init+0x90>)
 8000750:	f000 fca6 	bl	80010a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000754:	2308      	movs	r3, #8
 8000756:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000758:	2301      	movs	r3, #1
 800075a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	2300      	movs	r3, #0
 8000762:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	4619      	mov	r1, r3
 800076a:	4804      	ldr	r0, [pc, #16]	; (800077c <MX_GPIO_Init+0x90>)
 800076c:	f000 fb26 	bl	8000dbc <HAL_GPIO_Init>

}
 8000770:	bf00      	nop
 8000772:	3720      	adds	r7, #32
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40021000 	.word	0x40021000
 800077c:	48000400 	.word	0x48000400

08000780 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  APP_Init((void *) &huart1);
 8000788:	4804      	ldr	r0, [pc, #16]	; (800079c <StartDefaultTask+0x1c>)
 800078a:	f005 fbff 	bl	8005f8c <APP_Init>
  /* Infinite loop */
  osThreadTerminate(NULL);
 800078e:	2000      	movs	r0, #0
 8000790:	f003 f86e 	bl	8003870 <osThreadTerminate>
  /* USER CODE END 5 */ 
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	200051f4 	.word	0x200051f4

080007a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a04      	ldr	r2, [pc, #16]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d101      	bne.n	80007b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007b2:	f000 f9c1 	bl	8000b38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40012c00 	.word	0x40012c00

080007c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
	...

080007d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <HAL_MspInit+0x4c>)
 80007dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007de:	4a10      	ldr	r2, [pc, #64]	; (8000820 <HAL_MspInit+0x4c>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6613      	str	r3, [r2, #96]	; 0x60
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <HAL_MspInit+0x4c>)
 80007e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <HAL_MspInit+0x4c>)
 80007f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f6:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <HAL_MspInit+0x4c>)
 80007f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007fc:	6593      	str	r3, [r2, #88]	; 0x58
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <HAL_MspInit+0x4c>)
 8000800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	210f      	movs	r1, #15
 800080e:	f06f 0001 	mvn.w	r0, #1
 8000812:	f000 fa67 	bl	8000ce4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40021000 	.word	0x40021000

08000824 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08c      	sub	sp, #48	; 0x30
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a3c      	ldr	r2, [pc, #240]	; (8000934 <HAL_UART_MspInit+0x110>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d132      	bne.n	80008ac <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <HAL_UART_MspInit+0x114>)
 8000848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800084a:	4a3b      	ldr	r2, [pc, #236]	; (8000938 <HAL_UART_MspInit+0x114>)
 800084c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000850:	6613      	str	r3, [r2, #96]	; 0x60
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <HAL_UART_MspInit+0x114>)
 8000854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800085a:	61bb      	str	r3, [r7, #24]
 800085c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <HAL_UART_MspInit+0x114>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	4a35      	ldr	r2, [pc, #212]	; (8000938 <HAL_UART_MspInit+0x114>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <HAL_UART_MspInit+0x114>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000876:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800087a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000884:	2303      	movs	r3, #3
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000888:	2307      	movs	r3, #7
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000896:	f000 fa91 	bl	8000dbc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	2105      	movs	r1, #5
 800089e:	2025      	movs	r0, #37	; 0x25
 80008a0:	f000 fa20 	bl	8000ce4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008a4:	2025      	movs	r0, #37	; 0x25
 80008a6:	f000 fa39 	bl	8000d1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008aa:	e03f      	b.n	800092c <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART2)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a22      	ldr	r2, [pc, #136]	; (800093c <HAL_UART_MspInit+0x118>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d13a      	bne.n	800092c <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008b6:	4b20      	ldr	r3, [pc, #128]	; (8000938 <HAL_UART_MspInit+0x114>)
 80008b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ba:	4a1f      	ldr	r2, [pc, #124]	; (8000938 <HAL_UART_MspInit+0x114>)
 80008bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c0:	6593      	str	r3, [r2, #88]	; 0x58
 80008c2:	4b1d      	ldr	r3, [pc, #116]	; (8000938 <HAL_UART_MspInit+0x114>)
 80008c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	4b1a      	ldr	r3, [pc, #104]	; (8000938 <HAL_UART_MspInit+0x114>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	4a19      	ldr	r2, [pc, #100]	; (8000938 <HAL_UART_MspInit+0x114>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008da:	4b17      	ldr	r3, [pc, #92]	; (8000938 <HAL_UART_MspInit+0x114>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80008e6:	2304      	movs	r3, #4
 80008e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f2:	2303      	movs	r3, #3
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008f6:	2307      	movs	r3, #7
 80008f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000904:	f000 fa5a 	bl	8000dbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000908:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800090c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000916:	2303      	movs	r3, #3
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800091a:	2303      	movs	r3, #3
 800091c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000928:	f000 fa48 	bl	8000dbc <HAL_GPIO_Init>
}
 800092c:	bf00      	nop
 800092e:	3730      	adds	r7, #48	; 0x30
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40013800 	.word	0x40013800
 8000938:	40021000 	.word	0x40021000
 800093c:	40004400 	.word	0x40004400

08000940 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08c      	sub	sp, #48	; 0x30
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8000950:	2200      	movs	r2, #0
 8000952:	6879      	ldr	r1, [r7, #4]
 8000954:	2019      	movs	r0, #25
 8000956:	f000 f9c5 	bl	8000ce4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 800095a:	2019      	movs	r0, #25
 800095c:	f000 f9de 	bl	8000d1c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000960:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <HAL_InitTick+0x9c>)
 8000962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000964:	4a1d      	ldr	r2, [pc, #116]	; (80009dc <HAL_InitTick+0x9c>)
 8000966:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800096a:	6613      	str	r3, [r2, #96]	; 0x60
 800096c:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <HAL_InitTick+0x9c>)
 800096e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000970:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000978:	f107 0210 	add.w	r2, r7, #16
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4611      	mov	r1, r2
 8000982:	4618      	mov	r0, r3
 8000984:	f001 fa22 	bl	8001dcc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000988:	f001 fa0a 	bl	8001da0 <HAL_RCC_GetPCLK2Freq>
 800098c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800098e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000990:	4a13      	ldr	r2, [pc, #76]	; (80009e0 <HAL_InitTick+0xa0>)
 8000992:	fba2 2303 	umull	r2, r3, r2, r3
 8000996:	0c9b      	lsrs	r3, r3, #18
 8000998:	3b01      	subs	r3, #1
 800099a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <HAL_InitTick+0xa4>)
 800099e:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <HAL_InitTick+0xa8>)
 80009a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <HAL_InitTick+0xa4>)
 80009a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009a8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009aa:	4a0e      	ldr	r2, [pc, #56]	; (80009e4 <HAL_InitTick+0xa4>)
 80009ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ae:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <HAL_InitTick+0xa4>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <HAL_InitTick+0xa4>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80009bc:	4809      	ldr	r0, [pc, #36]	; (80009e4 <HAL_InitTick+0xa4>)
 80009be:	f001 fc2d 	bl	800221c <HAL_TIM_Base_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d104      	bne.n	80009d2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80009c8:	4806      	ldr	r0, [pc, #24]	; (80009e4 <HAL_InitTick+0xa4>)
 80009ca:	f001 fc5d 	bl	8002288 <HAL_TIM_Base_Start_IT>
 80009ce:	4603      	mov	r3, r0
 80009d0:	e000      	b.n	80009d4 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3730      	adds	r7, #48	; 0x30
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40021000 	.word	0x40021000
 80009e0:	431bde83 	.word	0x431bde83
 80009e4:	200052f4 	.word	0x200052f4
 80009e8:	40012c00 	.word	0x40012c00

080009ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <HardFault_Handler+0x4>

08000a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <MemManage_Handler+0x4>

08000a06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <BusFault_Handler+0x4>

08000a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <UsageFault_Handler+0x4>

08000a12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a24:	4802      	ldr	r0, [pc, #8]	; (8000a30 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000a26:	f001 fc59 	bl	80022dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200052f4 	.word	0x200052f4

08000a34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a38:	4802      	ldr	r0, [pc, #8]	; (8000a44 <USART1_IRQHandler+0x10>)
 8000a3a:	f001 ff65 	bl	8002908 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200051f4 	.word	0x200051f4

08000a48 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <SystemInit+0x64>)
 8000a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a52:	4a16      	ldr	r2, [pc, #88]	; (8000aac <SystemInit+0x64>)
 8000a54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <SystemInit+0x68>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a13      	ldr	r2, [pc, #76]	; (8000ab0 <SystemInit+0x68>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <SystemInit+0x68>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <SystemInit+0x68>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a0f      	ldr	r2, [pc, #60]	; (8000ab0 <SystemInit+0x68>)
 8000a74:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a78:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a7c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <SystemInit+0x68>)
 8000a80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a84:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a86:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <SystemInit+0x68>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a09      	ldr	r2, [pc, #36]	; (8000ab0 <SystemInit+0x68>)
 8000a8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a90:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a92:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <SystemInit+0x68>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a98:	4b04      	ldr	r3, [pc, #16]	; (8000aac <SystemInit+0x64>)
 8000a9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a9e:	609a      	str	r2, [r3, #8]
#endif
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000ed00 	.word	0xe000ed00
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ab4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ab8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000aba:	e003      	b.n	8000ac4 <LoopCopyDataInit>

08000abc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000abe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ac0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ac2:	3104      	adds	r1, #4

08000ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ac4:	480b      	ldr	r0, [pc, #44]	; (8000af4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ac8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000aca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000acc:	d3f6      	bcc.n	8000abc <CopyDataInit>
	ldr	r2, =_sbss
 8000ace:	4a0b      	ldr	r2, [pc, #44]	; (8000afc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ad0:	e002      	b.n	8000ad8 <LoopFillZerobss>

08000ad2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ad2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ad4:	f842 3b04 	str.w	r3, [r2], #4

08000ad8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <LoopForever+0x16>)
	cmp	r2, r3
 8000ada:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000adc:	d3f9      	bcc.n	8000ad2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ade:	f7ff ffb3 	bl	8000a48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ae2:	f005 fb57 	bl	8006194 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ae6:	f7ff fd0d 	bl	8000504 <main>

08000aea <LoopForever>:

LoopForever:
    b LoopForever
 8000aea:	e7fe      	b.n	8000aea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000aec:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000af0:	08006340 	.word	0x08006340
	ldr	r0, =_sdata
 8000af4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000af8:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000afc:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000b00:	20005358 	.word	0x20005358

08000b04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b04:	e7fe      	b.n	8000b04 <ADC1_2_IRQHandler>

08000b06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b082      	sub	sp, #8
 8000b0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b10:	2003      	movs	r0, #3
 8000b12:	f000 f8dc 	bl	8000cce <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b16:	2000      	movs	r0, #0
 8000b18:	f7ff ff12 	bl	8000940 <HAL_InitTick>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d002      	beq.n	8000b28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	71fb      	strb	r3, [r7, #7]
 8000b26:	e001      	b.n	8000b2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b28:	f7ff fe54 	bl	80007d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <HAL_IncTick+0x1c>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <HAL_IncTick+0x20>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4413      	add	r3, r2
 8000b46:	4a03      	ldr	r2, [pc, #12]	; (8000b54 <HAL_IncTick+0x1c>)
 8000b48:	6013      	str	r3, [r2, #0]
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	20005334 	.word	0x20005334
 8000b58:	20000008 	.word	0x20000008

08000b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <HAL_GetTick+0x14>)
 8000b62:	681b      	ldr	r3, [r3, #0]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20005334 	.word	0x20005334

08000b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f003 0307 	and.w	r3, r3, #7
 8000b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b90:	4013      	ands	r3, r2
 8000b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ba6:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	60d3      	str	r3, [r2, #12]
}
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc0:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	0a1b      	lsrs	r3, r3, #8
 8000bc6:	f003 0307 	and.w	r3, r3, #7
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	db0b      	blt.n	8000c02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	f003 021f 	and.w	r2, r3, #31
 8000bf0:	4907      	ldr	r1, [pc, #28]	; (8000c10 <__NVIC_EnableIRQ+0x38>)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	095b      	lsrs	r3, r3, #5
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000e100 	.word	0xe000e100

08000c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	6039      	str	r1, [r7, #0]
 8000c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	db0a      	blt.n	8000c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	490c      	ldr	r1, [pc, #48]	; (8000c60 <__NVIC_SetPriority+0x4c>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	0112      	lsls	r2, r2, #4
 8000c34:	b2d2      	uxtb	r2, r2
 8000c36:	440b      	add	r3, r1
 8000c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c3c:	e00a      	b.n	8000c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4908      	ldr	r1, [pc, #32]	; (8000c64 <__NVIC_SetPriority+0x50>)
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	f003 030f 	and.w	r3, r3, #15
 8000c4a:	3b04      	subs	r3, #4
 8000c4c:	0112      	lsls	r2, r2, #4
 8000c4e:	b2d2      	uxtb	r2, r2
 8000c50:	440b      	add	r3, r1
 8000c52:	761a      	strb	r2, [r3, #24]
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000e100 	.word	0xe000e100
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b089      	sub	sp, #36	; 0x24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	f1c3 0307 	rsb	r3, r3, #7
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	bf28      	it	cs
 8000c86:	2304      	movcs	r3, #4
 8000c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	2b06      	cmp	r3, #6
 8000c90:	d902      	bls.n	8000c98 <NVIC_EncodePriority+0x30>
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3b03      	subs	r3, #3
 8000c96:	e000      	b.n	8000c9a <NVIC_EncodePriority+0x32>
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43da      	mvns	r2, r3
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	401a      	ands	r2, r3
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cba:	43d9      	mvns	r1, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc0:	4313      	orrs	r3, r2
         );
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3724      	adds	r7, #36	; 0x24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff ff4c 	bl	8000b74 <__NVIC_SetPriorityGrouping>
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
 8000cf0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf6:	f7ff ff61 	bl	8000bbc <__NVIC_GetPriorityGrouping>
 8000cfa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	68b9      	ldr	r1, [r7, #8]
 8000d00:	6978      	ldr	r0, [r7, #20]
 8000d02:	f7ff ffb1 	bl	8000c68 <NVIC_EncodePriority>
 8000d06:	4602      	mov	r2, r0
 8000d08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0c:	4611      	mov	r1, r2
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff ff80 	bl	8000c14 <__NVIC_SetPriority>
}
 8000d14:	bf00      	nop
 8000d16:	3718      	adds	r7, #24
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ff54 	bl	8000bd8 <__NVIC_EnableIRQ>
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d40:	2300      	movs	r3, #0
 8000d42:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d005      	beq.n	8000d5c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2204      	movs	r2, #4
 8000d54:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	73fb      	strb	r3, [r7, #15]
 8000d5a:	e029      	b.n	8000db0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f022 020e 	bic.w	r2, r2, #14
 8000d6a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f022 0201 	bic.w	r2, r2, #1
 8000d7a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d80:	f003 021c 	and.w	r2, r3, #28
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	2101      	movs	r1, #1
 8000d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d8e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2201      	movs	r2, #1
 8000d94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d003      	beq.n	8000db0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	4798      	blx	r3
    }
  }
  return status;
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b087      	sub	sp, #28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dca:	e14e      	b.n	800106a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f000 8140 	beq.w	8001064 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d003      	beq.n	8000df4 <HAL_GPIO_Init+0x38>
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	2b12      	cmp	r3, #18
 8000df2:	d123      	bne.n	8000e3c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	08da      	lsrs	r2, r3, #3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3208      	adds	r2, #8
 8000dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e00:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	f003 0307 	and.w	r3, r3, #7
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	220f      	movs	r2, #15
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	691a      	ldr	r2, [r3, #16]
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	08da      	lsrs	r2, r3, #3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	3208      	adds	r2, #8
 8000e36:	6939      	ldr	r1, [r7, #16]
 8000e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	2203      	movs	r2, #3
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 0203 	and.w	r2, r3, #3
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d00b      	beq.n	8000e90 <HAL_GPIO_Init+0xd4>
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d007      	beq.n	8000e90 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e84:	2b11      	cmp	r3, #17
 8000e86:	d003      	beq.n	8000e90 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	2b12      	cmp	r3, #18
 8000e8e:	d130      	bne.n	8000ef2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	68da      	ldr	r2, [r3, #12]
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	091b      	lsrs	r3, r3, #4
 8000edc:	f003 0201 	and.w	r2, r3, #1
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	2203      	movs	r2, #3
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	689a      	ldr	r2, [r3, #8]
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	f000 809a 	beq.w	8001064 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f30:	4b55      	ldr	r3, [pc, #340]	; (8001088 <HAL_GPIO_Init+0x2cc>)
 8000f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f34:	4a54      	ldr	r2, [pc, #336]	; (8001088 <HAL_GPIO_Init+0x2cc>)
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	6613      	str	r3, [r2, #96]	; 0x60
 8000f3c:	4b52      	ldr	r3, [pc, #328]	; (8001088 <HAL_GPIO_Init+0x2cc>)
 8000f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f48:	4a50      	ldr	r2, [pc, #320]	; (800108c <HAL_GPIO_Init+0x2d0>)
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	089b      	lsrs	r3, r3, #2
 8000f4e:	3302      	adds	r3, #2
 8000f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	220f      	movs	r2, #15
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f72:	d013      	beq.n	8000f9c <HAL_GPIO_Init+0x1e0>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a46      	ldr	r2, [pc, #280]	; (8001090 <HAL_GPIO_Init+0x2d4>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d00d      	beq.n	8000f98 <HAL_GPIO_Init+0x1dc>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a45      	ldr	r2, [pc, #276]	; (8001094 <HAL_GPIO_Init+0x2d8>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d007      	beq.n	8000f94 <HAL_GPIO_Init+0x1d8>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a44      	ldr	r2, [pc, #272]	; (8001098 <HAL_GPIO_Init+0x2dc>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d101      	bne.n	8000f90 <HAL_GPIO_Init+0x1d4>
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	e006      	b.n	8000f9e <HAL_GPIO_Init+0x1e2>
 8000f90:	2307      	movs	r3, #7
 8000f92:	e004      	b.n	8000f9e <HAL_GPIO_Init+0x1e2>
 8000f94:	2302      	movs	r3, #2
 8000f96:	e002      	b.n	8000f9e <HAL_GPIO_Init+0x1e2>
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e000      	b.n	8000f9e <HAL_GPIO_Init+0x1e2>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	697a      	ldr	r2, [r7, #20]
 8000fa0:	f002 0203 	and.w	r2, r2, #3
 8000fa4:	0092      	lsls	r2, r2, #2
 8000fa6:	4093      	lsls	r3, r2
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fae:	4937      	ldr	r1, [pc, #220]	; (800108c <HAL_GPIO_Init+0x2d0>)
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	089b      	lsrs	r3, r3, #2
 8000fb4:	3302      	adds	r3, #2
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fbc:	4b37      	ldr	r3, [pc, #220]	; (800109c <HAL_GPIO_Init+0x2e0>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d003      	beq.n	8000fe0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fe0:	4a2e      	ldr	r2, [pc, #184]	; (800109c <HAL_GPIO_Init+0x2e0>)
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000fe6:	4b2d      	ldr	r3, [pc, #180]	; (800109c <HAL_GPIO_Init+0x2e0>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4313      	orrs	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800100a:	4a24      	ldr	r2, [pc, #144]	; (800109c <HAL_GPIO_Init+0x2e0>)
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001010:	4b22      	ldr	r3, [pc, #136]	; (800109c <HAL_GPIO_Init+0x2e0>)
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	43db      	mvns	r3, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	4313      	orrs	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001034:	4a19      	ldr	r2, [pc, #100]	; (800109c <HAL_GPIO_Init+0x2e0>)
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800103a:	4b18      	ldr	r3, [pc, #96]	; (800109c <HAL_GPIO_Init+0x2e0>)
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	43db      	mvns	r3, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4313      	orrs	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800105e:	4a0f      	ldr	r2, [pc, #60]	; (800109c <HAL_GPIO_Init+0x2e0>)
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	3301      	adds	r3, #1
 8001068:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	fa22 f303 	lsr.w	r3, r2, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	f47f aea9 	bne.w	8000dcc <HAL_GPIO_Init+0x10>
  }
}
 800107a:	bf00      	nop
 800107c:	371c      	adds	r7, #28
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40021000 	.word	0x40021000
 800108c:	40010000 	.word	0x40010000
 8001090:	48000400 	.word	0x48000400
 8001094:	48000800 	.word	0x48000800
 8001098:	48000c00 	.word	0x48000c00
 800109c:	40010400 	.word	0x40010400

080010a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	807b      	strh	r3, [r7, #2]
 80010ac:	4613      	mov	r3, r2
 80010ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010b0:	787b      	ldrb	r3, [r7, #1]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010b6:	887a      	ldrh	r2, [r7, #2]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010bc:	e002      	b.n	80010c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010be:	887a      	ldrh	r2, [r7, #2]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a04      	ldr	r2, [pc, #16]	; (80010ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80010da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010de:	6013      	str	r3, [r2, #0]
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40007000 	.word	0x40007000

080010f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <HAL_PWREx_GetVoltageRange+0x18>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40007000 	.word	0x40007000

0800110c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800111a:	d130      	bne.n	800117e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800111c:	4b23      	ldr	r3, [pc, #140]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001128:	d038      	beq.n	800119c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800112a:	4b20      	ldr	r3, [pc, #128]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001132:	4a1e      	ldr	r2, [pc, #120]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001134:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001138:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800113a:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2232      	movs	r2, #50	; 0x32
 8001140:	fb02 f303 	mul.w	r3, r2, r3
 8001144:	4a1b      	ldr	r2, [pc, #108]	; (80011b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001146:	fba2 2303 	umull	r2, r3, r2, r3
 800114a:	0c9b      	lsrs	r3, r3, #18
 800114c:	3301      	adds	r3, #1
 800114e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001150:	e002      	b.n	8001158 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	3b01      	subs	r3, #1
 8001156:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001158:	4b14      	ldr	r3, [pc, #80]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001164:	d102      	bne.n	800116c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1f2      	bne.n	8001152 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800116e:	695b      	ldr	r3, [r3, #20]
 8001170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001178:	d110      	bne.n	800119c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e00f      	b.n	800119e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800118a:	d007      	beq.n	800119c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800118c:	4b07      	ldr	r3, [pc, #28]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001194:	4a05      	ldr	r2, [pc, #20]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001196:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800119a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40007000 	.word	0x40007000
 80011b0:	20000000 	.word	0x20000000
 80011b4:	431bde83 	.word	0x431bde83

080011b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d102      	bne.n	80011cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	f000 bc56 	b.w	8001a78 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011cc:	4ba1      	ldr	r3, [pc, #644]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f003 030c 	and.w	r3, r3, #12
 80011d4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011d6:	4b9f      	ldr	r3, [pc, #636]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	f003 0303 	and.w	r3, r3, #3
 80011de:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0310 	and.w	r3, r3, #16
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	f000 80e6 	beq.w	80013ba <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011ee:	6a3b      	ldr	r3, [r7, #32]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d007      	beq.n	8001204 <HAL_RCC_OscConfig+0x4c>
 80011f4:	6a3b      	ldr	r3, [r7, #32]
 80011f6:	2b0c      	cmp	r3, #12
 80011f8:	f040 808d 	bne.w	8001316 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	f040 8089 	bne.w	8001316 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001204:	4b93      	ldr	r3, [pc, #588]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d006      	beq.n	800121e <HAL_RCC_OscConfig+0x66>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	69db      	ldr	r3, [r3, #28]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d102      	bne.n	800121e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	f000 bc2d 	b.w	8001a78 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001222:	4b8c      	ldr	r3, [pc, #560]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0308 	and.w	r3, r3, #8
 800122a:	2b00      	cmp	r3, #0
 800122c:	d004      	beq.n	8001238 <HAL_RCC_OscConfig+0x80>
 800122e:	4b89      	ldr	r3, [pc, #548]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001236:	e005      	b.n	8001244 <HAL_RCC_OscConfig+0x8c>
 8001238:	4b86      	ldr	r3, [pc, #536]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 800123a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800123e:	091b      	lsrs	r3, r3, #4
 8001240:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001244:	4293      	cmp	r3, r2
 8001246:	d224      	bcs.n	8001292 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124c:	4618      	mov	r0, r3
 800124e:	f000 fdef 	bl	8001e30 <RCC_SetFlashLatencyFromMSIRange>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d002      	beq.n	800125e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	f000 bc0d 	b.w	8001a78 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800125e:	4b7d      	ldr	r3, [pc, #500]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a7c      	ldr	r2, [pc, #496]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 8001264:	f043 0308 	orr.w	r3, r3, #8
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	4b7a      	ldr	r3, [pc, #488]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001276:	4977      	ldr	r1, [pc, #476]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 8001278:	4313      	orrs	r3, r2
 800127a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800127c:	4b75      	ldr	r3, [pc, #468]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a1b      	ldr	r3, [r3, #32]
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	4972      	ldr	r1, [pc, #456]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 800128c:	4313      	orrs	r3, r2
 800128e:	604b      	str	r3, [r1, #4]
 8001290:	e025      	b.n	80012de <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001292:	4b70      	ldr	r3, [pc, #448]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a6f      	ldr	r2, [pc, #444]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 8001298:	f043 0308 	orr.w	r3, r3, #8
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	4b6d      	ldr	r3, [pc, #436]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012aa:	496a      	ldr	r1, [pc, #424]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012b0:	4b68      	ldr	r3, [pc, #416]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	021b      	lsls	r3, r3, #8
 80012be:	4965      	ldr	r1, [pc, #404]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 80012c0:	4313      	orrs	r3, r2
 80012c2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012c4:	6a3b      	ldr	r3, [r7, #32]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d109      	bne.n	80012de <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 fdae 	bl	8001e30 <RCC_SetFlashLatencyFromMSIRange>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e3cc      	b.n	8001a78 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012de:	f000 fcb3 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 80012e2:	4601      	mov	r1, r0
 80012e4:	4b5b      	ldr	r3, [pc, #364]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	091b      	lsrs	r3, r3, #4
 80012ea:	f003 030f 	and.w	r3, r3, #15
 80012ee:	4a5a      	ldr	r2, [pc, #360]	; (8001458 <HAL_RCC_OscConfig+0x2a0>)
 80012f0:	5cd3      	ldrb	r3, [r2, r3]
 80012f2:	f003 031f 	and.w	r3, r3, #31
 80012f6:	fa21 f303 	lsr.w	r3, r1, r3
 80012fa:	4a58      	ldr	r2, [pc, #352]	; (800145c <HAL_RCC_OscConfig+0x2a4>)
 80012fc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012fe:	4b58      	ldr	r3, [pc, #352]	; (8001460 <HAL_RCC_OscConfig+0x2a8>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fb1c 	bl	8000940 <HAL_InitTick>
 8001308:	4603      	mov	r3, r0
 800130a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800130c:	7dfb      	ldrb	r3, [r7, #23]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d052      	beq.n	80013b8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001312:	7dfb      	ldrb	r3, [r7, #23]
 8001314:	e3b0      	b.n	8001a78 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d032      	beq.n	8001384 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800131e:	4b4d      	ldr	r3, [pc, #308]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a4c      	ldr	r2, [pc, #304]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800132a:	f7ff fc17 	bl	8000b5c <HAL_GetTick>
 800132e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001330:	e008      	b.n	8001344 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001332:	f7ff fc13 	bl	8000b5c <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e399      	b.n	8001a78 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001344:	4b43      	ldr	r3, [pc, #268]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0f0      	beq.n	8001332 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001350:	4b40      	ldr	r3, [pc, #256]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a3f      	ldr	r2, [pc, #252]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 8001356:	f043 0308 	orr.w	r3, r3, #8
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	4b3d      	ldr	r3, [pc, #244]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001368:	493a      	ldr	r1, [pc, #232]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 800136a:	4313      	orrs	r3, r2
 800136c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800136e:	4b39      	ldr	r3, [pc, #228]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	021b      	lsls	r3, r3, #8
 800137c:	4935      	ldr	r1, [pc, #212]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 800137e:	4313      	orrs	r3, r2
 8001380:	604b      	str	r3, [r1, #4]
 8001382:	e01a      	b.n	80013ba <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001384:	4b33      	ldr	r3, [pc, #204]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a32      	ldr	r2, [pc, #200]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 800138a:	f023 0301 	bic.w	r3, r3, #1
 800138e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001390:	f7ff fbe4 	bl	8000b5c <HAL_GetTick>
 8001394:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001398:	f7ff fbe0 	bl	8000b5c <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e366      	b.n	8001a78 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013aa:	4b2a      	ldr	r3, [pc, #168]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f0      	bne.n	8001398 <HAL_RCC_OscConfig+0x1e0>
 80013b6:	e000      	b.n	80013ba <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d073      	beq.n	80014ae <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013c6:	6a3b      	ldr	r3, [r7, #32]
 80013c8:	2b08      	cmp	r3, #8
 80013ca:	d005      	beq.n	80013d8 <HAL_RCC_OscConfig+0x220>
 80013cc:	6a3b      	ldr	r3, [r7, #32]
 80013ce:	2b0c      	cmp	r3, #12
 80013d0:	d10e      	bne.n	80013f0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d10b      	bne.n	80013f0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d8:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d063      	beq.n	80014ac <HAL_RCC_OscConfig+0x2f4>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d15f      	bne.n	80014ac <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e343      	b.n	8001a78 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f8:	d106      	bne.n	8001408 <HAL_RCC_OscConfig+0x250>
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a15      	ldr	r2, [pc, #84]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 8001400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	e01d      	b.n	8001444 <HAL_RCC_OscConfig+0x28c>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001410:	d10c      	bne.n	800142c <HAL_RCC_OscConfig+0x274>
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a0f      	ldr	r2, [pc, #60]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 8001418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a0c      	ldr	r2, [pc, #48]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 8001424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	e00b      	b.n	8001444 <HAL_RCC_OscConfig+0x28c>
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a08      	ldr	r2, [pc, #32]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 8001432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001436:	6013      	str	r3, [r2, #0]
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a05      	ldr	r2, [pc, #20]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 800143e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001442:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d01b      	beq.n	8001484 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144c:	f7ff fb86 	bl	8000b5c <HAL_GetTick>
 8001450:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001452:	e010      	b.n	8001476 <HAL_RCC_OscConfig+0x2be>
 8001454:	40021000 	.word	0x40021000
 8001458:	080062e8 	.word	0x080062e8
 800145c:	20000000 	.word	0x20000000
 8001460:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001464:	f7ff fb7a 	bl	8000b5c <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b64      	cmp	r3, #100	; 0x64
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e300      	b.n	8001a78 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001476:	4ba0      	ldr	r3, [pc, #640]	; (80016f8 <HAL_RCC_OscConfig+0x540>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f0      	beq.n	8001464 <HAL_RCC_OscConfig+0x2ac>
 8001482:	e014      	b.n	80014ae <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001484:	f7ff fb6a 	bl	8000b5c <HAL_GetTick>
 8001488:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800148c:	f7ff fb66 	bl	8000b5c <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b64      	cmp	r3, #100	; 0x64
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e2ec      	b.n	8001a78 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800149e:	4b96      	ldr	r3, [pc, #600]	; (80016f8 <HAL_RCC_OscConfig+0x540>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f0      	bne.n	800148c <HAL_RCC_OscConfig+0x2d4>
 80014aa:	e000      	b.n	80014ae <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d060      	beq.n	800157c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014ba:	6a3b      	ldr	r3, [r7, #32]
 80014bc:	2b04      	cmp	r3, #4
 80014be:	d005      	beq.n	80014cc <HAL_RCC_OscConfig+0x314>
 80014c0:	6a3b      	ldr	r3, [r7, #32]
 80014c2:	2b0c      	cmp	r3, #12
 80014c4:	d119      	bne.n	80014fa <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d116      	bne.n	80014fa <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014cc:	4b8a      	ldr	r3, [pc, #552]	; (80016f8 <HAL_RCC_OscConfig+0x540>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d005      	beq.n	80014e4 <HAL_RCC_OscConfig+0x32c>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d101      	bne.n	80014e4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e2c9      	b.n	8001a78 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e4:	4b84      	ldr	r3, [pc, #528]	; (80016f8 <HAL_RCC_OscConfig+0x540>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	061b      	lsls	r3, r3, #24
 80014f2:	4981      	ldr	r1, [pc, #516]	; (80016f8 <HAL_RCC_OscConfig+0x540>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014f8:	e040      	b.n	800157c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d023      	beq.n	800154a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001502:	4b7d      	ldr	r3, [pc, #500]	; (80016f8 <HAL_RCC_OscConfig+0x540>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a7c      	ldr	r2, [pc, #496]	; (80016f8 <HAL_RCC_OscConfig+0x540>)
 8001508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800150c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150e:	f7ff fb25 	bl	8000b5c <HAL_GetTick>
 8001512:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001516:	f7ff fb21 	bl	8000b5c <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e2a7      	b.n	8001a78 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001528:	4b73      	ldr	r3, [pc, #460]	; (80016f8 <HAL_RCC_OscConfig+0x540>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0f0      	beq.n	8001516 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001534:	4b70      	ldr	r3, [pc, #448]	; (80016f8 <HAL_RCC_OscConfig+0x540>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	061b      	lsls	r3, r3, #24
 8001542:	496d      	ldr	r1, [pc, #436]	; (80016f8 <HAL_RCC_OscConfig+0x540>)
 8001544:	4313      	orrs	r3, r2
 8001546:	604b      	str	r3, [r1, #4]
 8001548:	e018      	b.n	800157c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800154a:	4b6b      	ldr	r3, [pc, #428]	; (80016f8 <HAL_RCC_OscConfig+0x540>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a6a      	ldr	r2, [pc, #424]	; (80016f8 <HAL_RCC_OscConfig+0x540>)
 8001550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001556:	f7ff fb01 	bl	8000b5c <HAL_GetTick>
 800155a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800155e:	f7ff fafd 	bl	8000b5c <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e283      	b.n	8001a78 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001570:	4b61      	ldr	r3, [pc, #388]	; (80016f8 <HAL_RCC_OscConfig+0x540>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1f0      	bne.n	800155e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	2b00      	cmp	r3, #0
 8001586:	d07f      	beq.n	8001688 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d05f      	beq.n	8001650 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001590:	4b59      	ldr	r3, [pc, #356]	; (80016f8 <HAL_RCC_OscConfig+0x540>)
 8001592:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001596:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	699a      	ldr	r2, [r3, #24]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	f003 0310 	and.w	r3, r3, #16
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d037      	beq.n	8001616 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d006      	beq.n	80015be <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e25c      	b.n	8001a78 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d01b      	beq.n	8001600 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 80015c8:	4b4b      	ldr	r3, [pc, #300]	; (80016f8 <HAL_RCC_OscConfig+0x540>)
 80015ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ce:	4a4a      	ldr	r2, [pc, #296]	; (80016f8 <HAL_RCC_OscConfig+0x540>)
 80015d0:	f023 0301 	bic.w	r3, r3, #1
 80015d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80015d8:	f7ff fac0 	bl	8000b5c <HAL_GetTick>
 80015dc:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e0:	f7ff fabc 	bl	8000b5c <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b11      	cmp	r3, #17
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e242      	b.n	8001a78 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015f2:	4b41      	ldr	r3, [pc, #260]	; (80016f8 <HAL_RCC_OscConfig+0x540>)
 80015f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1ef      	bne.n	80015e0 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001600:	4b3d      	ldr	r3, [pc, #244]	; (80016f8 <HAL_RCC_OscConfig+0x540>)
 8001602:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001606:	f023 0210 	bic.w	r2, r3, #16
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	493a      	ldr	r1, [pc, #232]	; (80016f8 <HAL_RCC_OscConfig+0x540>)
 8001610:	4313      	orrs	r3, r2
 8001612:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001616:	4b38      	ldr	r3, [pc, #224]	; (80016f8 <HAL_RCC_OscConfig+0x540>)
 8001618:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800161c:	4a36      	ldr	r2, [pc, #216]	; (80016f8 <HAL_RCC_OscConfig+0x540>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001626:	f7ff fa99 	bl	8000b5c <HAL_GetTick>
 800162a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800162e:	f7ff fa95 	bl	8000b5c <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b11      	cmp	r3, #17
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e21b      	b.n	8001a78 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001640:	4b2d      	ldr	r3, [pc, #180]	; (80016f8 <HAL_RCC_OscConfig+0x540>)
 8001642:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0ef      	beq.n	800162e <HAL_RCC_OscConfig+0x476>
 800164e:	e01b      	b.n	8001688 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001650:	4b29      	ldr	r3, [pc, #164]	; (80016f8 <HAL_RCC_OscConfig+0x540>)
 8001652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001656:	4a28      	ldr	r2, [pc, #160]	; (80016f8 <HAL_RCC_OscConfig+0x540>)
 8001658:	f023 0301 	bic.w	r3, r3, #1
 800165c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001660:	f7ff fa7c 	bl	8000b5c <HAL_GetTick>
 8001664:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001668:	f7ff fa78 	bl	8000b5c <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b11      	cmp	r3, #17
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e1fe      	b.n	8001a78 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800167a:	4b1f      	ldr	r3, [pc, #124]	; (80016f8 <HAL_RCC_OscConfig+0x540>)
 800167c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1ef      	bne.n	8001668 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 80c1 	beq.w	8001818 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001696:	2300      	movs	r3, #0
 8001698:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800169c:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <HAL_RCC_OscConfig+0x540>)
 800169e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d10e      	bne.n	80016c6 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a8:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <HAL_RCC_OscConfig+0x540>)
 80016aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ac:	4a12      	ldr	r2, [pc, #72]	; (80016f8 <HAL_RCC_OscConfig+0x540>)
 80016ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b2:	6593      	str	r3, [r2, #88]	; 0x58
 80016b4:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <HAL_RCC_OscConfig+0x540>)
 80016b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016c0:	2301      	movs	r3, #1
 80016c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c6:	4b0d      	ldr	r3, [pc, #52]	; (80016fc <HAL_RCC_OscConfig+0x544>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d11c      	bne.n	800170c <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016d2:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <HAL_RCC_OscConfig+0x544>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a09      	ldr	r2, [pc, #36]	; (80016fc <HAL_RCC_OscConfig+0x544>)
 80016d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016de:	f7ff fa3d 	bl	8000b5c <HAL_GetTick>
 80016e2:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016e4:	e00c      	b.n	8001700 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e6:	f7ff fa39 	bl	8000b5c <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d905      	bls.n	8001700 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e1bf      	b.n	8001a78 <HAL_RCC_OscConfig+0x8c0>
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001700:	4bb1      	ldr	r3, [pc, #708]	; (80019c8 <HAL_RCC_OscConfig+0x810>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0ec      	beq.n	80016e6 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b00      	cmp	r3, #0
 8001716:	d02c      	beq.n	8001772 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001718:	4bac      	ldr	r3, [pc, #688]	; (80019cc <HAL_RCC_OscConfig+0x814>)
 800171a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800172a:	49a8      	ldr	r1, [pc, #672]	; (80019cc <HAL_RCC_OscConfig+0x814>)
 800172c:	4313      	orrs	r3, r2
 800172e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	2b00      	cmp	r3, #0
 800173c:	d010      	beq.n	8001760 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800173e:	4ba3      	ldr	r3, [pc, #652]	; (80019cc <HAL_RCC_OscConfig+0x814>)
 8001740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001744:	4aa1      	ldr	r2, [pc, #644]	; (80019cc <HAL_RCC_OscConfig+0x814>)
 8001746:	f043 0304 	orr.w	r3, r3, #4
 800174a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800174e:	4b9f      	ldr	r3, [pc, #636]	; (80019cc <HAL_RCC_OscConfig+0x814>)
 8001750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001754:	4a9d      	ldr	r2, [pc, #628]	; (80019cc <HAL_RCC_OscConfig+0x814>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800175e:	e018      	b.n	8001792 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001760:	4b9a      	ldr	r3, [pc, #616]	; (80019cc <HAL_RCC_OscConfig+0x814>)
 8001762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001766:	4a99      	ldr	r2, [pc, #612]	; (80019cc <HAL_RCC_OscConfig+0x814>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001770:	e00f      	b.n	8001792 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001772:	4b96      	ldr	r3, [pc, #600]	; (80019cc <HAL_RCC_OscConfig+0x814>)
 8001774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001778:	4a94      	ldr	r2, [pc, #592]	; (80019cc <HAL_RCC_OscConfig+0x814>)
 800177a:	f023 0301 	bic.w	r3, r3, #1
 800177e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001782:	4b92      	ldr	r3, [pc, #584]	; (80019cc <HAL_RCC_OscConfig+0x814>)
 8001784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001788:	4a90      	ldr	r2, [pc, #576]	; (80019cc <HAL_RCC_OscConfig+0x814>)
 800178a:	f023 0304 	bic.w	r3, r3, #4
 800178e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d016      	beq.n	80017c8 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179a:	f7ff f9df 	bl	8000b5c <HAL_GetTick>
 800179e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017a0:	e00a      	b.n	80017b8 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a2:	f7ff f9db 	bl	8000b5c <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e15f      	b.n	8001a78 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017b8:	4b84      	ldr	r3, [pc, #528]	; (80019cc <HAL_RCC_OscConfig+0x814>)
 80017ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0ed      	beq.n	80017a2 <HAL_RCC_OscConfig+0x5ea>
 80017c6:	e01d      	b.n	8001804 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c8:	f7ff f9c8 	bl	8000b5c <HAL_GetTick>
 80017cc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017ce:	e00a      	b.n	80017e6 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d0:	f7ff f9c4 	bl	8000b5c <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	f241 3288 	movw	r2, #5000	; 0x1388
 80017de:	4293      	cmp	r3, r2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e148      	b.n	8001a78 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017e6:	4b79      	ldr	r3, [pc, #484]	; (80019cc <HAL_RCC_OscConfig+0x814>)
 80017e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1ed      	bne.n	80017d0 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80017f4:	4b75      	ldr	r3, [pc, #468]	; (80019cc <HAL_RCC_OscConfig+0x814>)
 80017f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017fa:	4a74      	ldr	r2, [pc, #464]	; (80019cc <HAL_RCC_OscConfig+0x814>)
 80017fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001800:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001804:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001808:	2b01      	cmp	r3, #1
 800180a:	d105      	bne.n	8001818 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800180c:	4b6f      	ldr	r3, [pc, #444]	; (80019cc <HAL_RCC_OscConfig+0x814>)
 800180e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001810:	4a6e      	ldr	r2, [pc, #440]	; (80019cc <HAL_RCC_OscConfig+0x814>)
 8001812:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001816:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0320 	and.w	r3, r3, #32
 8001820:	2b00      	cmp	r3, #0
 8001822:	d03c      	beq.n	800189e <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001828:	2b00      	cmp	r3, #0
 800182a:	d01c      	beq.n	8001866 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800182c:	4b67      	ldr	r3, [pc, #412]	; (80019cc <HAL_RCC_OscConfig+0x814>)
 800182e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001832:	4a66      	ldr	r2, [pc, #408]	; (80019cc <HAL_RCC_OscConfig+0x814>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183c:	f7ff f98e 	bl	8000b5c <HAL_GetTick>
 8001840:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001844:	f7ff f98a 	bl	8000b5c <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e110      	b.n	8001a78 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001856:	4b5d      	ldr	r3, [pc, #372]	; (80019cc <HAL_RCC_OscConfig+0x814>)
 8001858:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0ef      	beq.n	8001844 <HAL_RCC_OscConfig+0x68c>
 8001864:	e01b      	b.n	800189e <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001866:	4b59      	ldr	r3, [pc, #356]	; (80019cc <HAL_RCC_OscConfig+0x814>)
 8001868:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800186c:	4a57      	ldr	r2, [pc, #348]	; (80019cc <HAL_RCC_OscConfig+0x814>)
 800186e:	f023 0301 	bic.w	r3, r3, #1
 8001872:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001876:	f7ff f971 	bl	8000b5c <HAL_GetTick>
 800187a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800187e:	f7ff f96d 	bl	8000b5c <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e0f3      	b.n	8001a78 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001890:	4b4e      	ldr	r3, [pc, #312]	; (80019cc <HAL_RCC_OscConfig+0x814>)
 8001892:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1ef      	bne.n	800187e <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 80e7 	beq.w	8001a76 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	f040 80b7 	bne.w	8001a20 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018b2:	4b46      	ldr	r3, [pc, #280]	; (80019cc <HAL_RCC_OscConfig+0x814>)
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f003 0203 	and.w	r2, r3, #3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d124      	bne.n	8001910 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d0:	3b01      	subs	r3, #1
 80018d2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d11b      	bne.n	8001910 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d113      	bne.n	8001910 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f2:	085b      	lsrs	r3, r3, #1
 80018f4:	3b01      	subs	r3, #1
 80018f6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d109      	bne.n	8001910 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	085b      	lsrs	r3, r3, #1
 8001908:	3b01      	subs	r3, #1
 800190a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800190c:	429a      	cmp	r2, r3
 800190e:	d061      	beq.n	80019d4 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001910:	6a3b      	ldr	r3, [r7, #32]
 8001912:	2b0c      	cmp	r3, #12
 8001914:	d056      	beq.n	80019c4 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001916:	4b2d      	ldr	r3, [pc, #180]	; (80019cc <HAL_RCC_OscConfig+0x814>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a2c      	ldr	r2, [pc, #176]	; (80019cc <HAL_RCC_OscConfig+0x814>)
 800191c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001920:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001922:	f7ff f91b 	bl	8000b5c <HAL_GetTick>
 8001926:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192a:	f7ff f917 	bl	8000b5c <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e09d      	b.n	8001a78 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800193c:	4b23      	ldr	r3, [pc, #140]	; (80019cc <HAL_RCC_OscConfig+0x814>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1f0      	bne.n	800192a <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001948:	4b20      	ldr	r3, [pc, #128]	; (80019cc <HAL_RCC_OscConfig+0x814>)
 800194a:	68da      	ldr	r2, [r3, #12]
 800194c:	4b20      	ldr	r3, [pc, #128]	; (80019d0 <HAL_RCC_OscConfig+0x818>)
 800194e:	4013      	ands	r3, r2
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001958:	3a01      	subs	r2, #1
 800195a:	0112      	lsls	r2, r2, #4
 800195c:	4311      	orrs	r1, r2
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001962:	0212      	lsls	r2, r2, #8
 8001964:	4311      	orrs	r1, r2
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800196a:	0852      	lsrs	r2, r2, #1
 800196c:	3a01      	subs	r2, #1
 800196e:	0552      	lsls	r2, r2, #21
 8001970:	4311      	orrs	r1, r2
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001976:	0852      	lsrs	r2, r2, #1
 8001978:	3a01      	subs	r2, #1
 800197a:	0652      	lsls	r2, r2, #25
 800197c:	430a      	orrs	r2, r1
 800197e:	4913      	ldr	r1, [pc, #76]	; (80019cc <HAL_RCC_OscConfig+0x814>)
 8001980:	4313      	orrs	r3, r2
 8001982:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001984:	4b11      	ldr	r3, [pc, #68]	; (80019cc <HAL_RCC_OscConfig+0x814>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a10      	ldr	r2, [pc, #64]	; (80019cc <HAL_RCC_OscConfig+0x814>)
 800198a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800198e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001990:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <HAL_RCC_OscConfig+0x814>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	4a0d      	ldr	r2, [pc, #52]	; (80019cc <HAL_RCC_OscConfig+0x814>)
 8001996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800199a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800199c:	f7ff f8de 	bl	8000b5c <HAL_GetTick>
 80019a0:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a4:	f7ff f8da 	bl	8000b5c <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e060      	b.n	8001a78 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b6:	4b05      	ldr	r3, [pc, #20]	; (80019cc <HAL_RCC_OscConfig+0x814>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019c2:	e058      	b.n	8001a76 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e057      	b.n	8001a78 <HAL_RCC_OscConfig+0x8c0>
 80019c8:	40007000 	.word	0x40007000
 80019cc:	40021000 	.word	0x40021000
 80019d0:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d4:	4b2a      	ldr	r3, [pc, #168]	; (8001a80 <HAL_RCC_OscConfig+0x8c8>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d14a      	bne.n	8001a76 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019e0:	4b27      	ldr	r3, [pc, #156]	; (8001a80 <HAL_RCC_OscConfig+0x8c8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a26      	ldr	r2, [pc, #152]	; (8001a80 <HAL_RCC_OscConfig+0x8c8>)
 80019e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019ec:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <HAL_RCC_OscConfig+0x8c8>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	4a23      	ldr	r2, [pc, #140]	; (8001a80 <HAL_RCC_OscConfig+0x8c8>)
 80019f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019f8:	f7ff f8b0 	bl	8000b5c <HAL_GetTick>
 80019fc:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a00:	f7ff f8ac 	bl	8000b5c <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e032      	b.n	8001a78 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a12:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <HAL_RCC_OscConfig+0x8c8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d0f0      	beq.n	8001a00 <HAL_RCC_OscConfig+0x848>
 8001a1e:	e02a      	b.n	8001a76 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	2b0c      	cmp	r3, #12
 8001a24:	d025      	beq.n	8001a72 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a26:	4b16      	ldr	r3, [pc, #88]	; (8001a80 <HAL_RCC_OscConfig+0x8c8>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a15      	ldr	r2, [pc, #84]	; (8001a80 <HAL_RCC_OscConfig+0x8c8>)
 8001a2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a30:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a32:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <HAL_RCC_OscConfig+0x8c8>)
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	4a12      	ldr	r2, [pc, #72]	; (8001a80 <HAL_RCC_OscConfig+0x8c8>)
 8001a38:	f023 0303 	bic.w	r3, r3, #3
 8001a3c:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001a3e:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <HAL_RCC_OscConfig+0x8c8>)
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	4a0f      	ldr	r2, [pc, #60]	; (8001a80 <HAL_RCC_OscConfig+0x8c8>)
 8001a44:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a48:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4a:	f7ff f887 	bl	8000b5c <HAL_GetTick>
 8001a4e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a52:	f7ff f883 	bl	8000b5c <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e009      	b.n	8001a78 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_RCC_OscConfig+0x8c8>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1f0      	bne.n	8001a52 <HAL_RCC_OscConfig+0x89a>
 8001a70:	e001      	b.n	8001a76 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e000      	b.n	8001a78 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3728      	adds	r7, #40	; 0x28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40021000 	.word	0x40021000

08001a84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e0c8      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a98:	4b66      	ldr	r3, [pc, #408]	; (8001c34 <HAL_RCC_ClockConfig+0x1b0>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d910      	bls.n	8001ac8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa6:	4b63      	ldr	r3, [pc, #396]	; (8001c34 <HAL_RCC_ClockConfig+0x1b0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f023 0207 	bic.w	r2, r3, #7
 8001aae:	4961      	ldr	r1, [pc, #388]	; (8001c34 <HAL_RCC_ClockConfig+0x1b0>)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab6:	4b5f      	ldr	r3, [pc, #380]	; (8001c34 <HAL_RCC_ClockConfig+0x1b0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d001      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e0b0      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d04c      	beq.n	8001b6e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	d107      	bne.n	8001aec <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001adc:	4b56      	ldr	r3, [pc, #344]	; (8001c38 <HAL_RCC_ClockConfig+0x1b4>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d121      	bne.n	8001b2c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e09e      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d107      	bne.n	8001b04 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001af4:	4b50      	ldr	r3, [pc, #320]	; (8001c38 <HAL_RCC_ClockConfig+0x1b4>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d115      	bne.n	8001b2c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e092      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d107      	bne.n	8001b1c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b0c:	4b4a      	ldr	r3, [pc, #296]	; (8001c38 <HAL_RCC_ClockConfig+0x1b4>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d109      	bne.n	8001b2c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e086      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b1c:	4b46      	ldr	r3, [pc, #280]	; (8001c38 <HAL_RCC_ClockConfig+0x1b4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e07e      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b2c:	4b42      	ldr	r3, [pc, #264]	; (8001c38 <HAL_RCC_ClockConfig+0x1b4>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f023 0203 	bic.w	r2, r3, #3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	493f      	ldr	r1, [pc, #252]	; (8001c38 <HAL_RCC_ClockConfig+0x1b4>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b3e:	f7ff f80d 	bl	8000b5c <HAL_GetTick>
 8001b42:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b44:	e00a      	b.n	8001b5c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b46:	f7ff f809 	bl	8000b5c <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e066      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5c:	4b36      	ldr	r3, [pc, #216]	; (8001c38 <HAL_RCC_ClockConfig+0x1b4>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 020c 	and.w	r2, r3, #12
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d1eb      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d008      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b7a:	4b2f      	ldr	r3, [pc, #188]	; (8001c38 <HAL_RCC_ClockConfig+0x1b4>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	492c      	ldr	r1, [pc, #176]	; (8001c38 <HAL_RCC_ClockConfig+0x1b4>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b8c:	4b29      	ldr	r3, [pc, #164]	; (8001c34 <HAL_RCC_ClockConfig+0x1b0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d210      	bcs.n	8001bbc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9a:	4b26      	ldr	r3, [pc, #152]	; (8001c34 <HAL_RCC_ClockConfig+0x1b0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f023 0207 	bic.w	r2, r3, #7
 8001ba2:	4924      	ldr	r1, [pc, #144]	; (8001c34 <HAL_RCC_ClockConfig+0x1b0>)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001baa:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <HAL_RCC_ClockConfig+0x1b0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d001      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e036      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d008      	beq.n	8001bda <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	; (8001c38 <HAL_RCC_ClockConfig+0x1b4>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	4918      	ldr	r1, [pc, #96]	; (8001c38 <HAL_RCC_ClockConfig+0x1b4>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d009      	beq.n	8001bfa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001be6:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <HAL_RCC_ClockConfig+0x1b4>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	4910      	ldr	r1, [pc, #64]	; (8001c38 <HAL_RCC_ClockConfig+0x1b4>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bfa:	f000 f825 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 8001bfe:	4601      	mov	r1, r0
 8001c00:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <HAL_RCC_ClockConfig+0x1b4>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	091b      	lsrs	r3, r3, #4
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	4a0c      	ldr	r2, [pc, #48]	; (8001c3c <HAL_RCC_ClockConfig+0x1b8>)
 8001c0c:	5cd3      	ldrb	r3, [r2, r3]
 8001c0e:	f003 031f 	and.w	r3, r3, #31
 8001c12:	fa21 f303 	lsr.w	r3, r1, r3
 8001c16:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001c18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <HAL_RCC_ClockConfig+0x1c0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe fe8e 	bl	8000940 <HAL_InitTick>
 8001c24:	4603      	mov	r3, r0
 8001c26:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c28:	7afb      	ldrb	r3, [r7, #11]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40022000 	.word	0x40022000
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	080062e8 	.word	0x080062e8
 8001c40:	20000000 	.word	0x20000000
 8001c44:	20000004 	.word	0x20000004

08001c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b089      	sub	sp, #36	; 0x24
 8001c4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
 8001c52:	2300      	movs	r3, #0
 8001c54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c56:	4b3d      	ldr	r3, [pc, #244]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x104>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
 8001c5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c60:	4b3a      	ldr	r3, [pc, #232]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x104>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <HAL_RCC_GetSysClockFreq+0x34>
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	2b0c      	cmp	r3, #12
 8001c74:	d121      	bne.n	8001cba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d11e      	bne.n	8001cba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c7c:	4b33      	ldr	r3, [pc, #204]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x104>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0308 	and.w	r3, r3, #8
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d107      	bne.n	8001c98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c88:	4b30      	ldr	r3, [pc, #192]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x104>)
 8001c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c8e:	0a1b      	lsrs	r3, r3, #8
 8001c90:	f003 030f 	and.w	r3, r3, #15
 8001c94:	61fb      	str	r3, [r7, #28]
 8001c96:	e005      	b.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c98:	4b2c      	ldr	r3, [pc, #176]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x104>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	091b      	lsrs	r3, r3, #4
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ca4:	4a2a      	ldr	r2, [pc, #168]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10d      	bne.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cb8:	e00a      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d102      	bne.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cc0:	4b24      	ldr	r3, [pc, #144]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cc2:	61bb      	str	r3, [r7, #24]
 8001cc4:	e004      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d101      	bne.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ccc:	4b22      	ldr	r3, [pc, #136]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	2b0c      	cmp	r3, #12
 8001cd4:	d133      	bne.n	8001d3e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cd6:	4b1d      	ldr	r3, [pc, #116]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x104>)
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d002      	beq.n	8001cec <HAL_RCC_GetSysClockFreq+0xa4>
 8001ce6:	2b03      	cmp	r3, #3
 8001ce8:	d003      	beq.n	8001cf2 <HAL_RCC_GetSysClockFreq+0xaa>
 8001cea:	e005      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cec:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cee:	617b      	str	r3, [r7, #20]
      break;
 8001cf0:	e005      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001cf2:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cf4:	617b      	str	r3, [r7, #20]
      break;
 8001cf6:	e002      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	617b      	str	r3, [r7, #20]
      break;
 8001cfc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cfe:	4b13      	ldr	r3, [pc, #76]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x104>)
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	091b      	lsrs	r3, r3, #4
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	3301      	adds	r3, #1
 8001d0a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d0c:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x104>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	0a1b      	lsrs	r3, r3, #8
 8001d12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	fb02 f203 	mul.w	r2, r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d22:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d24:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x104>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	0e5b      	lsrs	r3, r3, #25
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	3301      	adds	r3, #1
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d3e:	69bb      	ldr	r3, [r7, #24]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3724      	adds	r7, #36	; 0x24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	08006300 	.word	0x08006300
 8001d54:	00f42400 	.word	0x00f42400
 8001d58:	007a1200 	.word	0x007a1200

08001d5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d60:	4b03      	ldr	r3, [pc, #12]	; (8001d70 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d62:	681b      	ldr	r3, [r3, #0]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	20000000 	.word	0x20000000

08001d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d78:	f7ff fff0 	bl	8001d5c <HAL_RCC_GetHCLKFreq>
 8001d7c:	4601      	mov	r1, r0
 8001d7e:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	0a1b      	lsrs	r3, r3, #8
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	4a04      	ldr	r2, [pc, #16]	; (8001d9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d8a:	5cd3      	ldrb	r3, [r2, r3]
 8001d8c:	f003 031f 	and.w	r3, r3, #31
 8001d90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	080062f8 	.word	0x080062f8

08001da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001da4:	f7ff ffda 	bl	8001d5c <HAL_RCC_GetHCLKFreq>
 8001da8:	4601      	mov	r1, r0
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	0adb      	lsrs	r3, r3, #11
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	4a04      	ldr	r2, [pc, #16]	; (8001dc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001db6:	5cd3      	ldrb	r3, [r2, r3]
 8001db8:	f003 031f 	and.w	r3, r3, #31
 8001dbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	080062f8 	.word	0x080062f8

08001dcc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	220f      	movs	r2, #15
 8001dda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001ddc:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <HAL_RCC_GetClockConfig+0x5c>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 0203 	and.w	r2, r3, #3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001de8:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <HAL_RCC_GetClockConfig+0x5c>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001df4:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <HAL_RCC_GetClockConfig+0x5c>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001e00:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <HAL_RCC_GetClockConfig+0x5c>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	08db      	lsrs	r3, r3, #3
 8001e06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001e0e:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <HAL_RCC_GetClockConfig+0x60>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0207 	and.w	r2, r3, #7
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	601a      	str	r2, [r3, #0]
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40022000 	.word	0x40022000

08001e30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e38:	2300      	movs	r3, #0
 8001e3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ee8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e48:	f7ff f952 	bl	80010f0 <HAL_PWREx_GetVoltageRange>
 8001e4c:	6178      	str	r0, [r7, #20]
 8001e4e:	e014      	b.n	8001e7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e50:	4b25      	ldr	r3, [pc, #148]	; (8001ee8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e54:	4a24      	ldr	r2, [pc, #144]	; (8001ee8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e5c:	4b22      	ldr	r3, [pc, #136]	; (8001ee8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e68:	f7ff f942 	bl	80010f0 <HAL_PWREx_GetVoltageRange>
 8001e6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ee8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e72:	4a1d      	ldr	r2, [pc, #116]	; (8001ee8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e80:	d10b      	bne.n	8001e9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b80      	cmp	r3, #128	; 0x80
 8001e86:	d919      	bls.n	8001ebc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2ba0      	cmp	r3, #160	; 0xa0
 8001e8c:	d902      	bls.n	8001e94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e8e:	2302      	movs	r3, #2
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	e013      	b.n	8001ebc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e94:	2301      	movs	r3, #1
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	e010      	b.n	8001ebc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b80      	cmp	r3, #128	; 0x80
 8001e9e:	d902      	bls.n	8001ea6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	613b      	str	r3, [r7, #16]
 8001ea4:	e00a      	b.n	8001ebc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b80      	cmp	r3, #128	; 0x80
 8001eaa:	d102      	bne.n	8001eb2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eac:	2302      	movs	r3, #2
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	e004      	b.n	8001ebc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b70      	cmp	r3, #112	; 0x70
 8001eb6:	d101      	bne.n	8001ebc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001eb8:	2301      	movs	r3, #1
 8001eba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f023 0207 	bic.w	r2, r3, #7
 8001ec4:	4909      	ldr	r1, [pc, #36]	; (8001eec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ecc:	4b07      	ldr	r3, [pc, #28]	; (8001eec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d001      	beq.n	8001ede <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40022000 	.word	0x40022000

08001ef0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ef8:	2300      	movs	r3, #0
 8001efa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001efc:	2300      	movs	r3, #0
 8001efe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 809e 	beq.w	800204a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f12:	4b46      	ldr	r3, [pc, #280]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8001f22:	2300      	movs	r3, #0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00d      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f28:	4b40      	ldr	r3, [pc, #256]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2c:	4a3f      	ldr	r2, [pc, #252]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f32:	6593      	str	r3, [r2, #88]	; 0x58
 8001f34:	4b3d      	ldr	r3, [pc, #244]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f40:	2301      	movs	r3, #1
 8001f42:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f44:	4b3a      	ldr	r3, [pc, #232]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a39      	ldr	r2, [pc, #228]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f50:	f7fe fe04 	bl	8000b5c <HAL_GetTick>
 8001f54:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f56:	e009      	b.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f58:	f7fe fe00 	bl	8000b5c <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d902      	bls.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	74fb      	strb	r3, [r7, #19]
        break;
 8001f6a:	e005      	b.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f6c:	4b30      	ldr	r3, [pc, #192]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0ef      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8001f78:	7cfb      	ldrb	r3, [r7, #19]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d15a      	bne.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f7e:	4b2b      	ldr	r3, [pc, #172]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f88:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d01e      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0xde>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d019      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f9a:	4b24      	ldr	r3, [pc, #144]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fa4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fa6:	4b21      	ldr	r3, [pc, #132]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fac:	4a1f      	ldr	r2, [pc, #124]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fb6:	4b1d      	ldr	r3, [pc, #116]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbc:	4a1b      	ldr	r2, [pc, #108]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fc6:	4a19      	ldr	r2, [pc, #100]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d016      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd8:	f7fe fdc0 	bl	8000b5c <HAL_GetTick>
 8001fdc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fde:	e00b      	b.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe0:	f7fe fdbc 	bl	8000b5c <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d902      	bls.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	74fb      	strb	r3, [r7, #19]
            break;
 8001ff6:	e006      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0ec      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8002006:	7cfb      	ldrb	r3, [r7, #19]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10b      	bne.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800200c:	4b07      	ldr	r3, [pc, #28]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800200e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002012:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4904      	ldr	r1, [pc, #16]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800201c:	4313      	orrs	r3, r2
 800201e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002022:	e009      	b.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002024:	7cfb      	ldrb	r3, [r7, #19]
 8002026:	74bb      	strb	r3, [r7, #18]
 8002028:	e006      	b.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800202a:	bf00      	nop
 800202c:	40021000 	.word	0x40021000
 8002030:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002034:	7cfb      	ldrb	r3, [r7, #19]
 8002036:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002038:	7c7b      	ldrb	r3, [r7, #17]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d105      	bne.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800203e:	4b6e      	ldr	r3, [pc, #440]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002042:	4a6d      	ldr	r2, [pc, #436]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002044:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002048:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00a      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002056:	4b68      	ldr	r3, [pc, #416]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800205c:	f023 0203 	bic.w	r2, r3, #3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	4964      	ldr	r1, [pc, #400]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002066:	4313      	orrs	r3, r2
 8002068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00a      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002078:	4b5f      	ldr	r3, [pc, #380]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800207a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207e:	f023 020c 	bic.w	r2, r3, #12
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	495c      	ldr	r1, [pc, #368]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002088:	4313      	orrs	r3, r2
 800208a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00a      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800209a:	4b57      	ldr	r3, [pc, #348]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800209c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	4953      	ldr	r1, [pc, #332]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0320 	and.w	r3, r3, #32
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00a      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020bc:	4b4e      	ldr	r3, [pc, #312]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	494b      	ldr	r1, [pc, #300]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00a      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020de:	4b46      	ldr	r3, [pc, #280]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	4942      	ldr	r1, [pc, #264]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00a      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002100:	4b3d      	ldr	r3, [pc, #244]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002106:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210e:	493a      	ldr	r1, [pc, #232]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002110:	4313      	orrs	r3, r2
 8002112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00a      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002122:	4b35      	ldr	r3, [pc, #212]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002128:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	4931      	ldr	r1, [pc, #196]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002132:	4313      	orrs	r3, r2
 8002134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00a      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002144:	4b2c      	ldr	r3, [pc, #176]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	4929      	ldr	r1, [pc, #164]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002154:	4313      	orrs	r3, r2
 8002156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00a      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002166:	4b24      	ldr	r3, [pc, #144]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	4920      	ldr	r1, [pc, #128]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002176:	4313      	orrs	r3, r2
 8002178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d015      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002188:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800218a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002196:	4918      	ldr	r1, [pc, #96]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002198:	4313      	orrs	r3, r2
 800219a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021a6:	d105      	bne.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021a8:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	4a12      	ldr	r2, [pc, #72]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021b2:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d015      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021c0:	4b0d      	ldr	r3, [pc, #52]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ce:	490a      	ldr	r1, [pc, #40]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021de:	d105      	bne.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80021ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000

080021fc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002200:	4b05      	ldr	r3, [pc, #20]	; (8002218 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a04      	ldr	r2, [pc, #16]	; (8002218 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002206:	f043 0304 	orr.w	r3, r3, #4
 800220a:	6013      	str	r3, [r2, #0]
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40021000 	.word	0x40021000

0800221c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e01d      	b.n	800226a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d106      	bne.n	8002248 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f815 	bl	8002272 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2202      	movs	r2, #2
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3304      	adds	r3, #4
 8002258:	4619      	mov	r1, r3
 800225a:	4610      	mov	r0, r2
 800225c:	f000 f986 	bl	800256c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
	...

08002288 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f042 0201 	orr.w	r2, r2, #1
 800229e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <HAL_TIM_Base_Start_IT+0x50>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2b06      	cmp	r3, #6
 80022b0:	d00b      	beq.n	80022ca <HAL_TIM_Base_Start_IT+0x42>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b8:	d007      	beq.n	80022ca <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f042 0201 	orr.w	r2, r2, #1
 80022c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	00010007 	.word	0x00010007

080022dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d122      	bne.n	8002338 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d11b      	bne.n	8002338 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f06f 0202 	mvn.w	r2, #2
 8002308:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f905 	bl	800252e <HAL_TIM_IC_CaptureCallback>
 8002324:	e005      	b.n	8002332 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f8f7 	bl	800251a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f908 	bl	8002542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	f003 0304 	and.w	r3, r3, #4
 8002342:	2b04      	cmp	r3, #4
 8002344:	d122      	bne.n	800238c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b04      	cmp	r3, #4
 8002352:	d11b      	bne.n	800238c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f06f 0204 	mvn.w	r2, #4
 800235c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2202      	movs	r2, #2
 8002362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f8db 	bl	800252e <HAL_TIM_IC_CaptureCallback>
 8002378:	e005      	b.n	8002386 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f8cd 	bl	800251a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 f8de 	bl	8002542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b08      	cmp	r3, #8
 8002398:	d122      	bne.n	80023e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d11b      	bne.n	80023e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f06f 0208 	mvn.w	r2, #8
 80023b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2204      	movs	r2, #4
 80023b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f8b1 	bl	800252e <HAL_TIM_IC_CaptureCallback>
 80023cc:	e005      	b.n	80023da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f8a3 	bl	800251a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 f8b4 	bl	8002542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	f003 0310 	and.w	r3, r3, #16
 80023ea:	2b10      	cmp	r3, #16
 80023ec:	d122      	bne.n	8002434 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f003 0310 	and.w	r3, r3, #16
 80023f8:	2b10      	cmp	r3, #16
 80023fa:	d11b      	bne.n	8002434 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f06f 0210 	mvn.w	r2, #16
 8002404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2208      	movs	r2, #8
 800240a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f887 	bl	800252e <HAL_TIM_IC_CaptureCallback>
 8002420:	e005      	b.n	800242e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f879 	bl	800251a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f88a 	bl	8002542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b01      	cmp	r3, #1
 8002440:	d10e      	bne.n	8002460 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b01      	cmp	r3, #1
 800244e:	d107      	bne.n	8002460 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0201 	mvn.w	r2, #1
 8002458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7fe f9a0 	bl	80007a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800246a:	2b80      	cmp	r3, #128	; 0x80
 800246c:	d10e      	bne.n	800248c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002478:	2b80      	cmp	r3, #128	; 0x80
 800247a:	d107      	bne.n	800248c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f8de 	bl	8002648 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800249a:	d10e      	bne.n	80024ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a6:	2b80      	cmp	r3, #128	; 0x80
 80024a8:	d107      	bne.n	80024ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80024b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 f8d1 	bl	800265c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c4:	2b40      	cmp	r3, #64	; 0x40
 80024c6:	d10e      	bne.n	80024e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d2:	2b40      	cmp	r3, #64	; 0x40
 80024d4:	d107      	bne.n	80024e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 f838 	bl	8002556 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	f003 0320 	and.w	r3, r3, #32
 80024f0:	2b20      	cmp	r3, #32
 80024f2:	d10e      	bne.n	8002512 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	f003 0320 	and.w	r3, r3, #32
 80024fe:	2b20      	cmp	r3, #32
 8002500:	d107      	bne.n	8002512 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f06f 0220 	mvn.w	r2, #32
 800250a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f891 	bl	8002634 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
	...

0800256c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a2a      	ldr	r2, [pc, #168]	; (8002628 <TIM_Base_SetConfig+0xbc>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d003      	beq.n	800258c <TIM_Base_SetConfig+0x20>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800258a:	d108      	bne.n	800259e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002592:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	4313      	orrs	r3, r2
 800259c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a21      	ldr	r2, [pc, #132]	; (8002628 <TIM_Base_SetConfig+0xbc>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d00b      	beq.n	80025be <TIM_Base_SetConfig+0x52>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ac:	d007      	beq.n	80025be <TIM_Base_SetConfig+0x52>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a1e      	ldr	r2, [pc, #120]	; (800262c <TIM_Base_SetConfig+0xc0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d003      	beq.n	80025be <TIM_Base_SetConfig+0x52>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a1d      	ldr	r2, [pc, #116]	; (8002630 <TIM_Base_SetConfig+0xc4>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d108      	bne.n	80025d0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	4313      	orrs	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a0c      	ldr	r2, [pc, #48]	; (8002628 <TIM_Base_SetConfig+0xbc>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d007      	beq.n	800260c <TIM_Base_SetConfig+0xa0>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a0b      	ldr	r2, [pc, #44]	; (800262c <TIM_Base_SetConfig+0xc0>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d003      	beq.n	800260c <TIM_Base_SetConfig+0xa0>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a0a      	ldr	r2, [pc, #40]	; (8002630 <TIM_Base_SetConfig+0xc4>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d103      	bne.n	8002614 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	615a      	str	r2, [r3, #20]
}
 800261a:	bf00      	nop
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40012c00 	.word	0x40012c00
 800262c:	40014000 	.word	0x40014000
 8002630:	40014400 	.word	0x40014400

08002634 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e040      	b.n	8002704 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002686:	2b00      	cmp	r3, #0
 8002688:	d106      	bne.n	8002698 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7fe f8c6 	bl	8000824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2224      	movs	r2, #36	; 0x24
 800269c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0201 	bic.w	r2, r2, #1
 80026ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 fa70 	bl	8002b94 <UART_SetConfig>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e022      	b.n	8002704 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d002      	beq.n	80026cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 fd78 	bl	80031bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f042 0201 	orr.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 fdff 	bl	8003300 <UART_CheckIdleState>
 8002702:	4603      	mov	r3, r0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	4613      	mov	r3, r2
 8002718:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800271e:	2b20      	cmp	r3, #32
 8002720:	d144      	bne.n	80027ac <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d002      	beq.n	800272e <HAL_UART_Transmit_IT+0x22>
 8002728:	88fb      	ldrh	r3, [r7, #6]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e03d      	b.n	80027ae <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <HAL_UART_Transmit_IT+0x34>
 800273c:	2302      	movs	r3, #2
 800273e:	e036      	b.n	80027ae <HAL_UART_Transmit_IT+0xa2>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	88fa      	ldrh	r2, [r7, #6]
 8002752:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	88fa      	ldrh	r2, [r7, #6]
 800275a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2221      	movs	r2, #33	; 0x21
 800276e:	675a      	str	r2, [r3, #116]	; 0x74
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002778:	d107      	bne.n	800278a <HAL_UART_Transmit_IT+0x7e>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d103      	bne.n	800278a <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	4a0d      	ldr	r2, [pc, #52]	; (80027bc <HAL_UART_Transmit_IT+0xb0>)
 8002786:	665a      	str	r2, [r3, #100]	; 0x64
 8002788:	e002      	b.n	8002790 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4a0c      	ldr	r2, [pc, #48]	; (80027c0 <HAL_UART_Transmit_IT+0xb4>)
 800278e:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027a6:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80027a8:	2300      	movs	r3, #0
 80027aa:	e000      	b.n	80027ae <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 80027ac:	2302      	movs	r3, #2
  }
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	08003561 	.word	0x08003561
 80027c0:	080034ed 	.word	0x080034ed

080027c4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	4613      	mov	r3, r2
 80027d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027d6:	2b20      	cmp	r3, #32
 80027d8:	f040 808a 	bne.w	80028f0 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <HAL_UART_Receive_IT+0x24>
 80027e2:	88fb      	ldrh	r3, [r7, #6]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e082      	b.n	80028f2 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d101      	bne.n	80027fa <HAL_UART_Receive_IT+0x36>
 80027f6:	2302      	movs	r3, #2
 80027f8:	e07b      	b.n	80028f2 <HAL_UART_Receive_IT+0x12e>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	88fa      	ldrh	r2, [r7, #6]
 800280c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	88fa      	ldrh	r2, [r7, #6]
 8002814:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002826:	d10e      	bne.n	8002846 <HAL_UART_Receive_IT+0x82>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d105      	bne.n	800283c <HAL_UART_Receive_IT+0x78>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002836:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800283a:	e02d      	b.n	8002898 <HAL_UART_Receive_IT+0xd4>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	22ff      	movs	r2, #255	; 0xff
 8002840:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002844:	e028      	b.n	8002898 <HAL_UART_Receive_IT+0xd4>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10d      	bne.n	800286a <HAL_UART_Receive_IT+0xa6>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d104      	bne.n	8002860 <HAL_UART_Receive_IT+0x9c>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	22ff      	movs	r2, #255	; 0xff
 800285a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800285e:	e01b      	b.n	8002898 <HAL_UART_Receive_IT+0xd4>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	227f      	movs	r2, #127	; 0x7f
 8002864:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002868:	e016      	b.n	8002898 <HAL_UART_Receive_IT+0xd4>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002872:	d10d      	bne.n	8002890 <HAL_UART_Receive_IT+0xcc>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d104      	bne.n	8002886 <HAL_UART_Receive_IT+0xc2>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	227f      	movs	r2, #127	; 0x7f
 8002880:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002884:	e008      	b.n	8002898 <HAL_UART_Receive_IT+0xd4>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	223f      	movs	r2, #63	; 0x3f
 800288a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800288e:	e003      	b.n	8002898 <HAL_UART_Receive_IT+0xd4>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2222      	movs	r2, #34	; 0x22
 80028a2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0201 	orr.w	r2, r2, #1
 80028b2:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028bc:	d107      	bne.n	80028ce <HAL_UART_Receive_IT+0x10a>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d103      	bne.n	80028ce <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4a0d      	ldr	r2, [pc, #52]	; (8002900 <HAL_UART_Receive_IT+0x13c>)
 80028ca:	661a      	str	r2, [r3, #96]	; 0x60
 80028cc:	e002      	b.n	80028d4 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	4a0c      	ldr	r2, [pc, #48]	; (8002904 <HAL_UART_Receive_IT+0x140>)
 80028d2:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80028ea:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	e000      	b.n	80028f2 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80028f0:	2302      	movs	r3, #2
  }
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	080036b9 	.word	0x080036b9
 8002904:	0800360f 	.word	0x0800360f

08002908 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b088      	sub	sp, #32
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002928:	69fa      	ldr	r2, [r7, #28]
 800292a:	f640 030f 	movw	r3, #2063	; 0x80f
 800292e:	4013      	ands	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d113      	bne.n	8002960 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	f003 0320 	and.w	r3, r3, #32
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00e      	beq.n	8002960 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	f003 0320 	and.w	r3, r3, #32
 8002948:	2b00      	cmp	r3, #0
 800294a:	d009      	beq.n	8002960 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 8114 	beq.w	8002b7e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	4798      	blx	r3
      }
      return;
 800295e:	e10e      	b.n	8002b7e <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 80d6 	beq.w	8002b14 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d105      	bne.n	800297e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 80cb 	beq.w	8002b14 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00e      	beq.n	80029a6 <HAL_UART_IRQHandler+0x9e>
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298e:	2b00      	cmp	r3, #0
 8002990:	d009      	beq.n	80029a6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2201      	movs	r2, #1
 8002998:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800299e:	f043 0201 	orr.w	r2, r3, #1
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00e      	beq.n	80029ce <HAL_UART_IRQHandler+0xc6>
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d009      	beq.n	80029ce <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2202      	movs	r2, #2
 80029c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029c6:	f043 0204 	orr.w	r2, r3, #4
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00e      	beq.n	80029f6 <HAL_UART_IRQHandler+0xee>
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d009      	beq.n	80029f6 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2204      	movs	r2, #4
 80029e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029ee:	f043 0202 	orr.w	r2, r3, #2
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d013      	beq.n	8002a28 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	f003 0320 	and.w	r3, r3, #32
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d104      	bne.n	8002a14 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d009      	beq.n	8002a28 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2208      	movs	r2, #8
 8002a1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a20:	f043 0208 	orr.w	r2, r3, #8
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00f      	beq.n	8002a52 <HAL_UART_IRQHandler+0x14a>
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00a      	beq.n	8002a52 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a4a:	f043 0220 	orr.w	r2, r3, #32
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 8093 	beq.w	8002b82 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f003 0320 	and.w	r3, r3, #32
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00c      	beq.n	8002a80 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	f003 0320 	and.w	r3, r3, #32
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d007      	beq.n	8002a80 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a84:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a90:	2b40      	cmp	r3, #64	; 0x40
 8002a92:	d004      	beq.n	8002a9e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d031      	beq.n	8002b02 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 fcee 	bl	8003480 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aae:	2b40      	cmp	r3, #64	; 0x40
 8002ab0:	d123      	bne.n	8002afa <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ac0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d013      	beq.n	8002af2 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ace:	4a30      	ldr	r2, [pc, #192]	; (8002b90 <HAL_UART_IRQHandler+0x288>)
 8002ad0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe f92e 	bl	8000d38 <HAL_DMA_Abort_IT>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d016      	beq.n	8002b10 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002aec:	4610      	mov	r0, r2
 8002aee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002af0:	e00e      	b.n	8002b10 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f003 fb42 	bl	800617c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002af8:	e00a      	b.n	8002b10 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f003 fb3e 	bl	800617c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b00:	e006      	b.n	8002b10 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f003 fb3a 	bl	800617c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8002b0e:	e038      	b.n	8002b82 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b10:	bf00      	nop
    return;
 8002b12:	e036      	b.n	8002b82 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00d      	beq.n	8002b3a <HAL_UART_IRQHandler+0x232>
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d008      	beq.n	8002b3a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fe15 	bl	8003762 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002b38:	e026      	b.n	8002b88 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00d      	beq.n	8002b60 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d008      	beq.n	8002b60 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d017      	beq.n	8002b86 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	4798      	blx	r3
    }
    return;
 8002b5e:	e012      	b.n	8002b86 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00e      	beq.n	8002b88 <HAL_UART_IRQHandler+0x280>
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d009      	beq.n	8002b88 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 fd31 	bl	80035dc <UART_EndTransmit_IT>
    return;
 8002b7a:	bf00      	nop
 8002b7c:	e004      	b.n	8002b88 <HAL_UART_IRQHandler+0x280>
      return;
 8002b7e:	bf00      	nop
 8002b80:	e002      	b.n	8002b88 <HAL_UART_IRQHandler+0x280>
    return;
 8002b82:	bf00      	nop
 8002b84:	e000      	b.n	8002b88 <HAL_UART_IRQHandler+0x280>
    return;
 8002b86:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002b88:	3720      	adds	r7, #32
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	080034c1 	.word	0x080034c1

08002b94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b94:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002b98:	b08a      	sub	sp, #40	; 0x28
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	4bbc      	ldr	r3, [pc, #752]	; (8002ebc <UART_SetConfig+0x328>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6812      	ldr	r2, [r2, #0]
 8002bd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bd2:	430b      	orrs	r3, r1
 8002bd4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4ab2      	ldr	r2, [pc, #712]	; (8002ec0 <UART_SetConfig+0x32c>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d004      	beq.n	8002c06 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c02:	4313      	orrs	r3, r2
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c16:	430a      	orrs	r2, r1
 8002c18:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4aa9      	ldr	r2, [pc, #676]	; (8002ec4 <UART_SetConfig+0x330>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d126      	bne.n	8002c72 <UART_SetConfig+0xde>
 8002c24:	4ba8      	ldr	r3, [pc, #672]	; (8002ec8 <UART_SetConfig+0x334>)
 8002c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	d81a      	bhi.n	8002c68 <UART_SetConfig+0xd4>
 8002c32:	a201      	add	r2, pc, #4	; (adr r2, 8002c38 <UART_SetConfig+0xa4>)
 8002c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c38:	08002c49 	.word	0x08002c49
 8002c3c:	08002c59 	.word	0x08002c59
 8002c40:	08002c51 	.word	0x08002c51
 8002c44:	08002c61 	.word	0x08002c61
 8002c48:	2301      	movs	r3, #1
 8002c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c4e:	e0ab      	b.n	8002da8 <UART_SetConfig+0x214>
 8002c50:	2302      	movs	r3, #2
 8002c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c56:	e0a7      	b.n	8002da8 <UART_SetConfig+0x214>
 8002c58:	2304      	movs	r3, #4
 8002c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c5e:	e0a3      	b.n	8002da8 <UART_SetConfig+0x214>
 8002c60:	2308      	movs	r3, #8
 8002c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c66:	e09f      	b.n	8002da8 <UART_SetConfig+0x214>
 8002c68:	2310      	movs	r3, #16
 8002c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c6e:	bf00      	nop
 8002c70:	e09a      	b.n	8002da8 <UART_SetConfig+0x214>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a95      	ldr	r2, [pc, #596]	; (8002ecc <UART_SetConfig+0x338>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d138      	bne.n	8002cee <UART_SetConfig+0x15a>
 8002c7c:	4b92      	ldr	r3, [pc, #584]	; (8002ec8 <UART_SetConfig+0x334>)
 8002c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	2b0c      	cmp	r3, #12
 8002c88:	d82c      	bhi.n	8002ce4 <UART_SetConfig+0x150>
 8002c8a:	a201      	add	r2, pc, #4	; (adr r2, 8002c90 <UART_SetConfig+0xfc>)
 8002c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c90:	08002cc5 	.word	0x08002cc5
 8002c94:	08002ce5 	.word	0x08002ce5
 8002c98:	08002ce5 	.word	0x08002ce5
 8002c9c:	08002ce5 	.word	0x08002ce5
 8002ca0:	08002cd5 	.word	0x08002cd5
 8002ca4:	08002ce5 	.word	0x08002ce5
 8002ca8:	08002ce5 	.word	0x08002ce5
 8002cac:	08002ce5 	.word	0x08002ce5
 8002cb0:	08002ccd 	.word	0x08002ccd
 8002cb4:	08002ce5 	.word	0x08002ce5
 8002cb8:	08002ce5 	.word	0x08002ce5
 8002cbc:	08002ce5 	.word	0x08002ce5
 8002cc0:	08002cdd 	.word	0x08002cdd
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cca:	e06d      	b.n	8002da8 <UART_SetConfig+0x214>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cd2:	e069      	b.n	8002da8 <UART_SetConfig+0x214>
 8002cd4:	2304      	movs	r3, #4
 8002cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cda:	e065      	b.n	8002da8 <UART_SetConfig+0x214>
 8002cdc:	2308      	movs	r3, #8
 8002cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ce2:	e061      	b.n	8002da8 <UART_SetConfig+0x214>
 8002ce4:	2310      	movs	r3, #16
 8002ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cea:	bf00      	nop
 8002cec:	e05c      	b.n	8002da8 <UART_SetConfig+0x214>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a77      	ldr	r2, [pc, #476]	; (8002ed0 <UART_SetConfig+0x33c>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d125      	bne.n	8002d44 <UART_SetConfig+0x1b0>
 8002cf8:	4b73      	ldr	r3, [pc, #460]	; (8002ec8 <UART_SetConfig+0x334>)
 8002cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002d02:	2b10      	cmp	r3, #16
 8002d04:	d011      	beq.n	8002d2a <UART_SetConfig+0x196>
 8002d06:	2b10      	cmp	r3, #16
 8002d08:	d802      	bhi.n	8002d10 <UART_SetConfig+0x17c>
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d005      	beq.n	8002d1a <UART_SetConfig+0x186>
 8002d0e:	e014      	b.n	8002d3a <UART_SetConfig+0x1a6>
 8002d10:	2b20      	cmp	r3, #32
 8002d12:	d006      	beq.n	8002d22 <UART_SetConfig+0x18e>
 8002d14:	2b30      	cmp	r3, #48	; 0x30
 8002d16:	d00c      	beq.n	8002d32 <UART_SetConfig+0x19e>
 8002d18:	e00f      	b.n	8002d3a <UART_SetConfig+0x1a6>
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d20:	e042      	b.n	8002da8 <UART_SetConfig+0x214>
 8002d22:	2302      	movs	r3, #2
 8002d24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d28:	e03e      	b.n	8002da8 <UART_SetConfig+0x214>
 8002d2a:	2304      	movs	r3, #4
 8002d2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d30:	e03a      	b.n	8002da8 <UART_SetConfig+0x214>
 8002d32:	2308      	movs	r3, #8
 8002d34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d38:	e036      	b.n	8002da8 <UART_SetConfig+0x214>
 8002d3a:	2310      	movs	r3, #16
 8002d3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d40:	bf00      	nop
 8002d42:	e031      	b.n	8002da8 <UART_SetConfig+0x214>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a5d      	ldr	r2, [pc, #372]	; (8002ec0 <UART_SetConfig+0x32c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d129      	bne.n	8002da2 <UART_SetConfig+0x20e>
 8002d4e:	4b5e      	ldr	r3, [pc, #376]	; (8002ec8 <UART_SetConfig+0x334>)
 8002d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d5c:	d014      	beq.n	8002d88 <UART_SetConfig+0x1f4>
 8002d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d62:	d802      	bhi.n	8002d6a <UART_SetConfig+0x1d6>
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d007      	beq.n	8002d78 <UART_SetConfig+0x1e4>
 8002d68:	e016      	b.n	8002d98 <UART_SetConfig+0x204>
 8002d6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d6e:	d007      	beq.n	8002d80 <UART_SetConfig+0x1ec>
 8002d70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d74:	d00c      	beq.n	8002d90 <UART_SetConfig+0x1fc>
 8002d76:	e00f      	b.n	8002d98 <UART_SetConfig+0x204>
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d7e:	e013      	b.n	8002da8 <UART_SetConfig+0x214>
 8002d80:	2302      	movs	r3, #2
 8002d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d86:	e00f      	b.n	8002da8 <UART_SetConfig+0x214>
 8002d88:	2304      	movs	r3, #4
 8002d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d8e:	e00b      	b.n	8002da8 <UART_SetConfig+0x214>
 8002d90:	2308      	movs	r3, #8
 8002d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d96:	e007      	b.n	8002da8 <UART_SetConfig+0x214>
 8002d98:	2310      	movs	r3, #16
 8002d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d9e:	bf00      	nop
 8002da0:	e002      	b.n	8002da8 <UART_SetConfig+0x214>
 8002da2:	2310      	movs	r3, #16
 8002da4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a44      	ldr	r2, [pc, #272]	; (8002ec0 <UART_SetConfig+0x32c>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	f040 80fb 	bne.w	8002faa <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002db4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d824      	bhi.n	8002e06 <UART_SetConfig+0x272>
 8002dbc:	a201      	add	r2, pc, #4	; (adr r2, 8002dc4 <UART_SetConfig+0x230>)
 8002dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc2:	bf00      	nop
 8002dc4:	08002de9 	.word	0x08002de9
 8002dc8:	08002e07 	.word	0x08002e07
 8002dcc:	08002df1 	.word	0x08002df1
 8002dd0:	08002e07 	.word	0x08002e07
 8002dd4:	08002df7 	.word	0x08002df7
 8002dd8:	08002e07 	.word	0x08002e07
 8002ddc:	08002e07 	.word	0x08002e07
 8002de0:	08002e07 	.word	0x08002e07
 8002de4:	08002dff 	.word	0x08002dff
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002de8:	f7fe ffc4 	bl	8001d74 <HAL_RCC_GetPCLK1Freq>
 8002dec:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002dee:	e00d      	b.n	8002e0c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002df0:	4b38      	ldr	r3, [pc, #224]	; (8002ed4 <UART_SetConfig+0x340>)
 8002df2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002df4:	e00a      	b.n	8002e0c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002df6:	f7fe ff27 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 8002dfa:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002dfc:	e006      	b.n	8002e0c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002dfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e02:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002e04:	e002      	b.n	8002e0c <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	76fb      	strb	r3, [r7, #27]
        break;
 8002e0a:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 81c8 	beq.w	80031a4 <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	4413      	add	r3, r2
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d305      	bcc.n	8002e30 <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d902      	bls.n	8002e36 <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	76fb      	strb	r3, [r7, #27]
 8002e34:	e1b6      	b.n	80031a4 <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 8002e36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	f200 80a2 	bhi.w	8002f84 <UART_SetConfig+0x3f0>
 8002e40:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <UART_SetConfig+0x2b4>)
 8002e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e46:	bf00      	nop
 8002e48:	08002e6d 	.word	0x08002e6d
 8002e4c:	08002f85 	.word	0x08002f85
 8002e50:	08002ed9 	.word	0x08002ed9
 8002e54:	08002f85 	.word	0x08002f85
 8002e58:	08002f0d 	.word	0x08002f0d
 8002e5c:	08002f85 	.word	0x08002f85
 8002e60:	08002f85 	.word	0x08002f85
 8002e64:	08002f85 	.word	0x08002f85
 8002e68:	08002f5b 	.word	0x08002f5b
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8002e6c:	f7fe ff82 	bl	8001d74 <HAL_RCC_GetPCLK1Freq>
 8002e70:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4619      	mov	r1, r3
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	f04f 0300 	mov.w	r3, #0
 8002e7e:	f04f 0400 	mov.w	r4, #0
 8002e82:	0214      	lsls	r4, r2, #8
 8002e84:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002e88:	020b      	lsls	r3, r1, #8
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6852      	ldr	r2, [r2, #4]
 8002e8e:	0852      	lsrs	r2, r2, #1
 8002e90:	4611      	mov	r1, r2
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	eb13 0b01 	adds.w	fp, r3, r1
 8002e9a:	eb44 0c02 	adc.w	ip, r4, r2
 8002e9e:	4658      	mov	r0, fp
 8002ea0:	4661      	mov	r1, ip
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f04f 0400 	mov.w	r4, #0
 8002eaa:	461a      	mov	r2, r3
 8002eac:	4623      	mov	r3, r4
 8002eae:	f7fd f98f 	bl	80001d0 <__aeabi_uldivmod>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	460c      	mov	r4, r1
 8002eb6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002eb8:	e067      	b.n	8002f8a <UART_SetConfig+0x3f6>
 8002eba:	bf00      	nop
 8002ebc:	efff69f3 	.word	0xefff69f3
 8002ec0:	40008000 	.word	0x40008000
 8002ec4:	40013800 	.word	0x40013800
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	40004400 	.word	0x40004400
 8002ed0:	40004800 	.word	0x40004800
 8002ed4:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	085b      	lsrs	r3, r3, #1
 8002ede:	f04f 0400 	mov.w	r4, #0
 8002ee2:	49ae      	ldr	r1, [pc, #696]	; (800319c <UART_SetConfig+0x608>)
 8002ee4:	f04f 0200 	mov.w	r2, #0
 8002ee8:	eb13 0b01 	adds.w	fp, r3, r1
 8002eec:	eb44 0c02 	adc.w	ip, r4, r2
 8002ef0:	4658      	mov	r0, fp
 8002ef2:	4661      	mov	r1, ip
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f04f 0400 	mov.w	r4, #0
 8002efc:	461a      	mov	r2, r3
 8002efe:	4623      	mov	r3, r4
 8002f00:	f7fd f966 	bl	80001d0 <__aeabi_uldivmod>
 8002f04:	4603      	mov	r3, r0
 8002f06:	460c      	mov	r4, r1
 8002f08:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002f0a:	e03e      	b.n	8002f8a <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8002f0c:	f7fe fe9c 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 8002f10:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	4619      	mov	r1, r3
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	f04f 0400 	mov.w	r4, #0
 8002f22:	0214      	lsls	r4, r2, #8
 8002f24:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002f28:	020b      	lsls	r3, r1, #8
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6852      	ldr	r2, [r2, #4]
 8002f2e:	0852      	lsrs	r2, r2, #1
 8002f30:	4611      	mov	r1, r2
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	eb13 0b01 	adds.w	fp, r3, r1
 8002f3a:	eb44 0c02 	adc.w	ip, r4, r2
 8002f3e:	4658      	mov	r0, fp
 8002f40:	4661      	mov	r1, ip
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f04f 0400 	mov.w	r4, #0
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	4623      	mov	r3, r4
 8002f4e:	f7fd f93f 	bl	80001d0 <__aeabi_uldivmod>
 8002f52:	4603      	mov	r3, r0
 8002f54:	460c      	mov	r4, r1
 8002f56:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002f58:	e017      	b.n	8002f8a <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	085b      	lsrs	r3, r3, #1
 8002f60:	f04f 0400 	mov.w	r4, #0
 8002f64:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8002f68:	f144 0100 	adc.w	r1, r4, #0
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f04f 0400 	mov.w	r4, #0
 8002f74:	461a      	mov	r2, r3
 8002f76:	4623      	mov	r3, r4
 8002f78:	f7fd f92a 	bl	80001d0 <__aeabi_uldivmod>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	460c      	mov	r4, r1
 8002f80:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002f82:	e002      	b.n	8002f8a <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	76fb      	strb	r3, [r7, #27]
            break;
 8002f88:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f90:	d308      	bcc.n	8002fa4 <UART_SetConfig+0x410>
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f98:	d204      	bcs.n	8002fa4 <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	69fa      	ldr	r2, [r7, #28]
 8002fa0:	60da      	str	r2, [r3, #12]
 8002fa2:	e0ff      	b.n	80031a4 <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	76fb      	strb	r3, [r7, #27]
 8002fa8:	e0fc      	b.n	80031a4 <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fb2:	f040 8083 	bne.w	80030bc <UART_SetConfig+0x528>
  {
    switch (clocksource)
 8002fb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fba:	2b08      	cmp	r3, #8
 8002fbc:	d85e      	bhi.n	800307c <UART_SetConfig+0x4e8>
 8002fbe:	a201      	add	r2, pc, #4	; (adr r2, 8002fc4 <UART_SetConfig+0x430>)
 8002fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc4:	08002fe9 	.word	0x08002fe9
 8002fc8:	08003009 	.word	0x08003009
 8002fcc:	08003029 	.word	0x08003029
 8002fd0:	0800307d 	.word	0x0800307d
 8002fd4:	08003045 	.word	0x08003045
 8002fd8:	0800307d 	.word	0x0800307d
 8002fdc:	0800307d 	.word	0x0800307d
 8002fe0:	0800307d 	.word	0x0800307d
 8002fe4:	08003065 	.word	0x08003065
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fe8:	f7fe fec4 	bl	8001d74 <HAL_RCC_GetPCLK1Freq>
 8002fec:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	005a      	lsls	r2, r3, #1
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	085b      	lsrs	r3, r3, #1
 8002ff8:	441a      	add	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003002:	b29b      	uxth	r3, r3
 8003004:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003006:	e03c      	b.n	8003082 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003008:	f7fe feca 	bl	8001da0 <HAL_RCC_GetPCLK2Freq>
 800300c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	005a      	lsls	r2, r3, #1
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	085b      	lsrs	r3, r3, #1
 8003018:	441a      	add	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003022:	b29b      	uxth	r3, r3
 8003024:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003026:	e02c      	b.n	8003082 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	085b      	lsrs	r3, r3, #1
 800302e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003032:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6852      	ldr	r2, [r2, #4]
 800303a:	fbb3 f3f2 	udiv	r3, r3, r2
 800303e:	b29b      	uxth	r3, r3
 8003040:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003042:	e01e      	b.n	8003082 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003044:	f7fe fe00 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 8003048:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	005a      	lsls	r2, r3, #1
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	085b      	lsrs	r3, r3, #1
 8003054:	441a      	add	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	fbb2 f3f3 	udiv	r3, r2, r3
 800305e:	b29b      	uxth	r3, r3
 8003060:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003062:	e00e      	b.n	8003082 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	085b      	lsrs	r3, r3, #1
 800306a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	fbb2 f3f3 	udiv	r3, r2, r3
 8003076:	b29b      	uxth	r3, r3
 8003078:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800307a:	e002      	b.n	8003082 <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	76fb      	strb	r3, [r7, #27]
        break;
 8003080:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	2b0f      	cmp	r3, #15
 8003086:	d916      	bls.n	80030b6 <UART_SetConfig+0x522>
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800308e:	d212      	bcs.n	80030b6 <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	b29b      	uxth	r3, r3
 8003094:	f023 030f 	bic.w	r3, r3, #15
 8003098:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	085b      	lsrs	r3, r3, #1
 800309e:	b29b      	uxth	r3, r3
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	89fb      	ldrh	r3, [r7, #14]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	89fa      	ldrh	r2, [r7, #14]
 80030b2:	60da      	str	r2, [r3, #12]
 80030b4:	e076      	b.n	80031a4 <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	76fb      	strb	r3, [r7, #27]
 80030ba:	e073      	b.n	80031a4 <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 80030bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d85c      	bhi.n	800317e <UART_SetConfig+0x5ea>
 80030c4:	a201      	add	r2, pc, #4	; (adr r2, 80030cc <UART_SetConfig+0x538>)
 80030c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ca:	bf00      	nop
 80030cc:	080030f1 	.word	0x080030f1
 80030d0:	0800310f 	.word	0x0800310f
 80030d4:	0800312d 	.word	0x0800312d
 80030d8:	0800317f 	.word	0x0800317f
 80030dc:	08003149 	.word	0x08003149
 80030e0:	0800317f 	.word	0x0800317f
 80030e4:	0800317f 	.word	0x0800317f
 80030e8:	0800317f 	.word	0x0800317f
 80030ec:	08003167 	.word	0x08003167
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030f0:	f7fe fe40 	bl	8001d74 <HAL_RCC_GetPCLK1Freq>
 80030f4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	085a      	lsrs	r2, r3, #1
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	441a      	add	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	fbb2 f3f3 	udiv	r3, r2, r3
 8003108:	b29b      	uxth	r3, r3
 800310a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800310c:	e03a      	b.n	8003184 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800310e:	f7fe fe47 	bl	8001da0 <HAL_RCC_GetPCLK2Freq>
 8003112:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	085a      	lsrs	r2, r3, #1
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	441a      	add	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	fbb2 f3f3 	udiv	r3, r2, r3
 8003126:	b29b      	uxth	r3, r3
 8003128:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800312a:	e02b      	b.n	8003184 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	085b      	lsrs	r3, r3, #1
 8003132:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003136:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6852      	ldr	r2, [r2, #4]
 800313e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003142:	b29b      	uxth	r3, r3
 8003144:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003146:	e01d      	b.n	8003184 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003148:	f7fe fd7e 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 800314c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	085a      	lsrs	r2, r3, #1
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	441a      	add	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003160:	b29b      	uxth	r3, r3
 8003162:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003164:	e00e      	b.n	8003184 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	085b      	lsrs	r3, r3, #1
 800316c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	fbb2 f3f3 	udiv	r3, r2, r3
 8003178:	b29b      	uxth	r3, r3
 800317a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800317c:	e002      	b.n	8003184 <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	76fb      	strb	r3, [r7, #27]
        break;
 8003182:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	2b0f      	cmp	r3, #15
 8003188:	d90a      	bls.n	80031a0 <UART_SetConfig+0x60c>
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003190:	d206      	bcs.n	80031a0 <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	69fa      	ldr	r2, [r7, #28]
 8003198:	60da      	str	r2, [r3, #12]
 800319a:	e003      	b.n	80031a4 <UART_SetConfig+0x610>
 800319c:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80031b0:	7efb      	ldrb	r3, [r7, #27]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3728      	adds	r7, #40	; 0x28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080031bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00a      	beq.n	80031e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00a      	beq.n	800322a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00a      	beq.n	800324c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	f003 0310 	and.w	r3, r3, #16
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00a      	beq.n	800326e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	f003 0320 	and.w	r3, r3, #32
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00a      	beq.n	8003290 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003298:	2b00      	cmp	r3, #0
 800329a:	d01a      	beq.n	80032d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032ba:	d10a      	bne.n	80032d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00a      	beq.n	80032f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	605a      	str	r2, [r3, #4]
  }
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af02      	add	r7, sp, #8
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800330e:	f7fd fc25 	bl	8000b5c <HAL_GetTick>
 8003312:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	2b08      	cmp	r3, #8
 8003320:	d10e      	bne.n	8003340 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003322:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 f82a 	bl	800338a <UART_WaitOnFlagUntilTimeout>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e020      	b.n	8003382 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0304 	and.w	r3, r3, #4
 800334a:	2b04      	cmp	r3, #4
 800334c:	d10e      	bne.n	800336c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800334e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 f814 	bl	800338a <UART_WaitOnFlagUntilTimeout>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e00a      	b.n	8003382 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2220      	movs	r2, #32
 8003370:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2220      	movs	r2, #32
 8003376:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	603b      	str	r3, [r7, #0]
 8003396:	4613      	mov	r3, r2
 8003398:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800339a:	e05d      	b.n	8003458 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a2:	d059      	beq.n	8003458 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033a4:	f7fd fbda 	bl	8000b5c <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d302      	bcc.n	80033ba <UART_WaitOnFlagUntilTimeout+0x30>
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d11b      	bne.n	80033f2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033c8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 0201 	bic.w	r2, r2, #1
 80033d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2220      	movs	r2, #32
 80033de:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2220      	movs	r2, #32
 80033e4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e042      	b.n	8003478 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d02b      	beq.n	8003458 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800340a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800340e:	d123      	bne.n	8003458 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003418:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003428:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0201 	bic.w	r2, r2, #1
 8003438:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2220      	movs	r2, #32
 800343e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2220      	movs	r2, #32
 8003444:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2220      	movs	r2, #32
 800344a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e00f      	b.n	8003478 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	69da      	ldr	r2, [r3, #28]
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	4013      	ands	r3, r2
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	429a      	cmp	r2, r3
 8003466:	bf0c      	ite	eq
 8003468:	2301      	moveq	r3, #1
 800346a:	2300      	movne	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	461a      	mov	r2, r3
 8003470:	79fb      	ldrb	r3, [r7, #7]
 8003472:	429a      	cmp	r2, r3
 8003474:	d092      	beq.n	800339c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003496:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689a      	ldr	r2, [r3, #8]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0201 	bic.w	r2, r2, #1
 80034a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2220      	movs	r2, #32
 80034ac:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	661a      	str	r2, [r3, #96]	; 0x60
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f002 fe4c 	bl	800617c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034e4:	bf00      	nop
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f8:	2b21      	cmp	r3, #33	; 0x21
 80034fa:	d12b      	bne.n	8003554 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003502:	b29b      	uxth	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d110      	bne.n	800352a <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003516:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003526:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003528:	e014      	b.n	8003554 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800352e:	781a      	ldrb	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	b292      	uxth	r2, r2
 8003536:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353c:	1c5a      	adds	r2, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003548:	b29b      	uxth	r3, r3
 800354a:	3b01      	subs	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800356c:	2b21      	cmp	r3, #33	; 0x21
 800356e:	d12f      	bne.n	80035d0 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003576:	b29b      	uxth	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	d110      	bne.n	800359e <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800358a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800359a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800359c:	e018      	b.n	80035d0 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	881a      	ldrh	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035b0:	b292      	uxth	r2, r2
 80035b2:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b8:	1c9a      	adds	r2, r3, #2
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	3b01      	subs	r3, #1
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80035d0:	bf00      	nop
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035f2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2220      	movs	r2, #32
 80035f8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f002 fda3 	bl	800614c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003606:	bf00      	nop
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b084      	sub	sp, #16
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800361c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003622:	2b22      	cmp	r3, #34	; 0x22
 8003624:	d13a      	bne.n	800369c <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800362c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800362e:	89bb      	ldrh	r3, [r7, #12]
 8003630:	b2d9      	uxtb	r1, r3
 8003632:	89fb      	ldrh	r3, [r7, #14]
 8003634:	b2da      	uxtb	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363a:	400a      	ands	r2, r1
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003644:	1c5a      	adds	r2, r3, #1
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003650:	b29b      	uxth	r3, r3
 8003652:	3b01      	subs	r3, #1
 8003654:	b29a      	uxth	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003662:	b29b      	uxth	r3, r3
 8003664:	2b00      	cmp	r3, #0
 8003666:	d123      	bne.n	80036b0 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003676:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0201 	bic.w	r2, r2, #1
 8003686:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2220      	movs	r2, #32
 800368c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f002 fd5b 	bl	8006150 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800369a:	e009      	b.n	80036b0 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	8b1b      	ldrh	r3, [r3, #24]
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f042 0208 	orr.w	r2, r2, #8
 80036ac:	b292      	uxth	r2, r2
 80036ae:	831a      	strh	r2, [r3, #24]
}
 80036b0:	bf00      	nop
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80036c6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036cc:	2b22      	cmp	r3, #34	; 0x22
 80036ce:	d13a      	bne.n	8003746 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80036d6:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036dc:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80036de:	89ba      	ldrh	r2, [r7, #12]
 80036e0:	89fb      	ldrh	r3, [r7, #14]
 80036e2:	4013      	ands	r3, r2
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ee:	1c9a      	adds	r2, r3, #2
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	3b01      	subs	r3, #1
 80036fe:	b29a      	uxth	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800370c:	b29b      	uxth	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d123      	bne.n	800375a <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003720:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0201 	bic.w	r2, r2, #1
 8003730:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2220      	movs	r2, #32
 8003736:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f002 fd06 	bl	8006150 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003744:	e009      	b.n	800375a <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	8b1b      	ldrh	r3, [r3, #24]
 800374c:	b29a      	uxth	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 0208 	orr.w	r2, r2, #8
 8003756:	b292      	uxth	r2, r2
 8003758:	831a      	strh	r2, [r3, #24]
}
 800375a:	bf00      	nop
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003776:	b480      	push	{r7}
 8003778:	b085      	sub	sp, #20
 800377a:	af00      	add	r7, sp, #0
 800377c:	4603      	mov	r3, r0
 800377e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003780:	2300      	movs	r3, #0
 8003782:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003784:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003788:	2b84      	cmp	r3, #132	; 0x84
 800378a:	d005      	beq.n	8003798 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800378c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4413      	add	r3, r2
 8003794:	3303      	adds	r3, #3
 8003796:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003798:	68fb      	ldr	r3, [r7, #12]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3714      	adds	r7, #20
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037ac:	f3ef 8305 	mrs	r3, IPSR
 80037b0:	607b      	str	r3, [r7, #4]
  return(result);
 80037b2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	bf14      	ite	ne
 80037b8:	2301      	movne	r3, #1
 80037ba:	2300      	moveq	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
}
 80037be:	4618      	mov	r0, r3
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80037ce:	f001 fac7 	bl	8004d60 <vTaskStartScheduler>
  
  return osOK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80037d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037da:	b089      	sub	sp, #36	; 0x24
 80037dc:	af04      	add	r7, sp, #16
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d020      	beq.n	800382c <osThreadCreate+0x54>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d01c      	beq.n	800382c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685c      	ldr	r4, [r3, #4]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681d      	ldr	r5, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691e      	ldr	r6, [r3, #16]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff ffb6 	bl	8003776 <makeFreeRtosPriority>
 800380a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003814:	9202      	str	r2, [sp, #8]
 8003816:	9301      	str	r3, [sp, #4]
 8003818:	9100      	str	r1, [sp, #0]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	4632      	mov	r2, r6
 800381e:	4629      	mov	r1, r5
 8003820:	4620      	mov	r0, r4
 8003822:	f001 f84c 	bl	80048be <xTaskCreateStatic>
 8003826:	4603      	mov	r3, r0
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	e01c      	b.n	8003866 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685c      	ldr	r4, [r3, #4]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003838:	b29e      	uxth	r6, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff ff98 	bl	8003776 <makeFreeRtosPriority>
 8003846:	4602      	mov	r2, r0
 8003848:	f107 030c 	add.w	r3, r7, #12
 800384c:	9301      	str	r3, [sp, #4]
 800384e:	9200      	str	r2, [sp, #0]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	4632      	mov	r2, r6
 8003854:	4629      	mov	r1, r5
 8003856:	4620      	mov	r0, r4
 8003858:	f001 f88b 	bl	8004972 <xTaskCreate>
 800385c:	4603      	mov	r3, r0
 800385e:	2b01      	cmp	r3, #1
 8003860:	d001      	beq.n	8003866 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003862:	2300      	movs	r3, #0
 8003864:	e000      	b.n	8003868 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003866:	68fb      	ldr	r3, [r7, #12]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003870 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f001 f9af 	bl	8004bdc <vTaskDelete>
  return osOK;
 800387e:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <osDelay+0x16>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	e000      	b.n	80038a0 <osDelay+0x18>
 800389e:	2301      	movs	r3, #1
 80038a0:	4618      	mov	r0, r3
 80038a2:	f001 fa29 	bl	8004cf8 <vTaskDelay>
  
  return osOK;
 80038a6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d007      	beq.n	80038d0 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	4619      	mov	r1, r3
 80038c6:	2001      	movs	r0, #1
 80038c8:	f000 fbe7 	bl	800409a <xQueueCreateMutexStatic>
 80038cc:	4603      	mov	r3, r0
 80038ce:	e003      	b.n	80038d8 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80038d0:	2001      	movs	r0, #1
 80038d2:	f000 fbca 	bl	800406a <xQueueCreateMutex>
 80038d6:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	3303      	adds	r3, #3
 80038ee:	f023 0303 	bic.w	r3, r3, #3
 80038f2:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 80038f4:	2014      	movs	r0, #20
 80038f6:	f002 f973 	bl	8005be0 <pvPortMalloc>
 80038fa:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d046      	beq.n	8003990 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	2200      	movs	r2, #0
 8003914:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f002 f960 	bl	8005be0 <pvPortMalloc>
 8003920:	4602      	mov	r2, r0
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d02b      	beq.n	8003986 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	fb02 f303 	mul.w	r3, r2, r3
 8003938:	4618      	mov	r0, r3
 800393a:	f002 f951 	bl	8005be0 <pvPortMalloc>
 800393e:	4602      	mov	r2, r0
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d011      	beq.n	8003970 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 800394c:	2300      	movs	r3, #0
 800394e:	613b      	str	r3, [r7, #16]
 8003950:	e008      	b.n	8003964 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	4413      	add	r3, r2
 800395a:	2200      	movs	r2, #0
 800395c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	3301      	adds	r3, #1
 8003962:	613b      	str	r3, [r7, #16]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	429a      	cmp	r2, r3
 800396c:	d3f1      	bcc.n	8003952 <osPoolCreate+0x72>
 800396e:	e00f      	b.n	8003990 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	4618      	mov	r0, r3
 8003976:	f002 f9f5 	bl	8005d64 <vPortFree>
        vPortFree(thePool);
 800397a:	6978      	ldr	r0, [r7, #20]
 800397c:	f002 f9f2 	bl	8005d64 <vPortFree>
        thePool = NULL;
 8003980:	2300      	movs	r3, #0
 8003982:	617b      	str	r3, [r7, #20]
 8003984:	e004      	b.n	8003990 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8003986:	6978      	ldr	r0, [r7, #20]
 8003988:	f002 f9ec 	bl	8005d64 <vPortFree>
      thePool = NULL;
 800398c:	2300      	movs	r3, #0
 800398e:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8003990:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8003992:	4618      	mov	r0, r3
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 800399a:	b480      	push	{r7}
 800399c:	b085      	sub	sp, #20
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <osPoolFree+0x14>
    return osErrorParameter;
 80039aa:	2380      	movs	r3, #128	; 0x80
 80039ac:	e030      	b.n	8003a10 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <osPoolFree+0x1e>
    return osErrorParameter;
 80039b4:	2380      	movs	r3, #128	; 0x80
 80039b6:	e02b      	b.n	8003a10 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d201      	bcs.n	80039c6 <osPoolFree+0x2c>
    return osErrorParameter;
 80039c2:	2380      	movs	r3, #128	; 0x80
 80039c4:	e024      	b.n	8003a10 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6812      	ldr	r2, [r2, #0]
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68da      	ldr	r2, [r3, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80039da:	fb02 f201 	mul.w	r2, r2, r1
 80039de:	1a9b      	subs	r3, r3, r2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <osPoolFree+0x4e>
    return osErrorParameter;
 80039e4:	2380      	movs	r3, #128	; 0x80
 80039e6:	e013      	b.n	8003a10 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f2:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d301      	bcc.n	8003a02 <osPoolFree+0x68>
    return osErrorParameter;
 80039fe:	2380      	movs	r3, #128	; 0x80
 8003a00:	e006      	b.n	8003a10 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	4413      	add	r3, r2
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8003a1c:	b590      	push	{r4, r7, lr}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	613b      	str	r3, [r7, #16]
 8003a32:	2300      	movs	r3, #0
 8003a34:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689c      	ldr	r4, [r3, #8]
 8003a3a:	200c      	movs	r0, #12
 8003a3c:	f002 f8d0 	bl	8005be0 <pvPortMalloc>
 8003a40:	4603      	mov	r3, r0
 8003a42:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <osMailCreate+0x36>
    return NULL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	e038      	b.n	8003ac4 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6818      	ldr	r0, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	681c      	ldr	r4, [r3, #0]
 8003a66:	2200      	movs	r2, #0
 8003a68:	2104      	movs	r1, #4
 8003a6a:	f000 fa86 	bl	8003f7a <xQueueGenericCreate>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d107      	bne.n	8003a8e <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f002 f96d 	bl	8005d64 <vPortFree>
    return NULL;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	e01a      	b.n	8003ac4 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	681c      	ldr	r4, [r3, #0]
 8003a94:	f107 030c 	add.w	r3, r7, #12
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff ff21 	bl	80038e0 <osPoolCreate>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d107      	bne.n	8003abe <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f002 f955 	bl	8005d64 <vPortFree>
    return NULL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	e002      	b.n	8003ac4 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	371c      	adds	r7, #28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd90      	pop	{r4, r7, pc}

08003acc <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <osMailPut+0x14>
    return osErrorParameter;
 8003adc:	2380      	movs	r3, #128	; 0x80
 8003ade:	e02c      	b.n	8003b3a <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8003ae4:	f7ff fe5f 	bl	80037a6 <inHandlerMode>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d018      	beq.n	8003b20 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6858      	ldr	r0, [r3, #4]
 8003af2:	f107 020c 	add.w	r2, r7, #12
 8003af6:	4639      	mov	r1, r7
 8003af8:	2300      	movs	r3, #0
 8003afa:	f000 fbe3 	bl	80042c4 <xQueueGenericSendFromISR>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d001      	beq.n	8003b08 <osMailPut+0x3c>
      return osErrorOS;
 8003b04:	23ff      	movs	r3, #255	; 0xff
 8003b06:	e018      	b.n	8003b3a <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d014      	beq.n	8003b38 <osMailPut+0x6c>
 8003b0e:	4b0d      	ldr	r3, [pc, #52]	; (8003b44 <osMailPut+0x78>)
 8003b10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b14:	601a      	str	r2, [r3, #0]
 8003b16:	f3bf 8f4f 	dsb	sy
 8003b1a:	f3bf 8f6f 	isb	sy
 8003b1e:	e00b      	b.n	8003b38 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6858      	ldr	r0, [r3, #4]
 8003b24:	4639      	mov	r1, r7
 8003b26:	2300      	movs	r3, #0
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f000 fad1 	bl	80040d0 <xQueueGenericSend>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d001      	beq.n	8003b38 <osMailPut+0x6c>
      return osErrorOS;
 8003b34:	23ff      	movs	r3, #255	; 0xff
 8003b36:	e000      	b.n	8003b3a <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	e000ed04 	.word	0xe000ed04

08003b48 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8003b48:	b590      	push	{r4, r7, lr}
 8003b4a:	b08b      	sub	sp, #44	; 0x2c
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10a      	bne.n	8003b74 <osMailGet+0x2c>
    event.status = osErrorParameter;
 8003b5e:	2380      	movs	r3, #128	; 0x80
 8003b60:	617b      	str	r3, [r7, #20]
    return event;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	461c      	mov	r4, r3
 8003b66:	f107 0314 	add.w	r3, r7, #20
 8003b6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003b6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003b72:	e056      	b.n	8003c22 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8003b74:	2300      	movs	r3, #0
 8003b76:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b82:	d103      	bne.n	8003b8c <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8003b84:	f04f 33ff 	mov.w	r3, #4294967295
 8003b88:	627b      	str	r3, [r7, #36]	; 0x24
 8003b8a:	e009      	b.n	8003ba0 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d006      	beq.n	8003ba0 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <osMailGet+0x58>
      ticks = 1;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8003ba0:	f7ff fe01 	bl	80037a6 <inHandlerMode>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d01d      	beq.n	8003be6 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	6858      	ldr	r0, [r3, #4]
 8003bae:	f107 0220 	add.w	r2, r7, #32
 8003bb2:	f107 0314 	add.w	r3, r7, #20
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	4619      	mov	r1, r3
 8003bba:	f000 fcf3 	bl	80045a4 <xQueueReceiveFromISR>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d102      	bne.n	8003bca <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8003bc4:	2320      	movs	r3, #32
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	e001      	b.n	8003bce <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d01e      	beq.n	8003c12 <osMailGet+0xca>
 8003bd4:	4b15      	ldr	r3, [pc, #84]	; (8003c2c <osMailGet+0xe4>)
 8003bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	f3bf 8f4f 	dsb	sy
 8003be0:	f3bf 8f6f 	isb	sy
 8003be4:	e015      	b.n	8003c12 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	6858      	ldr	r0, [r3, #4]
 8003bea:	f107 0314 	add.w	r3, r7, #20
 8003bee:	3304      	adds	r3, #4
 8003bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	f000 fbfa 	bl	80043ec <xQueueReceive>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d102      	bne.n	8003c04 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8003bfe:	2320      	movs	r3, #32
 8003c00:	617b      	str	r3, [r7, #20]
 8003c02:	e006      	b.n	8003c12 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <osMailGet+0xc6>
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	e000      	b.n	8003c10 <osMailGet+0xc8>
 8003c0e:	2340      	movs	r3, #64	; 0x40
 8003c10:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	461c      	mov	r4, r3
 8003c16:	f107 0314 	add.w	r3, r7, #20
 8003c1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003c1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	372c      	adds	r7, #44	; 0x2c
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd90      	pop	{r4, r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	e000ed04 	.word	0xe000ed04

08003c30 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <osMailFree+0x14>
    return osErrorParameter;
 8003c40:	2380      	movs	r3, #128	; 0x80
 8003c42:	e006      	b.n	8003c52 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	6839      	ldr	r1, [r7, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7ff fea5 	bl	800399a <osPoolFree>
 8003c50:	4603      	mov	r3, r0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f103 0208 	add.w	r2, r3, #8
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8003c72:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f103 0208 	add.w	r2, r3, #8
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f103 0208 	add.w	r2, r3, #8
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	689a      	ldr	r2, [r3, #8]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	1c5a      	adds	r2, r3, #1
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	601a      	str	r2, [r3, #0]
}
 8003cf0:	bf00      	nop
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d12:	d103      	bne.n	8003d1c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	60fb      	str	r3, [r7, #12]
 8003d1a:	e00c      	b.n	8003d36 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3308      	adds	r3, #8
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	e002      	b.n	8003d2a <vListInsert+0x2e>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	60fb      	str	r3, [r7, #12]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d2f6      	bcs.n	8003d24 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	601a      	str	r2, [r3, #0]
}
 8003d62:	bf00      	nop
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b085      	sub	sp, #20
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	6892      	ldr	r2, [r2, #8]
 8003d84:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	6852      	ldr	r2, [r2, #4]
 8003d8e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d103      	bne.n	8003da2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689a      	ldr	r2, [r3, #8]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	1e5a      	subs	r2, r3, #1
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
	...

08003dc4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d109      	bne.n	8003dec <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ddc:	f383 8811 	msr	BASEPRI, r3
 8003de0:	f3bf 8f6f 	isb	sy
 8003de4:	f3bf 8f4f 	dsb	sy
 8003de8:	60bb      	str	r3, [r7, #8]
 8003dea:	e7fe      	b.n	8003dea <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003dec:	f001 fdde 	bl	80059ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df8:	68f9      	ldr	r1, [r7, #12]
 8003dfa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003dfc:	fb01 f303 	mul.w	r3, r1, r3
 8003e00:	441a      	add	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	68f9      	ldr	r1, [r7, #12]
 8003e20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e22:	fb01 f303 	mul.w	r3, r1, r3
 8003e26:	441a      	add	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	22ff      	movs	r2, #255	; 0xff
 8003e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	22ff      	movs	r2, #255	; 0xff
 8003e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d114      	bne.n	8003e6c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d01a      	beq.n	8003e80 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	3310      	adds	r3, #16
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f001 f9c4 	bl	80051dc <xTaskRemoveFromEventList>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d012      	beq.n	8003e80 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003e5a:	4b0d      	ldr	r3, [pc, #52]	; (8003e90 <xQueueGenericReset+0xcc>)
 8003e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	f3bf 8f4f 	dsb	sy
 8003e66:	f3bf 8f6f 	isb	sy
 8003e6a:	e009      	b.n	8003e80 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	3310      	adds	r3, #16
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff fef2 	bl	8003c5a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	3324      	adds	r3, #36	; 0x24
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff feed 	bl	8003c5a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003e80:	f001 fdc2 	bl	8005a08 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003e84:	2301      	movs	r3, #1
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	e000ed04 	.word	0xe000ed04

08003e94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08e      	sub	sp, #56	; 0x38
 8003e98:	af02      	add	r7, sp, #8
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
 8003ea0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d109      	bne.n	8003ebc <xQueueGenericCreateStatic+0x28>
 8003ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eac:	f383 8811 	msr	BASEPRI, r3
 8003eb0:	f3bf 8f6f 	isb	sy
 8003eb4:	f3bf 8f4f 	dsb	sy
 8003eb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eba:	e7fe      	b.n	8003eba <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d109      	bne.n	8003ed6 <xQueueGenericCreateStatic+0x42>
 8003ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec6:	f383 8811 	msr	BASEPRI, r3
 8003eca:	f3bf 8f6f 	isb	sy
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ed4:	e7fe      	b.n	8003ed4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d002      	beq.n	8003ee2 <xQueueGenericCreateStatic+0x4e>
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <xQueueGenericCreateStatic+0x52>
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e000      	b.n	8003ee8 <xQueueGenericCreateStatic+0x54>
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d109      	bne.n	8003f00 <xQueueGenericCreateStatic+0x6c>
 8003eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef0:	f383 8811 	msr	BASEPRI, r3
 8003ef4:	f3bf 8f6f 	isb	sy
 8003ef8:	f3bf 8f4f 	dsb	sy
 8003efc:	623b      	str	r3, [r7, #32]
 8003efe:	e7fe      	b.n	8003efe <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d102      	bne.n	8003f0c <xQueueGenericCreateStatic+0x78>
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <xQueueGenericCreateStatic+0x7c>
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e000      	b.n	8003f12 <xQueueGenericCreateStatic+0x7e>
 8003f10:	2300      	movs	r3, #0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d109      	bne.n	8003f2a <xQueueGenericCreateStatic+0x96>
 8003f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1a:	f383 8811 	msr	BASEPRI, r3
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	61fb      	str	r3, [r7, #28]
 8003f28:	e7fe      	b.n	8003f28 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003f2a:	2348      	movs	r3, #72	; 0x48
 8003f2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2b48      	cmp	r3, #72	; 0x48
 8003f32:	d009      	beq.n	8003f48 <xQueueGenericCreateStatic+0xb4>
 8003f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f38:	f383 8811 	msr	BASEPRI, r3
 8003f3c:	f3bf 8f6f 	isb	sy
 8003f40:	f3bf 8f4f 	dsb	sy
 8003f44:	61bb      	str	r3, [r7, #24]
 8003f46:	e7fe      	b.n	8003f46 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003f48:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00d      	beq.n	8003f70 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f5c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	4613      	mov	r3, r2
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	68b9      	ldr	r1, [r7, #8]
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 f844 	bl	8003ff8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3730      	adds	r7, #48	; 0x30
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b08a      	sub	sp, #40	; 0x28
 8003f7e:	af02      	add	r7, sp, #8
 8003f80:	60f8      	str	r0, [r7, #12]
 8003f82:	60b9      	str	r1, [r7, #8]
 8003f84:	4613      	mov	r3, r2
 8003f86:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d109      	bne.n	8003fa2 <xQueueGenericCreate+0x28>
 8003f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f92:	f383 8811 	msr	BASEPRI, r3
 8003f96:	f3bf 8f6f 	isb	sy
 8003f9a:	f3bf 8f4f 	dsb	sy
 8003f9e:	613b      	str	r3, [r7, #16]
 8003fa0:	e7fe      	b.n	8003fa0 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d102      	bne.n	8003fae <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	61fb      	str	r3, [r7, #28]
 8003fac:	e004      	b.n	8003fb8 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	fb02 f303 	mul.w	r3, r2, r3
 8003fb6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	3348      	adds	r3, #72	; 0x48
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f001 fe0f 	bl	8005be0 <pvPortMalloc>
 8003fc2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d011      	beq.n	8003fee <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	3348      	adds	r3, #72	; 0x48
 8003fd2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003fdc:	79fa      	ldrb	r2, [r7, #7]
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	68b9      	ldr	r1, [r7, #8]
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 f805 	bl	8003ff8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003fee:	69bb      	ldr	r3, [r7, #24]
	}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3720      	adds	r7, #32
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d103      	bne.n	8004014 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	e002      	b.n	800401a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004026:	2101      	movs	r1, #1
 8004028:	69b8      	ldr	r0, [r7, #24]
 800402a:	f7ff fecb 	bl	8003dc4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800402e:	bf00      	nop
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004036:	b580      	push	{r7, lr}
 8004038:	b082      	sub	sp, #8
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00e      	beq.n	8004062 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004056:	2300      	movs	r3, #0
 8004058:	2200      	movs	r2, #0
 800405a:	2100      	movs	r1, #0
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f837 	bl	80040d0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004062:	bf00      	nop
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800406a:	b580      	push	{r7, lr}
 800406c:	b086      	sub	sp, #24
 800406e:	af00      	add	r7, sp, #0
 8004070:	4603      	mov	r3, r0
 8004072:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004074:	2301      	movs	r3, #1
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	2300      	movs	r3, #0
 800407a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800407c:	79fb      	ldrb	r3, [r7, #7]
 800407e:	461a      	mov	r2, r3
 8004080:	6939      	ldr	r1, [r7, #16]
 8004082:	6978      	ldr	r0, [r7, #20]
 8004084:	f7ff ff79 	bl	8003f7a <xQueueGenericCreate>
 8004088:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f7ff ffd3 	bl	8004036 <prvInitialiseMutex>

		return xNewQueue;
 8004090:	68fb      	ldr	r3, [r7, #12]
	}
 8004092:	4618      	mov	r0, r3
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800409a:	b580      	push	{r7, lr}
 800409c:	b088      	sub	sp, #32
 800409e:	af02      	add	r7, sp, #8
 80040a0:	4603      	mov	r3, r0
 80040a2:	6039      	str	r1, [r7, #0]
 80040a4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80040a6:	2301      	movs	r3, #1
 80040a8:	617b      	str	r3, [r7, #20]
 80040aa:	2300      	movs	r3, #0
 80040ac:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80040ae:	79fb      	ldrb	r3, [r7, #7]
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2200      	movs	r2, #0
 80040b6:	6939      	ldr	r1, [r7, #16]
 80040b8:	6978      	ldr	r0, [r7, #20]
 80040ba:	f7ff feeb 	bl	8003e94 <xQueueGenericCreateStatic>
 80040be:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f7ff ffb8 	bl	8004036 <prvInitialiseMutex>

		return xNewQueue;
 80040c6:	68fb      	ldr	r3, [r7, #12]
	}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3718      	adds	r7, #24
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b08e      	sub	sp, #56	; 0x38
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
 80040dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80040de:	2300      	movs	r3, #0
 80040e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80040e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d109      	bne.n	8004100 <xQueueGenericSend+0x30>
 80040ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f0:	f383 8811 	msr	BASEPRI, r3
 80040f4:	f3bf 8f6f 	isb	sy
 80040f8:	f3bf 8f4f 	dsb	sy
 80040fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80040fe:	e7fe      	b.n	80040fe <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d103      	bne.n	800410e <xQueueGenericSend+0x3e>
 8004106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <xQueueGenericSend+0x42>
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <xQueueGenericSend+0x44>
 8004112:	2300      	movs	r3, #0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d109      	bne.n	800412c <xQueueGenericSend+0x5c>
 8004118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411c:	f383 8811 	msr	BASEPRI, r3
 8004120:	f3bf 8f6f 	isb	sy
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	627b      	str	r3, [r7, #36]	; 0x24
 800412a:	e7fe      	b.n	800412a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2b02      	cmp	r3, #2
 8004130:	d103      	bne.n	800413a <xQueueGenericSend+0x6a>
 8004132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004136:	2b01      	cmp	r3, #1
 8004138:	d101      	bne.n	800413e <xQueueGenericSend+0x6e>
 800413a:	2301      	movs	r3, #1
 800413c:	e000      	b.n	8004140 <xQueueGenericSend+0x70>
 800413e:	2300      	movs	r3, #0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d109      	bne.n	8004158 <xQueueGenericSend+0x88>
 8004144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004148:	f383 8811 	msr	BASEPRI, r3
 800414c:	f3bf 8f6f 	isb	sy
 8004150:	f3bf 8f4f 	dsb	sy
 8004154:	623b      	str	r3, [r7, #32]
 8004156:	e7fe      	b.n	8004156 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004158:	f001 f9f6 	bl	8005548 <xTaskGetSchedulerState>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d102      	bne.n	8004168 <xQueueGenericSend+0x98>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <xQueueGenericSend+0x9c>
 8004168:	2301      	movs	r3, #1
 800416a:	e000      	b.n	800416e <xQueueGenericSend+0x9e>
 800416c:	2300      	movs	r3, #0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d109      	bne.n	8004186 <xQueueGenericSend+0xb6>
 8004172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004176:	f383 8811 	msr	BASEPRI, r3
 800417a:	f3bf 8f6f 	isb	sy
 800417e:	f3bf 8f4f 	dsb	sy
 8004182:	61fb      	str	r3, [r7, #28]
 8004184:	e7fe      	b.n	8004184 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004186:	f001 fc11 	bl	80059ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800418a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800418e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004192:	429a      	cmp	r2, r3
 8004194:	d302      	bcc.n	800419c <xQueueGenericSend+0xcc>
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2b02      	cmp	r3, #2
 800419a:	d129      	bne.n	80041f0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	68b9      	ldr	r1, [r7, #8]
 80041a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041a2:	f000 fa7c 	bl	800469e <prvCopyDataToQueue>
 80041a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d010      	beq.n	80041d2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b2:	3324      	adds	r3, #36	; 0x24
 80041b4:	4618      	mov	r0, r3
 80041b6:	f001 f811 	bl	80051dc <xTaskRemoveFromEventList>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d013      	beq.n	80041e8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80041c0:	4b3f      	ldr	r3, [pc, #252]	; (80042c0 <xQueueGenericSend+0x1f0>)
 80041c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	e00a      	b.n	80041e8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80041d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d007      	beq.n	80041e8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80041d8:	4b39      	ldr	r3, [pc, #228]	; (80042c0 <xQueueGenericSend+0x1f0>)
 80041da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80041e8:	f001 fc0e 	bl	8005a08 <vPortExitCritical>
				return pdPASS;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e063      	b.n	80042b8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d103      	bne.n	80041fe <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80041f6:	f001 fc07 	bl	8005a08 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80041fa:	2300      	movs	r3, #0
 80041fc:	e05c      	b.n	80042b8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004200:	2b00      	cmp	r3, #0
 8004202:	d106      	bne.n	8004212 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004204:	f107 0314 	add.w	r3, r7, #20
 8004208:	4618      	mov	r0, r3
 800420a:	f001 f849 	bl	80052a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800420e:	2301      	movs	r3, #1
 8004210:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004212:	f001 fbf9 	bl	8005a08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004216:	f000 fe01 	bl	8004e1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800421a:	f001 fbc7 	bl	80059ac <vPortEnterCritical>
 800421e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004220:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004224:	b25b      	sxtb	r3, r3
 8004226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422a:	d103      	bne.n	8004234 <xQueueGenericSend+0x164>
 800422c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422e:	2200      	movs	r2, #0
 8004230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004236:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800423a:	b25b      	sxtb	r3, r3
 800423c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004240:	d103      	bne.n	800424a <xQueueGenericSend+0x17a>
 8004242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800424a:	f001 fbdd 	bl	8005a08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800424e:	1d3a      	adds	r2, r7, #4
 8004250:	f107 0314 	add.w	r3, r7, #20
 8004254:	4611      	mov	r1, r2
 8004256:	4618      	mov	r0, r3
 8004258:	f001 f838 	bl	80052cc <xTaskCheckForTimeOut>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d124      	bne.n	80042ac <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004262:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004264:	f000 fb13 	bl	800488e <prvIsQueueFull>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d018      	beq.n	80042a0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800426e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004270:	3310      	adds	r3, #16
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	4611      	mov	r1, r2
 8004276:	4618      	mov	r0, r3
 8004278:	f000 ff8c 	bl	8005194 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800427c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800427e:	f000 fa9e 	bl	80047be <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004282:	f000 fdd9 	bl	8004e38 <xTaskResumeAll>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	f47f af7c 	bne.w	8004186 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800428e:	4b0c      	ldr	r3, [pc, #48]	; (80042c0 <xQueueGenericSend+0x1f0>)
 8004290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	f3bf 8f4f 	dsb	sy
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	e772      	b.n	8004186 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80042a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042a2:	f000 fa8c 	bl	80047be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042a6:	f000 fdc7 	bl	8004e38 <xTaskResumeAll>
 80042aa:	e76c      	b.n	8004186 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80042ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042ae:	f000 fa86 	bl	80047be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042b2:	f000 fdc1 	bl	8004e38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80042b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3738      	adds	r7, #56	; 0x38
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	e000ed04 	.word	0xe000ed04

080042c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b08e      	sub	sp, #56	; 0x38
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
 80042d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80042d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d109      	bne.n	80042f0 <xQueueGenericSendFromISR+0x2c>
 80042dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e0:	f383 8811 	msr	BASEPRI, r3
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	627b      	str	r3, [r7, #36]	; 0x24
 80042ee:	e7fe      	b.n	80042ee <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d103      	bne.n	80042fe <xQueueGenericSendFromISR+0x3a>
 80042f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <xQueueGenericSendFromISR+0x3e>
 80042fe:	2301      	movs	r3, #1
 8004300:	e000      	b.n	8004304 <xQueueGenericSendFromISR+0x40>
 8004302:	2300      	movs	r3, #0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d109      	bne.n	800431c <xQueueGenericSendFromISR+0x58>
 8004308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	623b      	str	r3, [r7, #32]
 800431a:	e7fe      	b.n	800431a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	2b02      	cmp	r3, #2
 8004320:	d103      	bne.n	800432a <xQueueGenericSendFromISR+0x66>
 8004322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004326:	2b01      	cmp	r3, #1
 8004328:	d101      	bne.n	800432e <xQueueGenericSendFromISR+0x6a>
 800432a:	2301      	movs	r3, #1
 800432c:	e000      	b.n	8004330 <xQueueGenericSendFromISR+0x6c>
 800432e:	2300      	movs	r3, #0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d109      	bne.n	8004348 <xQueueGenericSendFromISR+0x84>
 8004334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004338:	f383 8811 	msr	BASEPRI, r3
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	61fb      	str	r3, [r7, #28]
 8004346:	e7fe      	b.n	8004346 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004348:	f001 fc0c 	bl	8005b64 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800434c:	f3ef 8211 	mrs	r2, BASEPRI
 8004350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004354:	f383 8811 	msr	BASEPRI, r3
 8004358:	f3bf 8f6f 	isb	sy
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	61ba      	str	r2, [r7, #24]
 8004362:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004364:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004366:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800436c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004370:	429a      	cmp	r2, r3
 8004372:	d302      	bcc.n	800437a <xQueueGenericSendFromISR+0xb6>
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	2b02      	cmp	r3, #2
 8004378:	d12c      	bne.n	80043d4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800437a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004380:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	68b9      	ldr	r1, [r7, #8]
 8004388:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800438a:	f000 f988 	bl	800469e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800438e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004396:	d112      	bne.n	80043be <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	2b00      	cmp	r3, #0
 800439e:	d016      	beq.n	80043ce <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a2:	3324      	adds	r3, #36	; 0x24
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 ff19 	bl	80051dc <xTaskRemoveFromEventList>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00e      	beq.n	80043ce <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00b      	beq.n	80043ce <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	e007      	b.n	80043ce <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80043be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80043c2:	3301      	adds	r3, #1
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	b25a      	sxtb	r2, r3
 80043c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80043ce:	2301      	movs	r3, #1
 80043d0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80043d2:	e001      	b.n	80043d8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80043d4:	2300      	movs	r3, #0
 80043d6:	637b      	str	r3, [r7, #52]	; 0x34
 80043d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043da:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80043e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3738      	adds	r7, #56	; 0x38
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08c      	sub	sp, #48	; 0x30
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80043f8:	2300      	movs	r3, #0
 80043fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004402:	2b00      	cmp	r3, #0
 8004404:	d109      	bne.n	800441a <xQueueReceive+0x2e>
	__asm volatile
 8004406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440a:	f383 8811 	msr	BASEPRI, r3
 800440e:	f3bf 8f6f 	isb	sy
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	623b      	str	r3, [r7, #32]
 8004418:	e7fe      	b.n	8004418 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d103      	bne.n	8004428 <xQueueReceive+0x3c>
 8004420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <xQueueReceive+0x40>
 8004428:	2301      	movs	r3, #1
 800442a:	e000      	b.n	800442e <xQueueReceive+0x42>
 800442c:	2300      	movs	r3, #0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d109      	bne.n	8004446 <xQueueReceive+0x5a>
 8004432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004436:	f383 8811 	msr	BASEPRI, r3
 800443a:	f3bf 8f6f 	isb	sy
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	61fb      	str	r3, [r7, #28]
 8004444:	e7fe      	b.n	8004444 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004446:	f001 f87f 	bl	8005548 <xTaskGetSchedulerState>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d102      	bne.n	8004456 <xQueueReceive+0x6a>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <xQueueReceive+0x6e>
 8004456:	2301      	movs	r3, #1
 8004458:	e000      	b.n	800445c <xQueueReceive+0x70>
 800445a:	2300      	movs	r3, #0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d109      	bne.n	8004474 <xQueueReceive+0x88>
 8004460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004464:	f383 8811 	msr	BASEPRI, r3
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	61bb      	str	r3, [r7, #24]
 8004472:	e7fe      	b.n	8004472 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004474:	f001 fa9a 	bl	80059ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	2b00      	cmp	r3, #0
 8004482:	d01f      	beq.n	80044c4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004484:	68b9      	ldr	r1, [r7, #8]
 8004486:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004488:	f000 f973 	bl	8004772 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448e:	1e5a      	subs	r2, r3, #1
 8004490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004492:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00f      	beq.n	80044bc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800449c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449e:	3310      	adds	r3, #16
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 fe9b 	bl	80051dc <xTaskRemoveFromEventList>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d007      	beq.n	80044bc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80044ac:	4b3c      	ldr	r3, [pc, #240]	; (80045a0 <xQueueReceive+0x1b4>)
 80044ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	f3bf 8f4f 	dsb	sy
 80044b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80044bc:	f001 faa4 	bl	8005a08 <vPortExitCritical>
				return pdPASS;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e069      	b.n	8004598 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d103      	bne.n	80044d2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80044ca:	f001 fa9d 	bl	8005a08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80044ce:	2300      	movs	r3, #0
 80044d0:	e062      	b.n	8004598 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80044d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d106      	bne.n	80044e6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044d8:	f107 0310 	add.w	r3, r7, #16
 80044dc:	4618      	mov	r0, r3
 80044de:	f000 fedf 	bl	80052a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044e2:	2301      	movs	r3, #1
 80044e4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80044e6:	f001 fa8f 	bl	8005a08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044ea:	f000 fc97 	bl	8004e1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044ee:	f001 fa5d 	bl	80059ac <vPortEnterCritical>
 80044f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044f8:	b25b      	sxtb	r3, r3
 80044fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fe:	d103      	bne.n	8004508 <xQueueReceive+0x11c>
 8004500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800450e:	b25b      	sxtb	r3, r3
 8004510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004514:	d103      	bne.n	800451e <xQueueReceive+0x132>
 8004516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800451e:	f001 fa73 	bl	8005a08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004522:	1d3a      	adds	r2, r7, #4
 8004524:	f107 0310 	add.w	r3, r7, #16
 8004528:	4611      	mov	r1, r2
 800452a:	4618      	mov	r0, r3
 800452c:	f000 fece 	bl	80052cc <xTaskCheckForTimeOut>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d123      	bne.n	800457e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004538:	f000 f993 	bl	8004862 <prvIsQueueEmpty>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d017      	beq.n	8004572 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004544:	3324      	adds	r3, #36	; 0x24
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	4611      	mov	r1, r2
 800454a:	4618      	mov	r0, r3
 800454c:	f000 fe22 	bl	8005194 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004552:	f000 f934 	bl	80047be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004556:	f000 fc6f 	bl	8004e38 <xTaskResumeAll>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d189      	bne.n	8004474 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004560:	4b0f      	ldr	r3, [pc, #60]	; (80045a0 <xQueueReceive+0x1b4>)
 8004562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	e780      	b.n	8004474 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004572:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004574:	f000 f923 	bl	80047be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004578:	f000 fc5e 	bl	8004e38 <xTaskResumeAll>
 800457c:	e77a      	b.n	8004474 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800457e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004580:	f000 f91d 	bl	80047be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004584:	f000 fc58 	bl	8004e38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004588:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800458a:	f000 f96a 	bl	8004862 <prvIsQueueEmpty>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	f43f af6f 	beq.w	8004474 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004596:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004598:	4618      	mov	r0, r3
 800459a:	3730      	adds	r7, #48	; 0x30
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	e000ed04 	.word	0xe000ed04

080045a4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b08e      	sub	sp, #56	; 0x38
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80045b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d109      	bne.n	80045ce <xQueueReceiveFromISR+0x2a>
 80045ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045be:	f383 8811 	msr	BASEPRI, r3
 80045c2:	f3bf 8f6f 	isb	sy
 80045c6:	f3bf 8f4f 	dsb	sy
 80045ca:	623b      	str	r3, [r7, #32]
 80045cc:	e7fe      	b.n	80045cc <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d103      	bne.n	80045dc <xQueueReceiveFromISR+0x38>
 80045d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <xQueueReceiveFromISR+0x3c>
 80045dc:	2301      	movs	r3, #1
 80045de:	e000      	b.n	80045e2 <xQueueReceiveFromISR+0x3e>
 80045e0:	2300      	movs	r3, #0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d109      	bne.n	80045fa <xQueueReceiveFromISR+0x56>
 80045e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ea:	f383 8811 	msr	BASEPRI, r3
 80045ee:	f3bf 8f6f 	isb	sy
 80045f2:	f3bf 8f4f 	dsb	sy
 80045f6:	61fb      	str	r3, [r7, #28]
 80045f8:	e7fe      	b.n	80045f8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80045fa:	f001 fab3 	bl	8005b64 <vPortValidateInterruptPriority>
	__asm volatile
 80045fe:	f3ef 8211 	mrs	r2, BASEPRI
 8004602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004606:	f383 8811 	msr	BASEPRI, r3
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	61ba      	str	r2, [r7, #24]
 8004614:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004616:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004618:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800461a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004622:	2b00      	cmp	r3, #0
 8004624:	d02f      	beq.n	8004686 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004628:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800462c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004630:	68b9      	ldr	r1, [r7, #8]
 8004632:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004634:	f000 f89d 	bl	8004772 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463a:	1e5a      	subs	r2, r3, #1
 800463c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004640:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004648:	d112      	bne.n	8004670 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800464a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d016      	beq.n	8004680 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004654:	3310      	adds	r3, #16
 8004656:	4618      	mov	r0, r3
 8004658:	f000 fdc0 	bl	80051dc <xTaskRemoveFromEventList>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00e      	beq.n	8004680 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00b      	beq.n	8004680 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	e007      	b.n	8004680 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004674:	3301      	adds	r3, #1
 8004676:	b2db      	uxtb	r3, r3
 8004678:	b25a      	sxtb	r2, r3
 800467a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004680:	2301      	movs	r3, #1
 8004682:	637b      	str	r3, [r7, #52]	; 0x34
 8004684:	e001      	b.n	800468a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8004686:	2300      	movs	r3, #0
 8004688:	637b      	str	r3, [r7, #52]	; 0x34
 800468a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800468c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004696:	4618      	mov	r0, r3
 8004698:	3738      	adds	r7, #56	; 0x38
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b086      	sub	sp, #24
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	60f8      	str	r0, [r7, #12]
 80046a6:	60b9      	str	r1, [r7, #8]
 80046a8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80046aa:	2300      	movs	r3, #0
 80046ac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10d      	bne.n	80046d8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d14d      	bne.n	8004760 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f000 ff5b 	bl	8005584 <xTaskPriorityDisinherit>
 80046ce:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	609a      	str	r2, [r3, #8]
 80046d6:	e043      	b.n	8004760 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d119      	bne.n	8004712 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6858      	ldr	r0, [r3, #4]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	461a      	mov	r2, r3
 80046e8:	68b9      	ldr	r1, [r7, #8]
 80046ea:	f001 fd77 	bl	80061dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	441a      	add	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	429a      	cmp	r2, r3
 8004706:	d32b      	bcc.n	8004760 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	605a      	str	r2, [r3, #4]
 8004710:	e026      	b.n	8004760 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	68d8      	ldr	r0, [r3, #12]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	461a      	mov	r2, r3
 800471c:	68b9      	ldr	r1, [r7, #8]
 800471e:	f001 fd5d 	bl	80061dc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	425b      	negs	r3, r3
 800472c:	441a      	add	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	429a      	cmp	r2, r3
 800473c:	d207      	bcs.n	800474e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	689a      	ldr	r2, [r3, #8]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	425b      	negs	r3, r3
 8004748:	441a      	add	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2b02      	cmp	r3, #2
 8004752:	d105      	bne.n	8004760 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d002      	beq.n	8004760 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	3b01      	subs	r3, #1
 800475e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	1c5a      	adds	r2, r3, #1
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004768:	697b      	ldr	r3, [r7, #20]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3718      	adds	r7, #24
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b082      	sub	sp, #8
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
 800477a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	2b00      	cmp	r3, #0
 8004782:	d018      	beq.n	80047b6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68da      	ldr	r2, [r3, #12]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478c:	441a      	add	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68da      	ldr	r2, [r3, #12]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	429a      	cmp	r2, r3
 800479c:	d303      	bcc.n	80047a6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68d9      	ldr	r1, [r3, #12]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	461a      	mov	r2, r3
 80047b0:	6838      	ldr	r0, [r7, #0]
 80047b2:	f001 fd13 	bl	80061dc <memcpy>
	}
}
 80047b6:	bf00      	nop
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b084      	sub	sp, #16
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80047c6:	f001 f8f1 	bl	80059ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047d0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80047d2:	e011      	b.n	80047f8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d012      	beq.n	8004802 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3324      	adds	r3, #36	; 0x24
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 fcfb 	bl	80051dc <xTaskRemoveFromEventList>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d001      	beq.n	80047f0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80047ec:	f000 fdce 	bl	800538c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80047f0:	7bfb      	ldrb	r3, [r7, #15]
 80047f2:	3b01      	subs	r3, #1
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80047f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	dce9      	bgt.n	80047d4 <prvUnlockQueue+0x16>
 8004800:	e000      	b.n	8004804 <prvUnlockQueue+0x46>
					break;
 8004802:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	22ff      	movs	r2, #255	; 0xff
 8004808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800480c:	f001 f8fc 	bl	8005a08 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004810:	f001 f8cc 	bl	80059ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800481a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800481c:	e011      	b.n	8004842 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d012      	beq.n	800484c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	3310      	adds	r3, #16
 800482a:	4618      	mov	r0, r3
 800482c:	f000 fcd6 	bl	80051dc <xTaskRemoveFromEventList>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004836:	f000 fda9 	bl	800538c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800483a:	7bbb      	ldrb	r3, [r7, #14]
 800483c:	3b01      	subs	r3, #1
 800483e:	b2db      	uxtb	r3, r3
 8004840:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004842:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004846:	2b00      	cmp	r3, #0
 8004848:	dce9      	bgt.n	800481e <prvUnlockQueue+0x60>
 800484a:	e000      	b.n	800484e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800484c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	22ff      	movs	r2, #255	; 0xff
 8004852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004856:	f001 f8d7 	bl	8005a08 <vPortExitCritical>
}
 800485a:	bf00      	nop
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b084      	sub	sp, #16
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800486a:	f001 f89f 	bl	80059ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004872:	2b00      	cmp	r3, #0
 8004874:	d102      	bne.n	800487c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004876:	2301      	movs	r3, #1
 8004878:	60fb      	str	r3, [r7, #12]
 800487a:	e001      	b.n	8004880 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800487c:	2300      	movs	r3, #0
 800487e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004880:	f001 f8c2 	bl	8005a08 <vPortExitCritical>

	return xReturn;
 8004884:	68fb      	ldr	r3, [r7, #12]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b084      	sub	sp, #16
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004896:	f001 f889 	bl	80059ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d102      	bne.n	80048ac <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80048a6:	2301      	movs	r3, #1
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	e001      	b.n	80048b0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80048ac:	2300      	movs	r3, #0
 80048ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80048b0:	f001 f8aa 	bl	8005a08 <vPortExitCritical>

	return xReturn;
 80048b4:	68fb      	ldr	r3, [r7, #12]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b08e      	sub	sp, #56	; 0x38
 80048c2:	af04      	add	r7, sp, #16
 80048c4:	60f8      	str	r0, [r7, #12]
 80048c6:	60b9      	str	r1, [r7, #8]
 80048c8:	607a      	str	r2, [r7, #4]
 80048ca:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80048cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d109      	bne.n	80048e6 <xTaskCreateStatic+0x28>
	__asm volatile
 80048d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	623b      	str	r3, [r7, #32]
 80048e4:	e7fe      	b.n	80048e4 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80048e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d109      	bne.n	8004900 <xTaskCreateStatic+0x42>
 80048ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f0:	f383 8811 	msr	BASEPRI, r3
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	61fb      	str	r3, [r7, #28]
 80048fe:	e7fe      	b.n	80048fe <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004900:	2354      	movs	r3, #84	; 0x54
 8004902:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	2b54      	cmp	r3, #84	; 0x54
 8004908:	d009      	beq.n	800491e <xTaskCreateStatic+0x60>
 800490a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490e:	f383 8811 	msr	BASEPRI, r3
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	61bb      	str	r3, [r7, #24]
 800491c:	e7fe      	b.n	800491c <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800491e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004922:	2b00      	cmp	r3, #0
 8004924:	d01e      	beq.n	8004964 <xTaskCreateStatic+0xa6>
 8004926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004928:	2b00      	cmp	r3, #0
 800492a:	d01b      	beq.n	8004964 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800492c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004934:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	2202      	movs	r2, #2
 800493a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800493e:	2300      	movs	r3, #0
 8004940:	9303      	str	r3, [sp, #12]
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	9302      	str	r3, [sp, #8]
 8004946:	f107 0314 	add.w	r3, r7, #20
 800494a:	9301      	str	r3, [sp, #4]
 800494c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	68b9      	ldr	r1, [r7, #8]
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f000 f850 	bl	80049fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800495c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800495e:	f000 f8d3 	bl	8004b08 <prvAddNewTaskToReadyList>
 8004962:	e001      	b.n	8004968 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004964:	2300      	movs	r3, #0
 8004966:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004968:	697b      	ldr	r3, [r7, #20]
	}
 800496a:	4618      	mov	r0, r3
 800496c:	3728      	adds	r7, #40	; 0x28
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004972:	b580      	push	{r7, lr}
 8004974:	b08c      	sub	sp, #48	; 0x30
 8004976:	af04      	add	r7, sp, #16
 8004978:	60f8      	str	r0, [r7, #12]
 800497a:	60b9      	str	r1, [r7, #8]
 800497c:	603b      	str	r3, [r7, #0]
 800497e:	4613      	mov	r3, r2
 8004980:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004982:	88fb      	ldrh	r3, [r7, #6]
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4618      	mov	r0, r3
 8004988:	f001 f92a 	bl	8005be0 <pvPortMalloc>
 800498c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00e      	beq.n	80049b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004994:	2054      	movs	r0, #84	; 0x54
 8004996:	f001 f923 	bl	8005be0 <pvPortMalloc>
 800499a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	631a      	str	r2, [r3, #48]	; 0x30
 80049a8:	e005      	b.n	80049b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80049aa:	6978      	ldr	r0, [r7, #20]
 80049ac:	f001 f9da 	bl	8005d64 <vPortFree>
 80049b0:	e001      	b.n	80049b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80049b2:	2300      	movs	r3, #0
 80049b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d017      	beq.n	80049ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80049c4:	88fa      	ldrh	r2, [r7, #6]
 80049c6:	2300      	movs	r3, #0
 80049c8:	9303      	str	r3, [sp, #12]
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	9302      	str	r3, [sp, #8]
 80049ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d0:	9301      	str	r3, [sp, #4]
 80049d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	68b9      	ldr	r1, [r7, #8]
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 f80e 	bl	80049fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049e0:	69f8      	ldr	r0, [r7, #28]
 80049e2:	f000 f891 	bl	8004b08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80049e6:	2301      	movs	r3, #1
 80049e8:	61bb      	str	r3, [r7, #24]
 80049ea:	e002      	b.n	80049f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80049ec:	f04f 33ff 	mov.w	r3, #4294967295
 80049f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80049f2:	69bb      	ldr	r3, [r7, #24]
	}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3720      	adds	r7, #32
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b088      	sub	sp, #32
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
 8004a08:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a14:	3b01      	subs	r3, #1
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	f023 0307 	bic.w	r3, r3, #7
 8004a22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d009      	beq.n	8004a42 <prvInitialiseNewTask+0x46>
 8004a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a32:	f383 8811 	msr	BASEPRI, r3
 8004a36:	f3bf 8f6f 	isb	sy
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	e7fe      	b.n	8004a40 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d01f      	beq.n	8004a88 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a48:	2300      	movs	r3, #0
 8004a4a:	61fb      	str	r3, [r7, #28]
 8004a4c:	e012      	b.n	8004a74 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	4413      	add	r3, r2
 8004a54:	7819      	ldrb	r1, [r3, #0]
 8004a56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	3334      	adds	r3, #52	; 0x34
 8004a5e:	460a      	mov	r2, r1
 8004a60:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	4413      	add	r3, r2
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d006      	beq.n	8004a7c <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	3301      	adds	r3, #1
 8004a72:	61fb      	str	r3, [r7, #28]
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	2b0f      	cmp	r3, #15
 8004a78:	d9e9      	bls.n	8004a4e <prvInitialiseNewTask+0x52>
 8004a7a:	e000      	b.n	8004a7e <prvInitialiseNewTask+0x82>
			{
				break;
 8004a7c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a86:	e003      	b.n	8004a90 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a92:	2b06      	cmp	r3, #6
 8004a94:	d901      	bls.n	8004a9a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a96:	2306      	movs	r3, #6
 8004a98:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a9e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004aa4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aae:	3304      	adds	r3, #4
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff f8f2 	bl	8003c9a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab8:	3318      	adds	r3, #24
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff f8ed 	bl	8003c9a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ac4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac8:	f1c3 0207 	rsb	r2, r3, #7
 8004acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ace:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ad4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad8:	2200      	movs	r2, #0
 8004ada:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	68f9      	ldr	r1, [r7, #12]
 8004ae8:	69b8      	ldr	r0, [r7, #24]
 8004aea:	f000 fe35 	bl	8005758 <pxPortInitialiseStack>
 8004aee:	4602      	mov	r2, r0
 8004af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d002      	beq.n	8004b00 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004afe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b00:	bf00      	nop
 8004b02:	3720      	adds	r7, #32
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b10:	f000 ff4c 	bl	80059ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b14:	4b2a      	ldr	r3, [pc, #168]	; (8004bc0 <prvAddNewTaskToReadyList+0xb8>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	4a29      	ldr	r2, [pc, #164]	; (8004bc0 <prvAddNewTaskToReadyList+0xb8>)
 8004b1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004b1e:	4b29      	ldr	r3, [pc, #164]	; (8004bc4 <prvAddNewTaskToReadyList+0xbc>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d109      	bne.n	8004b3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b26:	4a27      	ldr	r2, [pc, #156]	; (8004bc4 <prvAddNewTaskToReadyList+0xbc>)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b2c:	4b24      	ldr	r3, [pc, #144]	; (8004bc0 <prvAddNewTaskToReadyList+0xb8>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d110      	bne.n	8004b56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004b34:	f000 fc4e 	bl	80053d4 <prvInitialiseTaskLists>
 8004b38:	e00d      	b.n	8004b56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004b3a:	4b23      	ldr	r3, [pc, #140]	; (8004bc8 <prvAddNewTaskToReadyList+0xc0>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d109      	bne.n	8004b56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b42:	4b20      	ldr	r3, [pc, #128]	; (8004bc4 <prvAddNewTaskToReadyList+0xbc>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d802      	bhi.n	8004b56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b50:	4a1c      	ldr	r2, [pc, #112]	; (8004bc4 <prvAddNewTaskToReadyList+0xbc>)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b56:	4b1d      	ldr	r3, [pc, #116]	; (8004bcc <prvAddNewTaskToReadyList+0xc4>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	4a1b      	ldr	r2, [pc, #108]	; (8004bcc <prvAddNewTaskToReadyList+0xc4>)
 8004b5e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b64:	2201      	movs	r2, #1
 8004b66:	409a      	lsls	r2, r3
 8004b68:	4b19      	ldr	r3, [pc, #100]	; (8004bd0 <prvAddNewTaskToReadyList+0xc8>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	4a18      	ldr	r2, [pc, #96]	; (8004bd0 <prvAddNewTaskToReadyList+0xc8>)
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b76:	4613      	mov	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4a15      	ldr	r2, [pc, #84]	; (8004bd4 <prvAddNewTaskToReadyList+0xcc>)
 8004b80:	441a      	add	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	3304      	adds	r3, #4
 8004b86:	4619      	mov	r1, r3
 8004b88:	4610      	mov	r0, r2
 8004b8a:	f7ff f893 	bl	8003cb4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004b8e:	f000 ff3b 	bl	8005a08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004b92:	4b0d      	ldr	r3, [pc, #52]	; (8004bc8 <prvAddNewTaskToReadyList+0xc0>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00e      	beq.n	8004bb8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b9a:	4b0a      	ldr	r3, [pc, #40]	; (8004bc4 <prvAddNewTaskToReadyList+0xbc>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d207      	bcs.n	8004bb8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ba8:	4b0b      	ldr	r3, [pc, #44]	; (8004bd8 <prvAddNewTaskToReadyList+0xd0>)
 8004baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bb8:	bf00      	nop
 8004bba:	3708      	adds	r7, #8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	20000380 	.word	0x20000380
 8004bc4:	20000280 	.word	0x20000280
 8004bc8:	2000038c 	.word	0x2000038c
 8004bcc:	2000039c 	.word	0x2000039c
 8004bd0:	20000388 	.word	0x20000388
 8004bd4:	20000284 	.word	0x20000284
 8004bd8:	e000ed04 	.word	0xe000ed04

08004bdc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004be4:	f000 fee2 	bl	80059ac <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d102      	bne.n	8004bf4 <vTaskDelete+0x18>
 8004bee:	4b38      	ldr	r3, [pc, #224]	; (8004cd0 <vTaskDelete+0xf4>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	e000      	b.n	8004bf6 <vTaskDelete+0x1a>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff f8b6 	bl	8003d6e <uxListRemove>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d115      	bne.n	8004c34 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c0c:	4931      	ldr	r1, [pc, #196]	; (8004cd4 <vTaskDelete+0xf8>)
 8004c0e:	4613      	mov	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4413      	add	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	440b      	add	r3, r1
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10a      	bne.n	8004c34 <vTaskDelete+0x58>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c22:	2201      	movs	r2, #1
 8004c24:	fa02 f303 	lsl.w	r3, r2, r3
 8004c28:	43da      	mvns	r2, r3
 8004c2a:	4b2b      	ldr	r3, [pc, #172]	; (8004cd8 <vTaskDelete+0xfc>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	4a29      	ldr	r2, [pc, #164]	; (8004cd8 <vTaskDelete+0xfc>)
 8004c32:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d004      	beq.n	8004c46 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	3318      	adds	r3, #24
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7ff f894 	bl	8003d6e <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8004c46:	4b25      	ldr	r3, [pc, #148]	; (8004cdc <vTaskDelete+0x100>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	4a23      	ldr	r2, [pc, #140]	; (8004cdc <vTaskDelete+0x100>)
 8004c4e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8004c50:	4b1f      	ldr	r3, [pc, #124]	; (8004cd0 <vTaskDelete+0xf4>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d10b      	bne.n	8004c72 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	3304      	adds	r3, #4
 8004c5e:	4619      	mov	r1, r3
 8004c60:	481f      	ldr	r0, [pc, #124]	; (8004ce0 <vTaskDelete+0x104>)
 8004c62:	f7ff f827 	bl	8003cb4 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8004c66:	4b1f      	ldr	r3, [pc, #124]	; (8004ce4 <vTaskDelete+0x108>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	4a1d      	ldr	r2, [pc, #116]	; (8004ce4 <vTaskDelete+0x108>)
 8004c6e:	6013      	str	r3, [r2, #0]
 8004c70:	e009      	b.n	8004c86 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8004c72:	4b1d      	ldr	r3, [pc, #116]	; (8004ce8 <vTaskDelete+0x10c>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	4a1b      	ldr	r2, [pc, #108]	; (8004ce8 <vTaskDelete+0x10c>)
 8004c7a:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 fc15 	bl	80054ac <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8004c82:	f000 fc41 	bl	8005508 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8004c86:	f000 febf 	bl	8005a08 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8004c8a:	4b18      	ldr	r3, [pc, #96]	; (8004cec <vTaskDelete+0x110>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d01a      	beq.n	8004cc8 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 8004c92:	4b0f      	ldr	r3, [pc, #60]	; (8004cd0 <vTaskDelete+0xf4>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d115      	bne.n	8004cc8 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8004c9c:	4b14      	ldr	r3, [pc, #80]	; (8004cf0 <vTaskDelete+0x114>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d009      	beq.n	8004cb8 <vTaskDelete+0xdc>
 8004ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca8:	f383 8811 	msr	BASEPRI, r3
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	60bb      	str	r3, [r7, #8]
 8004cb6:	e7fe      	b.n	8004cb6 <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 8004cb8:	4b0e      	ldr	r3, [pc, #56]	; (8004cf4 <vTaskDelete+0x118>)
 8004cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	f3bf 8f4f 	dsb	sy
 8004cc4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004cc8:	bf00      	nop
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	20000280 	.word	0x20000280
 8004cd4:	20000284 	.word	0x20000284
 8004cd8:	20000388 	.word	0x20000388
 8004cdc:	2000039c 	.word	0x2000039c
 8004ce0:	20000354 	.word	0x20000354
 8004ce4:	20000368 	.word	0x20000368
 8004ce8:	20000380 	.word	0x20000380
 8004cec:	2000038c 	.word	0x2000038c
 8004cf0:	200003a8 	.word	0x200003a8
 8004cf4:	e000ed04 	.word	0xe000ed04

08004cf8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d00:	2300      	movs	r3, #0
 8004d02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d016      	beq.n	8004d38 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d0a:	4b13      	ldr	r3, [pc, #76]	; (8004d58 <vTaskDelay+0x60>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d009      	beq.n	8004d26 <vTaskDelay+0x2e>
 8004d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	60bb      	str	r3, [r7, #8]
 8004d24:	e7fe      	b.n	8004d24 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004d26:	f000 f879 	bl	8004e1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 fcad 	bl	800568c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d32:	f000 f881 	bl	8004e38 <xTaskResumeAll>
 8004d36:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d107      	bne.n	8004d4e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004d3e:	4b07      	ldr	r3, [pc, #28]	; (8004d5c <vTaskDelay+0x64>)
 8004d40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d44:	601a      	str	r2, [r3, #0]
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d4e:	bf00      	nop
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	200003a8 	.word	0x200003a8
 8004d5c:	e000ed04 	.word	0xe000ed04

08004d60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b08a      	sub	sp, #40	; 0x28
 8004d64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004d66:	2300      	movs	r3, #0
 8004d68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004d6e:	463a      	mov	r2, r7
 8004d70:	1d39      	adds	r1, r7, #4
 8004d72:	f107 0308 	add.w	r3, r7, #8
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fb fbaa 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004d7c:	6839      	ldr	r1, [r7, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	9202      	str	r2, [sp, #8]
 8004d84:	9301      	str	r3, [sp, #4]
 8004d86:	2300      	movs	r3, #0
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	460a      	mov	r2, r1
 8004d8e:	491d      	ldr	r1, [pc, #116]	; (8004e04 <vTaskStartScheduler+0xa4>)
 8004d90:	481d      	ldr	r0, [pc, #116]	; (8004e08 <vTaskStartScheduler+0xa8>)
 8004d92:	f7ff fd94 	bl	80048be <xTaskCreateStatic>
 8004d96:	4602      	mov	r2, r0
 8004d98:	4b1c      	ldr	r3, [pc, #112]	; (8004e0c <vTaskStartScheduler+0xac>)
 8004d9a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004d9c:	4b1b      	ldr	r3, [pc, #108]	; (8004e0c <vTaskStartScheduler+0xac>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d002      	beq.n	8004daa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004da4:	2301      	movs	r3, #1
 8004da6:	617b      	str	r3, [r7, #20]
 8004da8:	e001      	b.n	8004dae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004daa:	2300      	movs	r3, #0
 8004dac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d115      	bne.n	8004de0 <vTaskStartScheduler+0x80>
 8004db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db8:	f383 8811 	msr	BASEPRI, r3
 8004dbc:	f3bf 8f6f 	isb	sy
 8004dc0:	f3bf 8f4f 	dsb	sy
 8004dc4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004dc6:	4b12      	ldr	r3, [pc, #72]	; (8004e10 <vTaskStartScheduler+0xb0>)
 8004dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8004dcc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004dce:	4b11      	ldr	r3, [pc, #68]	; (8004e14 <vTaskStartScheduler+0xb4>)
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004dd4:	4b10      	ldr	r3, [pc, #64]	; (8004e18 <vTaskStartScheduler+0xb8>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004dda:	f000 fd49 	bl	8005870 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004dde:	e00d      	b.n	8004dfc <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de6:	d109      	bne.n	8004dfc <vTaskStartScheduler+0x9c>
 8004de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dec:	f383 8811 	msr	BASEPRI, r3
 8004df0:	f3bf 8f6f 	isb	sy
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	60fb      	str	r3, [r7, #12]
 8004dfa:	e7fe      	b.n	8004dfa <vTaskStartScheduler+0x9a>
}
 8004dfc:	bf00      	nop
 8004dfe:	3718      	adds	r7, #24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	08006244 	.word	0x08006244
 8004e08:	080053a5 	.word	0x080053a5
 8004e0c:	200003a4 	.word	0x200003a4
 8004e10:	200003a0 	.word	0x200003a0
 8004e14:	2000038c 	.word	0x2000038c
 8004e18:	20000384 	.word	0x20000384

08004e1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004e20:	4b04      	ldr	r3, [pc, #16]	; (8004e34 <vTaskSuspendAll+0x18>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	3301      	adds	r3, #1
 8004e26:	4a03      	ldr	r2, [pc, #12]	; (8004e34 <vTaskSuspendAll+0x18>)
 8004e28:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004e2a:	bf00      	nop
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	200003a8 	.word	0x200003a8

08004e38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004e42:	2300      	movs	r3, #0
 8004e44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004e46:	4b41      	ldr	r3, [pc, #260]	; (8004f4c <xTaskResumeAll+0x114>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d109      	bne.n	8004e62 <xTaskResumeAll+0x2a>
 8004e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e52:	f383 8811 	msr	BASEPRI, r3
 8004e56:	f3bf 8f6f 	isb	sy
 8004e5a:	f3bf 8f4f 	dsb	sy
 8004e5e:	603b      	str	r3, [r7, #0]
 8004e60:	e7fe      	b.n	8004e60 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004e62:	f000 fda3 	bl	80059ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004e66:	4b39      	ldr	r3, [pc, #228]	; (8004f4c <xTaskResumeAll+0x114>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	4a37      	ldr	r2, [pc, #220]	; (8004f4c <xTaskResumeAll+0x114>)
 8004e6e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e70:	4b36      	ldr	r3, [pc, #216]	; (8004f4c <xTaskResumeAll+0x114>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d161      	bne.n	8004f3c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004e78:	4b35      	ldr	r3, [pc, #212]	; (8004f50 <xTaskResumeAll+0x118>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d05d      	beq.n	8004f3c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e80:	e02e      	b.n	8004ee0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e82:	4b34      	ldr	r3, [pc, #208]	; (8004f54 <xTaskResumeAll+0x11c>)
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	3318      	adds	r3, #24
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7fe ff6d 	bl	8003d6e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	3304      	adds	r3, #4
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7fe ff68 	bl	8003d6e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	409a      	lsls	r2, r3
 8004ea6:	4b2c      	ldr	r3, [pc, #176]	; (8004f58 <xTaskResumeAll+0x120>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	4a2a      	ldr	r2, [pc, #168]	; (8004f58 <xTaskResumeAll+0x120>)
 8004eae:	6013      	str	r3, [r2, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4a27      	ldr	r2, [pc, #156]	; (8004f5c <xTaskResumeAll+0x124>)
 8004ebe:	441a      	add	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	3304      	adds	r3, #4
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	4610      	mov	r0, r2
 8004ec8:	f7fe fef4 	bl	8003cb4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed0:	4b23      	ldr	r3, [pc, #140]	; (8004f60 <xTaskResumeAll+0x128>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d302      	bcc.n	8004ee0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004eda:	4b22      	ldr	r3, [pc, #136]	; (8004f64 <xTaskResumeAll+0x12c>)
 8004edc:	2201      	movs	r2, #1
 8004ede:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ee0:	4b1c      	ldr	r3, [pc, #112]	; (8004f54 <xTaskResumeAll+0x11c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1cc      	bne.n	8004e82 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004eee:	f000 fb0b 	bl	8005508 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004ef2:	4b1d      	ldr	r3, [pc, #116]	; (8004f68 <xTaskResumeAll+0x130>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d010      	beq.n	8004f20 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004efe:	f000 f837 	bl	8004f70 <xTaskIncrementTick>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d002      	beq.n	8004f0e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004f08:	4b16      	ldr	r3, [pc, #88]	; (8004f64 <xTaskResumeAll+0x12c>)
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	3b01      	subs	r3, #1
 8004f12:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1f1      	bne.n	8004efe <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004f1a:	4b13      	ldr	r3, [pc, #76]	; (8004f68 <xTaskResumeAll+0x130>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f20:	4b10      	ldr	r3, [pc, #64]	; (8004f64 <xTaskResumeAll+0x12c>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d009      	beq.n	8004f3c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f2c:	4b0f      	ldr	r3, [pc, #60]	; (8004f6c <xTaskResumeAll+0x134>)
 8004f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	f3bf 8f4f 	dsb	sy
 8004f38:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f3c:	f000 fd64 	bl	8005a08 <vPortExitCritical>

	return xAlreadyYielded;
 8004f40:	68bb      	ldr	r3, [r7, #8]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	200003a8 	.word	0x200003a8
 8004f50:	20000380 	.word	0x20000380
 8004f54:	20000340 	.word	0x20000340
 8004f58:	20000388 	.word	0x20000388
 8004f5c:	20000284 	.word	0x20000284
 8004f60:	20000280 	.word	0x20000280
 8004f64:	20000394 	.word	0x20000394
 8004f68:	20000390 	.word	0x20000390
 8004f6c:	e000ed04 	.word	0xe000ed04

08004f70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004f76:	2300      	movs	r3, #0
 8004f78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f7a:	4b4e      	ldr	r3, [pc, #312]	; (80050b4 <xTaskIncrementTick+0x144>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f040 8087 	bne.w	8005092 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004f84:	4b4c      	ldr	r3, [pc, #304]	; (80050b8 <xTaskIncrementTick+0x148>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004f8c:	4a4a      	ldr	r2, [pc, #296]	; (80050b8 <xTaskIncrementTick+0x148>)
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d11f      	bne.n	8004fd8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004f98:	4b48      	ldr	r3, [pc, #288]	; (80050bc <xTaskIncrementTick+0x14c>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d009      	beq.n	8004fb6 <xTaskIncrementTick+0x46>
 8004fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa6:	f383 8811 	msr	BASEPRI, r3
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	603b      	str	r3, [r7, #0]
 8004fb4:	e7fe      	b.n	8004fb4 <xTaskIncrementTick+0x44>
 8004fb6:	4b41      	ldr	r3, [pc, #260]	; (80050bc <xTaskIncrementTick+0x14c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	4b40      	ldr	r3, [pc, #256]	; (80050c0 <xTaskIncrementTick+0x150>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a3e      	ldr	r2, [pc, #248]	; (80050bc <xTaskIncrementTick+0x14c>)
 8004fc2:	6013      	str	r3, [r2, #0]
 8004fc4:	4a3e      	ldr	r2, [pc, #248]	; (80050c0 <xTaskIncrementTick+0x150>)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6013      	str	r3, [r2, #0]
 8004fca:	4b3e      	ldr	r3, [pc, #248]	; (80050c4 <xTaskIncrementTick+0x154>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	4a3c      	ldr	r2, [pc, #240]	; (80050c4 <xTaskIncrementTick+0x154>)
 8004fd2:	6013      	str	r3, [r2, #0]
 8004fd4:	f000 fa98 	bl	8005508 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004fd8:	4b3b      	ldr	r3, [pc, #236]	; (80050c8 <xTaskIncrementTick+0x158>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d348      	bcc.n	8005074 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fe2:	4b36      	ldr	r3, [pc, #216]	; (80050bc <xTaskIncrementTick+0x14c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d104      	bne.n	8004ff6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fec:	4b36      	ldr	r3, [pc, #216]	; (80050c8 <xTaskIncrementTick+0x158>)
 8004fee:	f04f 32ff 	mov.w	r2, #4294967295
 8004ff2:	601a      	str	r2, [r3, #0]
					break;
 8004ff4:	e03e      	b.n	8005074 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ff6:	4b31      	ldr	r3, [pc, #196]	; (80050bc <xTaskIncrementTick+0x14c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	429a      	cmp	r2, r3
 800500c:	d203      	bcs.n	8005016 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800500e:	4a2e      	ldr	r2, [pc, #184]	; (80050c8 <xTaskIncrementTick+0x158>)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005014:	e02e      	b.n	8005074 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	3304      	adds	r3, #4
 800501a:	4618      	mov	r0, r3
 800501c:	f7fe fea7 	bl	8003d6e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005024:	2b00      	cmp	r3, #0
 8005026:	d004      	beq.n	8005032 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	3318      	adds	r3, #24
 800502c:	4618      	mov	r0, r3
 800502e:	f7fe fe9e 	bl	8003d6e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005036:	2201      	movs	r2, #1
 8005038:	409a      	lsls	r2, r3
 800503a:	4b24      	ldr	r3, [pc, #144]	; (80050cc <xTaskIncrementTick+0x15c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4313      	orrs	r3, r2
 8005040:	4a22      	ldr	r2, [pc, #136]	; (80050cc <xTaskIncrementTick+0x15c>)
 8005042:	6013      	str	r3, [r2, #0]
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4a1f      	ldr	r2, [pc, #124]	; (80050d0 <xTaskIncrementTick+0x160>)
 8005052:	441a      	add	r2, r3
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	3304      	adds	r3, #4
 8005058:	4619      	mov	r1, r3
 800505a:	4610      	mov	r0, r2
 800505c:	f7fe fe2a 	bl	8003cb4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005064:	4b1b      	ldr	r3, [pc, #108]	; (80050d4 <xTaskIncrementTick+0x164>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506a:	429a      	cmp	r2, r3
 800506c:	d3b9      	bcc.n	8004fe2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800506e:	2301      	movs	r3, #1
 8005070:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005072:	e7b6      	b.n	8004fe2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005074:	4b17      	ldr	r3, [pc, #92]	; (80050d4 <xTaskIncrementTick+0x164>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800507a:	4915      	ldr	r1, [pc, #84]	; (80050d0 <xTaskIncrementTick+0x160>)
 800507c:	4613      	mov	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	440b      	add	r3, r1
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d907      	bls.n	800509c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800508c:	2301      	movs	r3, #1
 800508e:	617b      	str	r3, [r7, #20]
 8005090:	e004      	b.n	800509c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005092:	4b11      	ldr	r3, [pc, #68]	; (80050d8 <xTaskIncrementTick+0x168>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	3301      	adds	r3, #1
 8005098:	4a0f      	ldr	r2, [pc, #60]	; (80050d8 <xTaskIncrementTick+0x168>)
 800509a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800509c:	4b0f      	ldr	r3, [pc, #60]	; (80050dc <xTaskIncrementTick+0x16c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80050a4:	2301      	movs	r3, #1
 80050a6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80050a8:	697b      	ldr	r3, [r7, #20]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	200003a8 	.word	0x200003a8
 80050b8:	20000384 	.word	0x20000384
 80050bc:	20000338 	.word	0x20000338
 80050c0:	2000033c 	.word	0x2000033c
 80050c4:	20000398 	.word	0x20000398
 80050c8:	200003a0 	.word	0x200003a0
 80050cc:	20000388 	.word	0x20000388
 80050d0:	20000284 	.word	0x20000284
 80050d4:	20000280 	.word	0x20000280
 80050d8:	20000390 	.word	0x20000390
 80050dc:	20000394 	.word	0x20000394

080050e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80050e0:	b480      	push	{r7}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80050e6:	4b26      	ldr	r3, [pc, #152]	; (8005180 <vTaskSwitchContext+0xa0>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80050ee:	4b25      	ldr	r3, [pc, #148]	; (8005184 <vTaskSwitchContext+0xa4>)
 80050f0:	2201      	movs	r2, #1
 80050f2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80050f4:	e03e      	b.n	8005174 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80050f6:	4b23      	ldr	r3, [pc, #140]	; (8005184 <vTaskSwitchContext+0xa4>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050fc:	4b22      	ldr	r3, [pc, #136]	; (8005188 <vTaskSwitchContext+0xa8>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	fab3 f383 	clz	r3, r3
 8005108:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800510a:	7afb      	ldrb	r3, [r7, #11]
 800510c:	f1c3 031f 	rsb	r3, r3, #31
 8005110:	617b      	str	r3, [r7, #20]
 8005112:	491e      	ldr	r1, [pc, #120]	; (800518c <vTaskSwitchContext+0xac>)
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	4613      	mov	r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4413      	add	r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	440b      	add	r3, r1
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d109      	bne.n	800513a <vTaskSwitchContext+0x5a>
	__asm volatile
 8005126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512a:	f383 8811 	msr	BASEPRI, r3
 800512e:	f3bf 8f6f 	isb	sy
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	607b      	str	r3, [r7, #4]
 8005138:	e7fe      	b.n	8005138 <vTaskSwitchContext+0x58>
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	4613      	mov	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4a11      	ldr	r2, [pc, #68]	; (800518c <vTaskSwitchContext+0xac>)
 8005146:	4413      	add	r3, r2
 8005148:	613b      	str	r3, [r7, #16]
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	685a      	ldr	r2, [r3, #4]
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	605a      	str	r2, [r3, #4]
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	3308      	adds	r3, #8
 800515c:	429a      	cmp	r2, r3
 800515e:	d104      	bne.n	800516a <vTaskSwitchContext+0x8a>
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	605a      	str	r2, [r3, #4]
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	4a07      	ldr	r2, [pc, #28]	; (8005190 <vTaskSwitchContext+0xb0>)
 8005172:	6013      	str	r3, [r2, #0]
}
 8005174:	bf00      	nop
 8005176:	371c      	adds	r7, #28
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	200003a8 	.word	0x200003a8
 8005184:	20000394 	.word	0x20000394
 8005188:	20000388 	.word	0x20000388
 800518c:	20000284 	.word	0x20000284
 8005190:	20000280 	.word	0x20000280

08005194 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d109      	bne.n	80051b8 <vTaskPlaceOnEventList+0x24>
 80051a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	60fb      	str	r3, [r7, #12]
 80051b6:	e7fe      	b.n	80051b6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051b8:	4b07      	ldr	r3, [pc, #28]	; (80051d8 <vTaskPlaceOnEventList+0x44>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	3318      	adds	r3, #24
 80051be:	4619      	mov	r1, r3
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f7fe fd9b 	bl	8003cfc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80051c6:	2101      	movs	r1, #1
 80051c8:	6838      	ldr	r0, [r7, #0]
 80051ca:	f000 fa5f 	bl	800568c <prvAddCurrentTaskToDelayedList>
}
 80051ce:	bf00      	nop
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	20000280 	.word	0x20000280

080051dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d109      	bne.n	8005206 <xTaskRemoveFromEventList+0x2a>
 80051f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f6:	f383 8811 	msr	BASEPRI, r3
 80051fa:	f3bf 8f6f 	isb	sy
 80051fe:	f3bf 8f4f 	dsb	sy
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	e7fe      	b.n	8005204 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	3318      	adds	r3, #24
 800520a:	4618      	mov	r0, r3
 800520c:	f7fe fdaf 	bl	8003d6e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005210:	4b1d      	ldr	r3, [pc, #116]	; (8005288 <xTaskRemoveFromEventList+0xac>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d11c      	bne.n	8005252 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	3304      	adds	r3, #4
 800521c:	4618      	mov	r0, r3
 800521e:	f7fe fda6 	bl	8003d6e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005226:	2201      	movs	r2, #1
 8005228:	409a      	lsls	r2, r3
 800522a:	4b18      	ldr	r3, [pc, #96]	; (800528c <xTaskRemoveFromEventList+0xb0>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4313      	orrs	r3, r2
 8005230:	4a16      	ldr	r2, [pc, #88]	; (800528c <xTaskRemoveFromEventList+0xb0>)
 8005232:	6013      	str	r3, [r2, #0]
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005238:	4613      	mov	r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4a13      	ldr	r2, [pc, #76]	; (8005290 <xTaskRemoveFromEventList+0xb4>)
 8005242:	441a      	add	r2, r3
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	3304      	adds	r3, #4
 8005248:	4619      	mov	r1, r3
 800524a:	4610      	mov	r0, r2
 800524c:	f7fe fd32 	bl	8003cb4 <vListInsertEnd>
 8005250:	e005      	b.n	800525e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	3318      	adds	r3, #24
 8005256:	4619      	mov	r1, r3
 8005258:	480e      	ldr	r0, [pc, #56]	; (8005294 <xTaskRemoveFromEventList+0xb8>)
 800525a:	f7fe fd2b 	bl	8003cb4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005262:	4b0d      	ldr	r3, [pc, #52]	; (8005298 <xTaskRemoveFromEventList+0xbc>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005268:	429a      	cmp	r2, r3
 800526a:	d905      	bls.n	8005278 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800526c:	2301      	movs	r3, #1
 800526e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005270:	4b0a      	ldr	r3, [pc, #40]	; (800529c <xTaskRemoveFromEventList+0xc0>)
 8005272:	2201      	movs	r2, #1
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	e001      	b.n	800527c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8005278:	2300      	movs	r3, #0
 800527a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800527c:	697b      	ldr	r3, [r7, #20]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3718      	adds	r7, #24
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	200003a8 	.word	0x200003a8
 800528c:	20000388 	.word	0x20000388
 8005290:	20000284 	.word	0x20000284
 8005294:	20000340 	.word	0x20000340
 8005298:	20000280 	.word	0x20000280
 800529c:	20000394 	.word	0x20000394

080052a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80052a8:	4b06      	ldr	r3, [pc, #24]	; (80052c4 <vTaskInternalSetTimeOutState+0x24>)
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80052b0:	4b05      	ldr	r3, [pc, #20]	; (80052c8 <vTaskInternalSetTimeOutState+0x28>)
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	605a      	str	r2, [r3, #4]
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr
 80052c4:	20000398 	.word	0x20000398
 80052c8:	20000384 	.word	0x20000384

080052cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b088      	sub	sp, #32
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d109      	bne.n	80052f0 <xTaskCheckForTimeOut+0x24>
 80052dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	613b      	str	r3, [r7, #16]
 80052ee:	e7fe      	b.n	80052ee <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d109      	bne.n	800530a <xTaskCheckForTimeOut+0x3e>
 80052f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fa:	f383 8811 	msr	BASEPRI, r3
 80052fe:	f3bf 8f6f 	isb	sy
 8005302:	f3bf 8f4f 	dsb	sy
 8005306:	60fb      	str	r3, [r7, #12]
 8005308:	e7fe      	b.n	8005308 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800530a:	f000 fb4f 	bl	80059ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800530e:	4b1d      	ldr	r3, [pc, #116]	; (8005384 <xTaskCheckForTimeOut+0xb8>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	69ba      	ldr	r2, [r7, #24]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005326:	d102      	bne.n	800532e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005328:	2300      	movs	r3, #0
 800532a:	61fb      	str	r3, [r7, #28]
 800532c:	e023      	b.n	8005376 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	4b15      	ldr	r3, [pc, #84]	; (8005388 <xTaskCheckForTimeOut+0xbc>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	429a      	cmp	r2, r3
 8005338:	d007      	beq.n	800534a <xTaskCheckForTimeOut+0x7e>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	429a      	cmp	r2, r3
 8005342:	d302      	bcc.n	800534a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005344:	2301      	movs	r3, #1
 8005346:	61fb      	str	r3, [r7, #28]
 8005348:	e015      	b.n	8005376 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	429a      	cmp	r2, r3
 8005352:	d20b      	bcs.n	800536c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	1ad2      	subs	r2, r2, r3
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7ff ff9d 	bl	80052a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005366:	2300      	movs	r3, #0
 8005368:	61fb      	str	r3, [r7, #28]
 800536a:	e004      	b.n	8005376 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	2200      	movs	r2, #0
 8005370:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005372:	2301      	movs	r3, #1
 8005374:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005376:	f000 fb47 	bl	8005a08 <vPortExitCritical>

	return xReturn;
 800537a:	69fb      	ldr	r3, [r7, #28]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3720      	adds	r7, #32
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	20000384 	.word	0x20000384
 8005388:	20000398 	.word	0x20000398

0800538c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005390:	4b03      	ldr	r3, [pc, #12]	; (80053a0 <vTaskMissedYield+0x14>)
 8005392:	2201      	movs	r2, #1
 8005394:	601a      	str	r2, [r3, #0]
}
 8005396:	bf00      	nop
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr
 80053a0:	20000394 	.word	0x20000394

080053a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80053ac:	f000 f852 	bl	8005454 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80053b0:	4b06      	ldr	r3, [pc, #24]	; (80053cc <prvIdleTask+0x28>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d9f9      	bls.n	80053ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80053b8:	4b05      	ldr	r3, [pc, #20]	; (80053d0 <prvIdleTask+0x2c>)
 80053ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053be:	601a      	str	r2, [r3, #0]
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80053c8:	e7f0      	b.n	80053ac <prvIdleTask+0x8>
 80053ca:	bf00      	nop
 80053cc:	20000284 	.word	0x20000284
 80053d0:	e000ed04 	.word	0xe000ed04

080053d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053da:	2300      	movs	r3, #0
 80053dc:	607b      	str	r3, [r7, #4]
 80053de:	e00c      	b.n	80053fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	4613      	mov	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	4a12      	ldr	r2, [pc, #72]	; (8005434 <prvInitialiseTaskLists+0x60>)
 80053ec:	4413      	add	r3, r2
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7fe fc33 	bl	8003c5a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	3301      	adds	r3, #1
 80053f8:	607b      	str	r3, [r7, #4]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b06      	cmp	r3, #6
 80053fe:	d9ef      	bls.n	80053e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005400:	480d      	ldr	r0, [pc, #52]	; (8005438 <prvInitialiseTaskLists+0x64>)
 8005402:	f7fe fc2a 	bl	8003c5a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005406:	480d      	ldr	r0, [pc, #52]	; (800543c <prvInitialiseTaskLists+0x68>)
 8005408:	f7fe fc27 	bl	8003c5a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800540c:	480c      	ldr	r0, [pc, #48]	; (8005440 <prvInitialiseTaskLists+0x6c>)
 800540e:	f7fe fc24 	bl	8003c5a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005412:	480c      	ldr	r0, [pc, #48]	; (8005444 <prvInitialiseTaskLists+0x70>)
 8005414:	f7fe fc21 	bl	8003c5a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005418:	480b      	ldr	r0, [pc, #44]	; (8005448 <prvInitialiseTaskLists+0x74>)
 800541a:	f7fe fc1e 	bl	8003c5a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800541e:	4b0b      	ldr	r3, [pc, #44]	; (800544c <prvInitialiseTaskLists+0x78>)
 8005420:	4a05      	ldr	r2, [pc, #20]	; (8005438 <prvInitialiseTaskLists+0x64>)
 8005422:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005424:	4b0a      	ldr	r3, [pc, #40]	; (8005450 <prvInitialiseTaskLists+0x7c>)
 8005426:	4a05      	ldr	r2, [pc, #20]	; (800543c <prvInitialiseTaskLists+0x68>)
 8005428:	601a      	str	r2, [r3, #0]
}
 800542a:	bf00      	nop
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	20000284 	.word	0x20000284
 8005438:	20000310 	.word	0x20000310
 800543c:	20000324 	.word	0x20000324
 8005440:	20000340 	.word	0x20000340
 8005444:	20000354 	.word	0x20000354
 8005448:	2000036c 	.word	0x2000036c
 800544c:	20000338 	.word	0x20000338
 8005450:	2000033c 	.word	0x2000033c

08005454 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800545a:	e019      	b.n	8005490 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800545c:	f000 faa6 	bl	80059ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005460:	4b0f      	ldr	r3, [pc, #60]	; (80054a0 <prvCheckTasksWaitingTermination+0x4c>)
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	3304      	adds	r3, #4
 800546c:	4618      	mov	r0, r3
 800546e:	f7fe fc7e 	bl	8003d6e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005472:	4b0c      	ldr	r3, [pc, #48]	; (80054a4 <prvCheckTasksWaitingTermination+0x50>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3b01      	subs	r3, #1
 8005478:	4a0a      	ldr	r2, [pc, #40]	; (80054a4 <prvCheckTasksWaitingTermination+0x50>)
 800547a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800547c:	4b0a      	ldr	r3, [pc, #40]	; (80054a8 <prvCheckTasksWaitingTermination+0x54>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3b01      	subs	r3, #1
 8005482:	4a09      	ldr	r2, [pc, #36]	; (80054a8 <prvCheckTasksWaitingTermination+0x54>)
 8005484:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005486:	f000 fabf 	bl	8005a08 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f80e 	bl	80054ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005490:	4b05      	ldr	r3, [pc, #20]	; (80054a8 <prvCheckTasksWaitingTermination+0x54>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1e1      	bne.n	800545c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005498:	bf00      	nop
 800549a:	3708      	adds	r7, #8
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	20000354 	.word	0x20000354
 80054a4:	20000380 	.word	0x20000380
 80054a8:	20000368 	.word	0x20000368

080054ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d108      	bne.n	80054d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 fc4e 	bl	8005d64 <vPortFree>
				vPortFree( pxTCB );
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 fc4b 	bl	8005d64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80054ce:	e017      	b.n	8005500 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d103      	bne.n	80054e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 fc42 	bl	8005d64 <vPortFree>
	}
 80054e0:	e00e      	b.n	8005500 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d009      	beq.n	8005500 <prvDeleteTCB+0x54>
 80054ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f0:	f383 8811 	msr	BASEPRI, r3
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	60fb      	str	r3, [r7, #12]
 80054fe:	e7fe      	b.n	80054fe <prvDeleteTCB+0x52>
	}
 8005500:	bf00      	nop
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800550e:	4b0c      	ldr	r3, [pc, #48]	; (8005540 <prvResetNextTaskUnblockTime+0x38>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d104      	bne.n	8005522 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005518:	4b0a      	ldr	r3, [pc, #40]	; (8005544 <prvResetNextTaskUnblockTime+0x3c>)
 800551a:	f04f 32ff 	mov.w	r2, #4294967295
 800551e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005520:	e008      	b.n	8005534 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005522:	4b07      	ldr	r3, [pc, #28]	; (8005540 <prvResetNextTaskUnblockTime+0x38>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	4a04      	ldr	r2, [pc, #16]	; (8005544 <prvResetNextTaskUnblockTime+0x3c>)
 8005532:	6013      	str	r3, [r2, #0]
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	20000338 	.word	0x20000338
 8005544:	200003a0 	.word	0x200003a0

08005548 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800554e:	4b0b      	ldr	r3, [pc, #44]	; (800557c <xTaskGetSchedulerState+0x34>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d102      	bne.n	800555c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005556:	2301      	movs	r3, #1
 8005558:	607b      	str	r3, [r7, #4]
 800555a:	e008      	b.n	800556e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800555c:	4b08      	ldr	r3, [pc, #32]	; (8005580 <xTaskGetSchedulerState+0x38>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d102      	bne.n	800556a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005564:	2302      	movs	r3, #2
 8005566:	607b      	str	r3, [r7, #4]
 8005568:	e001      	b.n	800556e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800556a:	2300      	movs	r3, #0
 800556c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800556e:	687b      	ldr	r3, [r7, #4]
	}
 8005570:	4618      	mov	r0, r3
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	2000038c 	.word	0x2000038c
 8005580:	200003a8 	.word	0x200003a8

08005584 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005590:	2300      	movs	r3, #0
 8005592:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d06c      	beq.n	8005674 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800559a:	4b39      	ldr	r3, [pc, #228]	; (8005680 <xTaskPriorityDisinherit+0xfc>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d009      	beq.n	80055b8 <xTaskPriorityDisinherit+0x34>
 80055a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a8:	f383 8811 	msr	BASEPRI, r3
 80055ac:	f3bf 8f6f 	isb	sy
 80055b0:	f3bf 8f4f 	dsb	sy
 80055b4:	60fb      	str	r3, [r7, #12]
 80055b6:	e7fe      	b.n	80055b6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d109      	bne.n	80055d4 <xTaskPriorityDisinherit+0x50>
 80055c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	60bb      	str	r3, [r7, #8]
 80055d2:	e7fe      	b.n	80055d2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055d8:	1e5a      	subs	r2, r3, #1
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d044      	beq.n	8005674 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d140      	bne.n	8005674 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	3304      	adds	r3, #4
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7fe fbb9 	bl	8003d6e <uxListRemove>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d115      	bne.n	800562e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005606:	491f      	ldr	r1, [pc, #124]	; (8005684 <xTaskPriorityDisinherit+0x100>)
 8005608:	4613      	mov	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	440b      	add	r3, r1
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10a      	bne.n	800562e <xTaskPriorityDisinherit+0xaa>
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561c:	2201      	movs	r2, #1
 800561e:	fa02 f303 	lsl.w	r3, r2, r3
 8005622:	43da      	mvns	r2, r3
 8005624:	4b18      	ldr	r3, [pc, #96]	; (8005688 <xTaskPriorityDisinherit+0x104>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4013      	ands	r3, r2
 800562a:	4a17      	ldr	r2, [pc, #92]	; (8005688 <xTaskPriorityDisinherit+0x104>)
 800562c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563a:	f1c3 0207 	rsb	r2, r3, #7
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005646:	2201      	movs	r2, #1
 8005648:	409a      	lsls	r2, r3
 800564a:	4b0f      	ldr	r3, [pc, #60]	; (8005688 <xTaskPriorityDisinherit+0x104>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4313      	orrs	r3, r2
 8005650:	4a0d      	ldr	r2, [pc, #52]	; (8005688 <xTaskPriorityDisinherit+0x104>)
 8005652:	6013      	str	r3, [r2, #0]
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005658:	4613      	mov	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4a08      	ldr	r2, [pc, #32]	; (8005684 <xTaskPriorityDisinherit+0x100>)
 8005662:	441a      	add	r2, r3
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	3304      	adds	r3, #4
 8005668:	4619      	mov	r1, r3
 800566a:	4610      	mov	r0, r2
 800566c:	f7fe fb22 	bl	8003cb4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005670:	2301      	movs	r3, #1
 8005672:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005674:	697b      	ldr	r3, [r7, #20]
	}
 8005676:	4618      	mov	r0, r3
 8005678:	3718      	adds	r7, #24
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	20000280 	.word	0x20000280
 8005684:	20000284 	.word	0x20000284
 8005688:	20000388 	.word	0x20000388

0800568c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005696:	4b29      	ldr	r3, [pc, #164]	; (800573c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800569c:	4b28      	ldr	r3, [pc, #160]	; (8005740 <prvAddCurrentTaskToDelayedList+0xb4>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3304      	adds	r3, #4
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fe fb63 	bl	8003d6e <uxListRemove>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10b      	bne.n	80056c6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80056ae:	4b24      	ldr	r3, [pc, #144]	; (8005740 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b4:	2201      	movs	r2, #1
 80056b6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ba:	43da      	mvns	r2, r3
 80056bc:	4b21      	ldr	r3, [pc, #132]	; (8005744 <prvAddCurrentTaskToDelayedList+0xb8>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4013      	ands	r3, r2
 80056c2:	4a20      	ldr	r2, [pc, #128]	; (8005744 <prvAddCurrentTaskToDelayedList+0xb8>)
 80056c4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056cc:	d10a      	bne.n	80056e4 <prvAddCurrentTaskToDelayedList+0x58>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d007      	beq.n	80056e4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056d4:	4b1a      	ldr	r3, [pc, #104]	; (8005740 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	3304      	adds	r3, #4
 80056da:	4619      	mov	r1, r3
 80056dc:	481a      	ldr	r0, [pc, #104]	; (8005748 <prvAddCurrentTaskToDelayedList+0xbc>)
 80056de:	f7fe fae9 	bl	8003cb4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80056e2:	e026      	b.n	8005732 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4413      	add	r3, r2
 80056ea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80056ec:	4b14      	ldr	r3, [pc, #80]	; (8005740 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d209      	bcs.n	8005710 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056fc:	4b13      	ldr	r3, [pc, #76]	; (800574c <prvAddCurrentTaskToDelayedList+0xc0>)
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	4b0f      	ldr	r3, [pc, #60]	; (8005740 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	3304      	adds	r3, #4
 8005706:	4619      	mov	r1, r3
 8005708:	4610      	mov	r0, r2
 800570a:	f7fe faf7 	bl	8003cfc <vListInsert>
}
 800570e:	e010      	b.n	8005732 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005710:	4b0f      	ldr	r3, [pc, #60]	; (8005750 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	4b0a      	ldr	r3, [pc, #40]	; (8005740 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3304      	adds	r3, #4
 800571a:	4619      	mov	r1, r3
 800571c:	4610      	mov	r0, r2
 800571e:	f7fe faed 	bl	8003cfc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005722:	4b0c      	ldr	r3, [pc, #48]	; (8005754 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	429a      	cmp	r2, r3
 800572a:	d202      	bcs.n	8005732 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800572c:	4a09      	ldr	r2, [pc, #36]	; (8005754 <prvAddCurrentTaskToDelayedList+0xc8>)
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	6013      	str	r3, [r2, #0]
}
 8005732:	bf00      	nop
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	20000384 	.word	0x20000384
 8005740:	20000280 	.word	0x20000280
 8005744:	20000388 	.word	0x20000388
 8005748:	2000036c 	.word	0x2000036c
 800574c:	2000033c 	.word	0x2000033c
 8005750:	20000338 	.word	0x20000338
 8005754:	200003a0 	.word	0x200003a0

08005758 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	3b04      	subs	r3, #4
 8005768:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005770:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	3b04      	subs	r3, #4
 8005776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	f023 0201 	bic.w	r2, r3, #1
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	3b04      	subs	r3, #4
 8005786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005788:	4a0c      	ldr	r2, [pc, #48]	; (80057bc <pxPortInitialiseStack+0x64>)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	3b14      	subs	r3, #20
 8005792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	3b04      	subs	r3, #4
 800579e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f06f 0202 	mvn.w	r2, #2
 80057a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	3b20      	subs	r3, #32
 80057ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80057ae:	68fb      	ldr	r3, [r7, #12]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr
 80057bc:	080057c1 	.word	0x080057c1

080057c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80057c6:	2300      	movs	r3, #0
 80057c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80057ca:	4b11      	ldr	r3, [pc, #68]	; (8005810 <prvTaskExitError+0x50>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d2:	d009      	beq.n	80057e8 <prvTaskExitError+0x28>
 80057d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d8:	f383 8811 	msr	BASEPRI, r3
 80057dc:	f3bf 8f6f 	isb	sy
 80057e0:	f3bf 8f4f 	dsb	sy
 80057e4:	60fb      	str	r3, [r7, #12]
 80057e6:	e7fe      	b.n	80057e6 <prvTaskExitError+0x26>
 80057e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ec:	f383 8811 	msr	BASEPRI, r3
 80057f0:	f3bf 8f6f 	isb	sy
 80057f4:	f3bf 8f4f 	dsb	sy
 80057f8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80057fa:	bf00      	nop
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d0fc      	beq.n	80057fc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005802:	bf00      	nop
 8005804:	3714      	adds	r7, #20
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	2000000c 	.word	0x2000000c
	...

08005820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005820:	4b07      	ldr	r3, [pc, #28]	; (8005840 <pxCurrentTCBConst2>)
 8005822:	6819      	ldr	r1, [r3, #0]
 8005824:	6808      	ldr	r0, [r1, #0]
 8005826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800582a:	f380 8809 	msr	PSP, r0
 800582e:	f3bf 8f6f 	isb	sy
 8005832:	f04f 0000 	mov.w	r0, #0
 8005836:	f380 8811 	msr	BASEPRI, r0
 800583a:	4770      	bx	lr
 800583c:	f3af 8000 	nop.w

08005840 <pxCurrentTCBConst2>:
 8005840:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005844:	bf00      	nop
 8005846:	bf00      	nop

08005848 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005848:	4808      	ldr	r0, [pc, #32]	; (800586c <prvPortStartFirstTask+0x24>)
 800584a:	6800      	ldr	r0, [r0, #0]
 800584c:	6800      	ldr	r0, [r0, #0]
 800584e:	f380 8808 	msr	MSP, r0
 8005852:	f04f 0000 	mov.w	r0, #0
 8005856:	f380 8814 	msr	CONTROL, r0
 800585a:	b662      	cpsie	i
 800585c:	b661      	cpsie	f
 800585e:	f3bf 8f4f 	dsb	sy
 8005862:	f3bf 8f6f 	isb	sy
 8005866:	df00      	svc	0
 8005868:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800586a:	bf00      	nop
 800586c:	e000ed08 	.word	0xe000ed08

08005870 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b086      	sub	sp, #24
 8005874:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005876:	4b44      	ldr	r3, [pc, #272]	; (8005988 <xPortStartScheduler+0x118>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a44      	ldr	r2, [pc, #272]	; (800598c <xPortStartScheduler+0x11c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d109      	bne.n	8005894 <xPortStartScheduler+0x24>
 8005880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005884:	f383 8811 	msr	BASEPRI, r3
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	613b      	str	r3, [r7, #16]
 8005892:	e7fe      	b.n	8005892 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005894:	4b3c      	ldr	r3, [pc, #240]	; (8005988 <xPortStartScheduler+0x118>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a3d      	ldr	r2, [pc, #244]	; (8005990 <xPortStartScheduler+0x120>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d109      	bne.n	80058b2 <xPortStartScheduler+0x42>
 800589e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a2:	f383 8811 	msr	BASEPRI, r3
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	60fb      	str	r3, [r7, #12]
 80058b0:	e7fe      	b.n	80058b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80058b2:	4b38      	ldr	r3, [pc, #224]	; (8005994 <xPortStartScheduler+0x124>)
 80058b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	22ff      	movs	r2, #255	; 0xff
 80058c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80058cc:	78fb      	ldrb	r3, [r7, #3]
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	4b30      	ldr	r3, [pc, #192]	; (8005998 <xPortStartScheduler+0x128>)
 80058d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80058da:	4b30      	ldr	r3, [pc, #192]	; (800599c <xPortStartScheduler+0x12c>)
 80058dc:	2207      	movs	r2, #7
 80058de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80058e0:	e009      	b.n	80058f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80058e2:	4b2e      	ldr	r3, [pc, #184]	; (800599c <xPortStartScheduler+0x12c>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	3b01      	subs	r3, #1
 80058e8:	4a2c      	ldr	r2, [pc, #176]	; (800599c <xPortStartScheduler+0x12c>)
 80058ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80058ec:	78fb      	ldrb	r3, [r7, #3]
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	005b      	lsls	r3, r3, #1
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80058f6:	78fb      	ldrb	r3, [r7, #3]
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058fe:	2b80      	cmp	r3, #128	; 0x80
 8005900:	d0ef      	beq.n	80058e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005902:	4b26      	ldr	r3, [pc, #152]	; (800599c <xPortStartScheduler+0x12c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f1c3 0307 	rsb	r3, r3, #7
 800590a:	2b04      	cmp	r3, #4
 800590c:	d009      	beq.n	8005922 <xPortStartScheduler+0xb2>
 800590e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005912:	f383 8811 	msr	BASEPRI, r3
 8005916:	f3bf 8f6f 	isb	sy
 800591a:	f3bf 8f4f 	dsb	sy
 800591e:	60bb      	str	r3, [r7, #8]
 8005920:	e7fe      	b.n	8005920 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005922:	4b1e      	ldr	r3, [pc, #120]	; (800599c <xPortStartScheduler+0x12c>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	021b      	lsls	r3, r3, #8
 8005928:	4a1c      	ldr	r2, [pc, #112]	; (800599c <xPortStartScheduler+0x12c>)
 800592a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800592c:	4b1b      	ldr	r3, [pc, #108]	; (800599c <xPortStartScheduler+0x12c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005934:	4a19      	ldr	r2, [pc, #100]	; (800599c <xPortStartScheduler+0x12c>)
 8005936:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	b2da      	uxtb	r2, r3
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005940:	4b17      	ldr	r3, [pc, #92]	; (80059a0 <xPortStartScheduler+0x130>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a16      	ldr	r2, [pc, #88]	; (80059a0 <xPortStartScheduler+0x130>)
 8005946:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800594a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800594c:	4b14      	ldr	r3, [pc, #80]	; (80059a0 <xPortStartScheduler+0x130>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a13      	ldr	r2, [pc, #76]	; (80059a0 <xPortStartScheduler+0x130>)
 8005952:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005956:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005958:	f000 f8d6 	bl	8005b08 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800595c:	4b11      	ldr	r3, [pc, #68]	; (80059a4 <xPortStartScheduler+0x134>)
 800595e:	2200      	movs	r2, #0
 8005960:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005962:	f000 f8f5 	bl	8005b50 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005966:	4b10      	ldr	r3, [pc, #64]	; (80059a8 <xPortStartScheduler+0x138>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a0f      	ldr	r2, [pc, #60]	; (80059a8 <xPortStartScheduler+0x138>)
 800596c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005970:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005972:	f7ff ff69 	bl	8005848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005976:	f7ff fbb3 	bl	80050e0 <vTaskSwitchContext>
	prvTaskExitError();
 800597a:	f7ff ff21 	bl	80057c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3718      	adds	r7, #24
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	e000ed00 	.word	0xe000ed00
 800598c:	410fc271 	.word	0x410fc271
 8005990:	410fc270 	.word	0x410fc270
 8005994:	e000e400 	.word	0xe000e400
 8005998:	200003ac 	.word	0x200003ac
 800599c:	200003b0 	.word	0x200003b0
 80059a0:	e000ed20 	.word	0xe000ed20
 80059a4:	2000000c 	.word	0x2000000c
 80059a8:	e000ef34 	.word	0xe000ef34

080059ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b6:	f383 8811 	msr	BASEPRI, r3
 80059ba:	f3bf 8f6f 	isb	sy
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80059c4:	4b0e      	ldr	r3, [pc, #56]	; (8005a00 <vPortEnterCritical+0x54>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	3301      	adds	r3, #1
 80059ca:	4a0d      	ldr	r2, [pc, #52]	; (8005a00 <vPortEnterCritical+0x54>)
 80059cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80059ce:	4b0c      	ldr	r3, [pc, #48]	; (8005a00 <vPortEnterCritical+0x54>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d10e      	bne.n	80059f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80059d6:	4b0b      	ldr	r3, [pc, #44]	; (8005a04 <vPortEnterCritical+0x58>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d009      	beq.n	80059f4 <vPortEnterCritical+0x48>
 80059e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	603b      	str	r3, [r7, #0]
 80059f2:	e7fe      	b.n	80059f2 <vPortEnterCritical+0x46>
	}
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	2000000c 	.word	0x2000000c
 8005a04:	e000ed04 	.word	0xe000ed04

08005a08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a0e:	4b11      	ldr	r3, [pc, #68]	; (8005a54 <vPortExitCritical+0x4c>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d109      	bne.n	8005a2a <vPortExitCritical+0x22>
 8005a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
 8005a26:	607b      	str	r3, [r7, #4]
 8005a28:	e7fe      	b.n	8005a28 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005a2a:	4b0a      	ldr	r3, [pc, #40]	; (8005a54 <vPortExitCritical+0x4c>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	4a08      	ldr	r2, [pc, #32]	; (8005a54 <vPortExitCritical+0x4c>)
 8005a32:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a34:	4b07      	ldr	r3, [pc, #28]	; (8005a54 <vPortExitCritical+0x4c>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d104      	bne.n	8005a46 <vPortExitCritical+0x3e>
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a46:	bf00      	nop
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	2000000c 	.word	0x2000000c
	...

08005a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a60:	f3ef 8009 	mrs	r0, PSP
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	4b15      	ldr	r3, [pc, #84]	; (8005ac0 <pxCurrentTCBConst>)
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	f01e 0f10 	tst.w	lr, #16
 8005a70:	bf08      	it	eq
 8005a72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a7a:	6010      	str	r0, [r2, #0]
 8005a7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005a84:	f380 8811 	msr	BASEPRI, r0
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	f3bf 8f6f 	isb	sy
 8005a90:	f7ff fb26 	bl	80050e0 <vTaskSwitchContext>
 8005a94:	f04f 0000 	mov.w	r0, #0
 8005a98:	f380 8811 	msr	BASEPRI, r0
 8005a9c:	bc09      	pop	{r0, r3}
 8005a9e:	6819      	ldr	r1, [r3, #0]
 8005aa0:	6808      	ldr	r0, [r1, #0]
 8005aa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa6:	f01e 0f10 	tst.w	lr, #16
 8005aaa:	bf08      	it	eq
 8005aac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ab0:	f380 8809 	msr	PSP, r0
 8005ab4:	f3bf 8f6f 	isb	sy
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	f3af 8000 	nop.w

08005ac0 <pxCurrentTCBConst>:
 8005ac0:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ac4:	bf00      	nop
 8005ac6:	bf00      	nop

08005ac8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
	__asm volatile
 8005ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad2:	f383 8811 	msr	BASEPRI, r3
 8005ad6:	f3bf 8f6f 	isb	sy
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ae0:	f7ff fa46 	bl	8004f70 <xTaskIncrementTick>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d003      	beq.n	8005af2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005aea:	4b06      	ldr	r3, [pc, #24]	; (8005b04 <SysTick_Handler+0x3c>)
 8005aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	2300      	movs	r3, #0
 8005af4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005afc:	bf00      	nop
 8005afe:	3708      	adds	r7, #8
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	e000ed04 	.word	0xe000ed04

08005b08 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b08:	b480      	push	{r7}
 8005b0a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b0c:	4b0b      	ldr	r3, [pc, #44]	; (8005b3c <vPortSetupTimerInterrupt+0x34>)
 8005b0e:	2200      	movs	r2, #0
 8005b10:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b12:	4b0b      	ldr	r3, [pc, #44]	; (8005b40 <vPortSetupTimerInterrupt+0x38>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b18:	4b0a      	ldr	r3, [pc, #40]	; (8005b44 <vPortSetupTimerInterrupt+0x3c>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a0a      	ldr	r2, [pc, #40]	; (8005b48 <vPortSetupTimerInterrupt+0x40>)
 8005b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b22:	099b      	lsrs	r3, r3, #6
 8005b24:	4a09      	ldr	r2, [pc, #36]	; (8005b4c <vPortSetupTimerInterrupt+0x44>)
 8005b26:	3b01      	subs	r3, #1
 8005b28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b2a:	4b04      	ldr	r3, [pc, #16]	; (8005b3c <vPortSetupTimerInterrupt+0x34>)
 8005b2c:	2207      	movs	r2, #7
 8005b2e:	601a      	str	r2, [r3, #0]
}
 8005b30:	bf00      	nop
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	e000e010 	.word	0xe000e010
 8005b40:	e000e018 	.word	0xe000e018
 8005b44:	20000000 	.word	0x20000000
 8005b48:	10624dd3 	.word	0x10624dd3
 8005b4c:	e000e014 	.word	0xe000e014

08005b50 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005b50:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005b60 <vPortEnableVFP+0x10>
 8005b54:	6801      	ldr	r1, [r0, #0]
 8005b56:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005b5a:	6001      	str	r1, [r0, #0]
 8005b5c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005b5e:	bf00      	nop
 8005b60:	e000ed88 	.word	0xe000ed88

08005b64 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005b6a:	f3ef 8305 	mrs	r3, IPSR
 8005b6e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2b0f      	cmp	r3, #15
 8005b74:	d913      	bls.n	8005b9e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005b76:	4a16      	ldr	r2, [pc, #88]	; (8005bd0 <vPortValidateInterruptPriority+0x6c>)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005b80:	4b14      	ldr	r3, [pc, #80]	; (8005bd4 <vPortValidateInterruptPriority+0x70>)
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	7afa      	ldrb	r2, [r7, #11]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d209      	bcs.n	8005b9e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8e:	f383 8811 	msr	BASEPRI, r3
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	f3bf 8f4f 	dsb	sy
 8005b9a:	607b      	str	r3, [r7, #4]
 8005b9c:	e7fe      	b.n	8005b9c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005b9e:	4b0e      	ldr	r3, [pc, #56]	; (8005bd8 <vPortValidateInterruptPriority+0x74>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005ba6:	4b0d      	ldr	r3, [pc, #52]	; (8005bdc <vPortValidateInterruptPriority+0x78>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d909      	bls.n	8005bc2 <vPortValidateInterruptPriority+0x5e>
 8005bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	603b      	str	r3, [r7, #0]
 8005bc0:	e7fe      	b.n	8005bc0 <vPortValidateInterruptPriority+0x5c>
	}
 8005bc2:	bf00      	nop
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	e000e3f0 	.word	0xe000e3f0
 8005bd4:	200003ac 	.word	0x200003ac
 8005bd8:	e000ed0c 	.word	0xe000ed0c
 8005bdc:	200003b0 	.word	0x200003b0

08005be0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b08a      	sub	sp, #40	; 0x28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005be8:	2300      	movs	r3, #0
 8005bea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005bec:	f7ff f916 	bl	8004e1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005bf0:	4b57      	ldr	r3, [pc, #348]	; (8005d50 <pvPortMalloc+0x170>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005bf8:	f000 f90c 	bl	8005e14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005bfc:	4b55      	ldr	r3, [pc, #340]	; (8005d54 <pvPortMalloc+0x174>)
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4013      	ands	r3, r2
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f040 808c 	bne.w	8005d22 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d01c      	beq.n	8005c4a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005c10:	2208      	movs	r2, #8
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4413      	add	r3, r2
 8005c16:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f003 0307 	and.w	r3, r3, #7
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d013      	beq.n	8005c4a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f023 0307 	bic.w	r3, r3, #7
 8005c28:	3308      	adds	r3, #8
 8005c2a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f003 0307 	and.w	r3, r3, #7
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d009      	beq.n	8005c4a <pvPortMalloc+0x6a>
 8005c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3a:	f383 8811 	msr	BASEPRI, r3
 8005c3e:	f3bf 8f6f 	isb	sy
 8005c42:	f3bf 8f4f 	dsb	sy
 8005c46:	617b      	str	r3, [r7, #20]
 8005c48:	e7fe      	b.n	8005c48 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d068      	beq.n	8005d22 <pvPortMalloc+0x142>
 8005c50:	4b41      	ldr	r3, [pc, #260]	; (8005d58 <pvPortMalloc+0x178>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d863      	bhi.n	8005d22 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c5a:	4b40      	ldr	r3, [pc, #256]	; (8005d5c <pvPortMalloc+0x17c>)
 8005c5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c5e:	4b3f      	ldr	r3, [pc, #252]	; (8005d5c <pvPortMalloc+0x17c>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c64:	e004      	b.n	8005c70 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d903      	bls.n	8005c82 <pvPortMalloc+0xa2>
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1f1      	bne.n	8005c66 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c82:	4b33      	ldr	r3, [pc, #204]	; (8005d50 <pvPortMalloc+0x170>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d04a      	beq.n	8005d22 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c8c:	6a3b      	ldr	r3, [r7, #32]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2208      	movs	r2, #8
 8005c92:	4413      	add	r3, r2
 8005c94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	6a3b      	ldr	r3, [r7, #32]
 8005c9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	1ad2      	subs	r2, r2, r3
 8005ca6:	2308      	movs	r3, #8
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d91e      	bls.n	8005cec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	f003 0307 	and.w	r3, r3, #7
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d009      	beq.n	8005cd4 <pvPortMalloc+0xf4>
 8005cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc4:	f383 8811 	msr	BASEPRI, r3
 8005cc8:	f3bf 8f6f 	isb	sy
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	613b      	str	r3, [r7, #16]
 8005cd2:	e7fe      	b.n	8005cd2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	1ad2      	subs	r2, r2, r3
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005ce6:	69b8      	ldr	r0, [r7, #24]
 8005ce8:	f000 f8f6 	bl	8005ed8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005cec:	4b1a      	ldr	r3, [pc, #104]	; (8005d58 <pvPortMalloc+0x178>)
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	4a18      	ldr	r2, [pc, #96]	; (8005d58 <pvPortMalloc+0x178>)
 8005cf8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005cfa:	4b17      	ldr	r3, [pc, #92]	; (8005d58 <pvPortMalloc+0x178>)
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	4b18      	ldr	r3, [pc, #96]	; (8005d60 <pvPortMalloc+0x180>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d203      	bcs.n	8005d0e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d06:	4b14      	ldr	r3, [pc, #80]	; (8005d58 <pvPortMalloc+0x178>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a15      	ldr	r2, [pc, #84]	; (8005d60 <pvPortMalloc+0x180>)
 8005d0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	4b10      	ldr	r3, [pc, #64]	; (8005d54 <pvPortMalloc+0x174>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	431a      	orrs	r2, r3
 8005d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	2200      	movs	r2, #0
 8005d20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d22:	f7ff f889 	bl	8004e38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	f003 0307 	and.w	r3, r3, #7
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d009      	beq.n	8005d44 <pvPortMalloc+0x164>
 8005d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d34:	f383 8811 	msr	BASEPRI, r3
 8005d38:	f3bf 8f6f 	isb	sy
 8005d3c:	f3bf 8f4f 	dsb	sy
 8005d40:	60fb      	str	r3, [r7, #12]
 8005d42:	e7fe      	b.n	8005d42 <pvPortMalloc+0x162>
	return pvReturn;
 8005d44:	69fb      	ldr	r3, [r7, #28]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3728      	adds	r7, #40	; 0x28
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	200051dc 	.word	0x200051dc
 8005d54:	200051e8 	.word	0x200051e8
 8005d58:	200051e0 	.word	0x200051e0
 8005d5c:	200051d4 	.word	0x200051d4
 8005d60:	200051e4 	.word	0x200051e4

08005d64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b086      	sub	sp, #24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d046      	beq.n	8005e04 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d76:	2308      	movs	r3, #8
 8005d78:	425b      	negs	r3, r3
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	4b20      	ldr	r3, [pc, #128]	; (8005e0c <vPortFree+0xa8>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d109      	bne.n	8005da6 <vPortFree+0x42>
 8005d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	e7fe      	b.n	8005da4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d009      	beq.n	8005dc2 <vPortFree+0x5e>
 8005dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db2:	f383 8811 	msr	BASEPRI, r3
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	60bb      	str	r3, [r7, #8]
 8005dc0:	e7fe      	b.n	8005dc0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	4b11      	ldr	r3, [pc, #68]	; (8005e0c <vPortFree+0xa8>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4013      	ands	r3, r2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d019      	beq.n	8005e04 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d115      	bne.n	8005e04 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	4b0b      	ldr	r3, [pc, #44]	; (8005e0c <vPortFree+0xa8>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	43db      	mvns	r3, r3
 8005de2:	401a      	ands	r2, r3
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005de8:	f7ff f818 	bl	8004e1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	4b07      	ldr	r3, [pc, #28]	; (8005e10 <vPortFree+0xac>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4413      	add	r3, r2
 8005df6:	4a06      	ldr	r2, [pc, #24]	; (8005e10 <vPortFree+0xac>)
 8005df8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005dfa:	6938      	ldr	r0, [r7, #16]
 8005dfc:	f000 f86c 	bl	8005ed8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005e00:	f7ff f81a 	bl	8004e38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e04:	bf00      	nop
 8005e06:	3718      	adds	r7, #24
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	200051e8 	.word	0x200051e8
 8005e10:	200051e0 	.word	0x200051e0

08005e14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e1a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8005e1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e20:	4b27      	ldr	r3, [pc, #156]	; (8005ec0 <prvHeapInit+0xac>)
 8005e22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f003 0307 	and.w	r3, r3, #7
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00c      	beq.n	8005e48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	3307      	adds	r3, #7
 8005e32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f023 0307 	bic.w	r3, r3, #7
 8005e3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	4a1f      	ldr	r2, [pc, #124]	; (8005ec0 <prvHeapInit+0xac>)
 8005e44:	4413      	add	r3, r2
 8005e46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e4c:	4a1d      	ldr	r2, [pc, #116]	; (8005ec4 <prvHeapInit+0xb0>)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e52:	4b1c      	ldr	r3, [pc, #112]	; (8005ec4 <prvHeapInit+0xb0>)
 8005e54:	2200      	movs	r2, #0
 8005e56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e60:	2208      	movs	r2, #8
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	1a9b      	subs	r3, r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f023 0307 	bic.w	r3, r3, #7
 8005e6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	4a15      	ldr	r2, [pc, #84]	; (8005ec8 <prvHeapInit+0xb4>)
 8005e74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e76:	4b14      	ldr	r3, [pc, #80]	; (8005ec8 <prvHeapInit+0xb4>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e7e:	4b12      	ldr	r3, [pc, #72]	; (8005ec8 <prvHeapInit+0xb4>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2200      	movs	r2, #0
 8005e84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	1ad2      	subs	r2, r2, r3
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e94:	4b0c      	ldr	r3, [pc, #48]	; (8005ec8 <prvHeapInit+0xb4>)
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	4a0a      	ldr	r2, [pc, #40]	; (8005ecc <prvHeapInit+0xb8>)
 8005ea2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	4a09      	ldr	r2, [pc, #36]	; (8005ed0 <prvHeapInit+0xbc>)
 8005eaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005eac:	4b09      	ldr	r3, [pc, #36]	; (8005ed4 <prvHeapInit+0xc0>)
 8005eae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005eb2:	601a      	str	r2, [r3, #0]
}
 8005eb4:	bf00      	nop
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr
 8005ec0:	200003b4 	.word	0x200003b4
 8005ec4:	200051d4 	.word	0x200051d4
 8005ec8:	200051dc 	.word	0x200051dc
 8005ecc:	200051e4 	.word	0x200051e4
 8005ed0:	200051e0 	.word	0x200051e0
 8005ed4:	200051e8 	.word	0x200051e8

08005ed8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ee0:	4b28      	ldr	r3, [pc, #160]	; (8005f84 <prvInsertBlockIntoFreeList+0xac>)
 8005ee2:	60fb      	str	r3, [r7, #12]
 8005ee4:	e002      	b.n	8005eec <prvInsertBlockIntoFreeList+0x14>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d8f7      	bhi.n	8005ee6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	4413      	add	r3, r2
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d108      	bne.n	8005f1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	441a      	add	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	441a      	add	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d118      	bne.n	8005f60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	4b15      	ldr	r3, [pc, #84]	; (8005f88 <prvInsertBlockIntoFreeList+0xb0>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d00d      	beq.n	8005f56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	441a      	add	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	601a      	str	r2, [r3, #0]
 8005f54:	e008      	b.n	8005f68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f56:	4b0c      	ldr	r3, [pc, #48]	; (8005f88 <prvInsertBlockIntoFreeList+0xb0>)
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	601a      	str	r2, [r3, #0]
 8005f5e:	e003      	b.n	8005f68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d002      	beq.n	8005f76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f76:	bf00      	nop
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	200051d4 	.word	0x200051d4
 8005f88:	200051dc 	.word	0x200051dc

08005f8c <APP_Init>:
// Mutex for UART

app_context_t globalAppContext;

app_err_t APP_Init(void * uartHandle)
{
 8005f8c:	b5b0      	push	{r4, r5, r7, lr}
 8005f8e:	b0aa      	sub	sp, #168	; 0xa8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]

	app_context_t * appContext = APP_ContextGetForUpdate();
 8005f94:	f000 f8a0 	bl	80060d8 <APP_ContextGetForUpdate>
 8005f98:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
	APP_IF_RETURN(appContext == NULL, APP_ERR_NULL_REF);
 8005f9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <APP_Init+0x1c>
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	e08a      	b.n	80060be <APP_Init+0x132>

	// Assing handles
	appContext->uartHandle = uartHandle;
 8005fa8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	601a      	str	r2, [r3, #0]

	// Mutexes
	osMutexDef(uart_mutex);
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	appContext->uartMutexId = osMutexCreate(osMutex(uart_mutex));
 8005fbc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7fd fc75 	bl	80038b0 <osMutexCreate>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005fcc:	605a      	str	r2, [r3, #4]

	// Queues
	osMailQDef(from_uart_pool_q, APP_FROM_UART_QUEUE_SIZE, APP_UART_QUEUE_TYPE);
 8005fce:	2340      	movs	r3, #64	; 0x40
 8005fd0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005fda:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005fde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	appContext->fromUartQueueId = osMailCreate(osMailQ(from_uart_pool_q), NULL);
 8005fe2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f7fd fd17 	bl	8003a1c <osMailCreate>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005ff4:	609a      	str	r2, [r3, #8]

	osMailQDef(to_uart_pool_q, APP_FROM_UART_QUEUE_SIZE, APP_UART_QUEUE_TYPE);
 8005ff6:	2340      	movs	r3, #64	; 0x40
 8005ff8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006000:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006004:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	appContext->toUartQueueId = osMailCreate(osMailQ(to_uart_pool_q), NULL);
 8006008:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800600c:	2100      	movs	r1, #0
 800600e:	4618      	mov	r0, r3
 8006010:	f7fd fd04 	bl	8003a1c <osMailCreate>
 8006014:	4602      	mov	r2, r0
 8006016:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800601a:	60da      	str	r2, [r3, #12]

	// Tasks
	osThreadDef(mainTask, APP_MainTask, APP_MAIN_THREAD_PRIO, 1, APP_MAIN_THREAD_STACK_SIZE);
 800601c:	4b2a      	ldr	r3, [pc, #168]	; (80060c8 <APP_Init+0x13c>)
 800601e:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8006022:	461d      	mov	r5, r3
 8006024:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006026:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006028:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800602c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	appContext->mainThreadId = osThreadCreate(osThread(mainTask), NULL);
 8006030:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006034:	2100      	movs	r1, #0
 8006036:	4618      	mov	r0, r3
 8006038:	f7fd fbce 	bl	80037d8 <osThreadCreate>
 800603c:	4602      	mov	r2, r0
 800603e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006042:	611a      	str	r2, [r3, #16]

	osThreadDef(uiTask, APP_UI_Task, APP_UI_THREAD_PRIO, 1, APP_UI_THREAD_STACK_SIZE);
 8006044:	4b21      	ldr	r3, [pc, #132]	; (80060cc <APP_Init+0x140>)
 8006046:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800604a:	461d      	mov	r5, r3
 800604c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800604e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006050:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006054:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	appContext->uiThreadId = osThreadCreate(osThread(uiTask), NULL);
 8006058:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800605c:	2100      	movs	r1, #0
 800605e:	4618      	mov	r0, r3
 8006060:	f7fd fbba 	bl	80037d8 <osThreadCreate>
 8006064:	4602      	mov	r2, r0
 8006066:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800606a:	615a      	str	r2, [r3, #20]

	osThreadDef(uartRxTask, APP_UART_RxTask, APP_UART_RX_THREAD_PRIO, 1, APP_UART_RX_THREAD_STACK_SIZE);
 800606c:	4b18      	ldr	r3, [pc, #96]	; (80060d0 <APP_Init+0x144>)
 800606e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8006072:	461d      	mov	r5, r3
 8006074:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006078:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800607c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	appContext->uartRxThreadId = osThreadCreate(osThread(uartRxTask), NULL);
 8006080:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006084:	2100      	movs	r1, #0
 8006086:	4618      	mov	r0, r3
 8006088:	f7fd fba6 	bl	80037d8 <osThreadCreate>
 800608c:	4602      	mov	r2, r0
 800608e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006092:	619a      	str	r2, [r3, #24]

	osThreadDef(uartTxTask, APP_UART_TxTask, APP_UART_TX_THREAD_PRIO, 1, APP_UART_TX_THREAD_STACK_SIZE);
 8006094:	4b0f      	ldr	r3, [pc, #60]	; (80060d4 <APP_Init+0x148>)
 8006096:	f107 040c 	add.w	r4, r7, #12
 800609a:	461d      	mov	r5, r3
 800609c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800609e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80060a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	appContext->uartTxThreadId = osThreadCreate(osThread(uartTxTask), NULL);
 80060a8:	f107 030c 	add.w	r3, r7, #12
 80060ac:	2100      	movs	r1, #0
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fd fb92 	bl	80037d8 <osThreadCreate>
 80060b4:	4602      	mov	r2, r0
 80060b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80060ba:	61da      	str	r2, [r3, #28]

	return APP_ERR_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	37a8      	adds	r7, #168	; 0xa8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bdb0      	pop	{r4, r5, r7, pc}
 80060c6:	bf00      	nop
 80060c8:	08006258 	.word	0x08006258
 80060cc:	0800627c 	.word	0x0800627c
 80060d0:	080062a4 	.word	0x080062a4
 80060d4:	080062cc 	.word	0x080062cc

080060d8 <APP_ContextGetForUpdate>:
{
	return (const app_context_t *) &globalAppContext;
}

app_context_t * APP_ContextGetForUpdate(void)
{
 80060d8:	b480      	push	{r7}
 80060da:	af00      	add	r7, sp, #0
	return &globalAppContext;
 80060dc:	4b02      	ldr	r3, [pc, #8]	; (80060e8 <APP_ContextGetForUpdate+0x10>)
}
 80060de:	4618      	mov	r0, r3
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	20005338 	.word	0x20005338

080060ec <APP_MainTask>:

void APP_MainTask(const void * argument)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
	for (;;)
	{
		osDelay(1000);
 80060f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80060f8:	f7fd fbc6 	bl	8003888 <osDelay>
 80060fc:	e7fa      	b.n	80060f4 <APP_MainTask+0x8>
	...

08006100 <APP_UART_RxTask>:
#include "main.h"

static uint16_t __uartReceiveVal = 0;

void APP_UART_RxTask(const void * argument)
{
 8006100:	b530      	push	{r4, r5, lr}
	// TODO check error
	HAL_UART_Receive_IT(globalAppContext.uartHandle, &__uartReceiveVal, (uint16_t) 1);
 8006102:	4d0d      	ldr	r5, [pc, #52]	; (8006138 <APP_UART_RxTask+0x38>)
 8006104:	490d      	ldr	r1, [pc, #52]	; (800613c <APP_UART_RxTask+0x3c>)
 8006106:	6828      	ldr	r0, [r5, #0]
{
 8006108:	b085      	sub	sp, #20
	HAL_UART_Receive_IT(globalAppContext.uartHandle, &__uartReceiveVal, (uint16_t) 1);
 800610a:	2201      	movs	r2, #1
 800610c:	f7fc fb5a 	bl	80027c4 <HAL_UART_Receive_IT>
	osEvent rtosEvent;
	uint16_t * received = NULL;
	for (;;)
	{
		// TODO check error
		rtosEvent = osMailGet(globalAppContext.fromUartQueueId, osWaitForever);
 8006110:	f04f 32ff 	mov.w	r2, #4294967295
 8006114:	68a9      	ldr	r1, [r5, #8]
 8006116:	a801      	add	r0, sp, #4
 8006118:	f7fd fd16 	bl	8003b48 <osMailGet>

		received = (uint16_t *) rtosEvent.value.p;
 800611c:	9c02      	ldr	r4, [sp, #8]
		if (received != NULL)
 800611e:	2c00      	cmp	r4, #0
 8006120:	d0f6      	beq.n	8006110 <APP_UART_RxTask+0x10>
		{
			// TODO action with data
			// TODO at this time we just send data in loopback mode
			// TODO check error
			HAL_UART_Transmit_IT(globalAppContext.uartHandle, received, 1);
 8006122:	4621      	mov	r1, r4
 8006124:	2201      	movs	r2, #1
 8006126:	6828      	ldr	r0, [r5, #0]
 8006128:	f7fc faf0 	bl	800270c <HAL_UART_Transmit_IT>

			// Free queue
			osMailFree(globalAppContext.fromUartQueueId, received);
 800612c:	4621      	mov	r1, r4
 800612e:	68a8      	ldr	r0, [r5, #8]
 8006130:	f7fd fd7e 	bl	8003c30 <osMailFree>
 8006134:	e7ec      	b.n	8006110 <APP_UART_RxTask+0x10>
 8006136:	bf00      	nop
 8006138:	20005338 	.word	0x20005338
 800613c:	200051ec 	.word	0x200051ec

08006140 <APP_UART_TxTask>:
		}
	}
}

void APP_UART_TxTask(const void * argument)
{
 8006140:	b508      	push	{r3, lr}
	for (;;)
	{
		osDelay(1000);
 8006142:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006146:	f7fd fb9f 	bl	8003888 <osDelay>
 800614a:	e7fa      	b.n	8006142 <APP_UART_TxTask+0x2>

0800614c <HAL_UART_TxCpltCallback>:
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop

08006150 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006150:	b510      	push	{r4, lr}
	if (huart == globalAppContext.uartHandle)
 8006152:	4c08      	ldr	r4, [pc, #32]	; (8006174 <HAL_UART_RxCpltCallback+0x24>)
 8006154:	6823      	ldr	r3, [r4, #0]
 8006156:	4283      	cmp	r3, r0
 8006158:	d000      	beq.n	800615c <HAL_UART_RxCpltCallback+0xc>
		// TODO check error
		osMailPut(globalAppContext.fromUartQueueId, &__uartReceiveVal);
		// TODO check error
		HAL_UART_Receive_IT(globalAppContext.uartHandle, &__uartReceiveVal, (uint16_t) 1);
	}
}
 800615a:	bd10      	pop	{r4, pc}
		osMailPut(globalAppContext.fromUartQueueId, &__uartReceiveVal);
 800615c:	4906      	ldr	r1, [pc, #24]	; (8006178 <HAL_UART_RxCpltCallback+0x28>)
 800615e:	68a0      	ldr	r0, [r4, #8]
 8006160:	f7fd fcb4 	bl	8003acc <osMailPut>
		HAL_UART_Receive_IT(globalAppContext.uartHandle, &__uartReceiveVal, (uint16_t) 1);
 8006164:	6820      	ldr	r0, [r4, #0]
 8006166:	4904      	ldr	r1, [pc, #16]	; (8006178 <HAL_UART_RxCpltCallback+0x28>)
 8006168:	2201      	movs	r2, #1
}
 800616a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_UART_Receive_IT(globalAppContext.uartHandle, &__uartReceiveVal, (uint16_t) 1);
 800616e:	f7fc bb29 	b.w	80027c4 <HAL_UART_Receive_IT>
 8006172:	bf00      	nop
 8006174:	20005338 	.word	0x20005338
 8006178:	200051ec 	.word	0x200051ec

0800617c <HAL_UART_ErrorCallback>:
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop

08006180 <APP_UI_Task>:
#include "app_ui.h"

#include "cmsis_os.h"

void APP_UI_Task(const void * argument)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
	for (;;)
	{
		osDelay(1000);
 8006188:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800618c:	f7fd fb7c 	bl	8003888 <osDelay>
 8006190:	e7fa      	b.n	8006188 <APP_UI_Task+0x8>
	...

08006194 <__libc_init_array>:
 8006194:	b570      	push	{r4, r5, r6, lr}
 8006196:	4e0d      	ldr	r6, [pc, #52]	; (80061cc <__libc_init_array+0x38>)
 8006198:	4c0d      	ldr	r4, [pc, #52]	; (80061d0 <__libc_init_array+0x3c>)
 800619a:	1ba4      	subs	r4, r4, r6
 800619c:	10a4      	asrs	r4, r4, #2
 800619e:	2500      	movs	r5, #0
 80061a0:	42a5      	cmp	r5, r4
 80061a2:	d109      	bne.n	80061b8 <__libc_init_array+0x24>
 80061a4:	4e0b      	ldr	r6, [pc, #44]	; (80061d4 <__libc_init_array+0x40>)
 80061a6:	4c0c      	ldr	r4, [pc, #48]	; (80061d8 <__libc_init_array+0x44>)
 80061a8:	f000 f82c 	bl	8006204 <_init>
 80061ac:	1ba4      	subs	r4, r4, r6
 80061ae:	10a4      	asrs	r4, r4, #2
 80061b0:	2500      	movs	r5, #0
 80061b2:	42a5      	cmp	r5, r4
 80061b4:	d105      	bne.n	80061c2 <__libc_init_array+0x2e>
 80061b6:	bd70      	pop	{r4, r5, r6, pc}
 80061b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061bc:	4798      	blx	r3
 80061be:	3501      	adds	r5, #1
 80061c0:	e7ee      	b.n	80061a0 <__libc_init_array+0xc>
 80061c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061c6:	4798      	blx	r3
 80061c8:	3501      	adds	r5, #1
 80061ca:	e7f2      	b.n	80061b2 <__libc_init_array+0x1e>
 80061cc:	08006338 	.word	0x08006338
 80061d0:	08006338 	.word	0x08006338
 80061d4:	08006338 	.word	0x08006338
 80061d8:	0800633c 	.word	0x0800633c

080061dc <memcpy>:
 80061dc:	b510      	push	{r4, lr}
 80061de:	1e43      	subs	r3, r0, #1
 80061e0:	440a      	add	r2, r1
 80061e2:	4291      	cmp	r1, r2
 80061e4:	d100      	bne.n	80061e8 <memcpy+0xc>
 80061e6:	bd10      	pop	{r4, pc}
 80061e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061f0:	e7f7      	b.n	80061e2 <memcpy+0x6>

080061f2 <memset>:
 80061f2:	4402      	add	r2, r0
 80061f4:	4603      	mov	r3, r0
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d100      	bne.n	80061fc <memset+0xa>
 80061fa:	4770      	bx	lr
 80061fc:	f803 1b01 	strb.w	r1, [r3], #1
 8006200:	e7f9      	b.n	80061f6 <memset+0x4>
	...

08006204 <_init>:
 8006204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006206:	bf00      	nop
 8006208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800620a:	bc08      	pop	{r3}
 800620c:	469e      	mov	lr, r3
 800620e:	4770      	bx	lr

08006210 <_fini>:
 8006210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006212:	bf00      	nop
 8006214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006216:	bc08      	pop	{r3}
 8006218:	469e      	mov	lr, r3
 800621a:	4770      	bx	lr
