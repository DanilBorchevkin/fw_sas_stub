
fw_sas_stub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800568c  0800568c  0001568c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057a0  080057a0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080057a0  080057a0  000157a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057a8  080057a8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057a8  080057a8  000157a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057ac  080057ac  000157ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080057b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005340  20000010  080057c0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005350  080057c0  00025350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018287  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000034d3  00000000  00000000  000382c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001550  00000000  00000000  0003b7a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001398  00000000  00000000  0003ccf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cc2e  00000000  00000000  0003e088  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011589  00000000  00000000  0005acb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b1996  00000000  00000000  0006c23f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011dbd5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005748  00000000  00000000  0011dc50  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00000021  00000000  00000000  00123398  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005674 	.word	0x08005674

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005674 	.word	0x08005674

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	; (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	; (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000002c 	.word	0x2000002c
 8000500:	20000080 	.word	0x20000080

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fafa 	bl	8000b02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f81f 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f8eb 	bl	80006ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000516:	f000 f8b9 	bl	800068c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800051a:	f000 f887 	bl	800062c <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800051e:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <main+0x44>)
 8000520:	1d3c      	adds	r4, r7, #4
 8000522:	461d      	mov	r5, r3
 8000524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000526:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000528:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800052c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	2100      	movs	r1, #0
 8000534:	4618      	mov	r0, r3
 8000536:	f002 ff2f 	bl	8003398 <osThreadCreate>
 800053a:	4602      	mov	r2, r0
 800053c:	4b03      	ldr	r3, [pc, #12]	; (800054c <main+0x48>)
 800053e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000540:	f002 ff23 	bl	800338a <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000544:	e7fe      	b.n	8000544 <main+0x40>
 8000546:	bf00      	nop
 8000548:	08005698 	.word	0x08005698
 800054c:	20005208 	.word	0x20005208

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b0a4      	sub	sp, #144	; 0x90
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800055a:	2244      	movs	r2, #68	; 0x44
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f005 f87f 	bl	8005662 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2234      	movs	r2, #52	; 0x34
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f005 f871 	bl	8005662 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000580:	f000 fda4 	bl	80010cc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000584:	4b28      	ldr	r3, [pc, #160]	; (8000628 <SystemClock_Config+0xd8>)
 8000586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800058a:	4a27      	ldr	r2, [pc, #156]	; (8000628 <SystemClock_Config+0xd8>)
 800058c:	f023 0318 	bic.w	r3, r3, #24
 8000590:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000594:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000598:	f000 fdb6 	bl	8001108 <HAL_PWREx_ControlVoltageScaling>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80005a2:	f000 f90d 	bl	80007c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005a6:	2314      	movs	r3, #20
 80005a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005aa:	2301      	movs	r3, #1
 80005ac:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005ae:	2301      	movs	r3, #1
 80005b0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80005b6:	23a0      	movs	r3, #160	; 0xa0
 80005b8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ba:	2300      	movs	r3, #0
 80005bc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 fdf6 	bl	80011b4 <HAL_RCC_OscConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005ce:	f000 f8f7 	bl	80007c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d2:	230f      	movs	r3, #15
 80005d4:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005d6:	2300      	movs	r3, #0
 80005d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005ea:	2101      	movs	r1, #1
 80005ec:	4618      	mov	r0, r3
 80005ee:	f001 fa47 	bl	8001a80 <HAL_RCC_ClockConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80005f8:	f000 f8e2 	bl	80007c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80005fc:	2303      	movs	r3, #3
 80005fe:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000600:	2300      	movs	r3, #0
 8000602:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000604:	2300      	movs	r3, #0
 8000606:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	4618      	mov	r0, r3
 800060c:	f001 fc6e 	bl	8001eec <HAL_RCCEx_PeriphCLKConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000616:	f000 f8d3 	bl	80007c0 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800061a:	f001 fded 	bl	80021f8 <HAL_RCCEx_EnableMSIPLLMode>
}
 800061e:	bf00      	nop
 8000620:	3790      	adds	r7, #144	; 0x90
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40021000 	.word	0x40021000

0800062c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000630:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_USART1_UART_Init+0x58>)
 8000632:	4a15      	ldr	r2, [pc, #84]	; (8000688 <MX_USART1_UART_Init+0x5c>)
 8000634:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <MX_USART1_UART_Init+0x58>)
 8000638:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 800063c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_USART1_UART_Init+0x58>)
 8000640:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000644:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_USART1_UART_Init+0x58>)
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800064c:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <MX_USART1_UART_Init+0x58>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_USART1_UART_Init+0x58>)
 8000654:	220c      	movs	r2, #12
 8000656:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000658:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <MX_USART1_UART_Init+0x58>)
 800065a:	2200      	movs	r2, #0
 800065c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_USART1_UART_Init+0x58>)
 8000660:	2200      	movs	r2, #0
 8000662:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <MX_USART1_UART_Init+0x58>)
 8000666:	2200      	movs	r2, #0
 8000668:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_USART1_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <MX_USART1_UART_Init+0x58>)
 8000672:	f001 fffb 	bl	800266c <HAL_UART_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 800067c:	f000 f8a0 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	2000520c 	.word	0x2000520c
 8000688:	40013800 	.word	0x40013800

0800068c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 8000692:	4a15      	ldr	r2, [pc, #84]	; (80006e8 <MX_USART2_UART_Init+0x5c>)
 8000694:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000696:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 8000698:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800069c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800069e:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 80006b2:	220c      	movs	r2, #12
 80006b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 80006d0:	f001 ffcc 	bl	800266c <HAL_UART_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006da:	f000 f871 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	2000528c 	.word	0x2000528c
 80006e8:	40004400 	.word	0x40004400

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <MX_GPIO_Init+0x8c>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	4a1c      	ldr	r2, [pc, #112]	; (8000778 <MX_GPIO_Init+0x8c>)
 8000708:	f043 0304 	orr.w	r3, r3, #4
 800070c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070e:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <MX_GPIO_Init+0x8c>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	f003 0304 	and.w	r3, r3, #4
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <MX_GPIO_Init+0x8c>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	4a16      	ldr	r2, [pc, #88]	; (8000778 <MX_GPIO_Init+0x8c>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000726:	4b14      	ldr	r3, [pc, #80]	; (8000778 <MX_GPIO_Init+0x8c>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_GPIO_Init+0x8c>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	4a10      	ldr	r2, [pc, #64]	; (8000778 <MX_GPIO_Init+0x8c>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_GPIO_Init+0x8c>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2108      	movs	r1, #8
 800074e:	480b      	ldr	r0, [pc, #44]	; (800077c <MX_GPIO_Init+0x90>)
 8000750:	f000 fca4 	bl	800109c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000754:	2308      	movs	r3, #8
 8000756:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000758:	2301      	movs	r3, #1
 800075a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	2300      	movs	r3, #0
 8000762:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	4619      	mov	r1, r3
 800076a:	4804      	ldr	r0, [pc, #16]	; (800077c <MX_GPIO_Init+0x90>)
 800076c:	f000 fb24 	bl	8000db8 <HAL_GPIO_Init>

}
 8000770:	bf00      	nop
 8000772:	3720      	adds	r7, #32
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40021000 	.word	0x40021000
 800077c:	48000400 	.word	0x48000400

08000780 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  APP_Init(NULL);
 8000788:	2000      	movs	r0, #0
 800078a:	f004 fe71 	bl	8005470 <APP_Init>
  /* Infinite loop */
  osThreadTerminate(NULL);
 800078e:	2000      	movs	r0, #0
 8000790:	f002 fe4e 	bl	8003430 <osThreadTerminate>
  /* USER CODE END 5 */ 
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a04      	ldr	r2, [pc, #16]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d101      	bne.n	80007b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ae:	f000 f9c1 	bl	8000b34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40012c00 	.word	0x40012c00

080007c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
	...

080007d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <HAL_MspInit+0x4c>)
 80007d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007da:	4a10      	ldr	r2, [pc, #64]	; (800081c <HAL_MspInit+0x4c>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6613      	str	r3, [r2, #96]	; 0x60
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <HAL_MspInit+0x4c>)
 80007e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <HAL_MspInit+0x4c>)
 80007f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f2:	4a0a      	ldr	r2, [pc, #40]	; (800081c <HAL_MspInit+0x4c>)
 80007f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f8:	6593      	str	r3, [r2, #88]	; 0x58
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <HAL_MspInit+0x4c>)
 80007fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	210f      	movs	r1, #15
 800080a:	f06f 0001 	mvn.w	r0, #1
 800080e:	f000 fa67 	bl	8000ce0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40021000 	.word	0x40021000

08000820 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08c      	sub	sp, #48	; 0x30
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	f107 031c 	add.w	r3, r7, #28
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a3c      	ldr	r2, [pc, #240]	; (8000930 <HAL_UART_MspInit+0x110>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d132      	bne.n	80008a8 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000842:	4b3c      	ldr	r3, [pc, #240]	; (8000934 <HAL_UART_MspInit+0x114>)
 8000844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000846:	4a3b      	ldr	r2, [pc, #236]	; (8000934 <HAL_UART_MspInit+0x114>)
 8000848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084c:	6613      	str	r3, [r2, #96]	; 0x60
 800084e:	4b39      	ldr	r3, [pc, #228]	; (8000934 <HAL_UART_MspInit+0x114>)
 8000850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000856:	61bb      	str	r3, [r7, #24]
 8000858:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	4b36      	ldr	r3, [pc, #216]	; (8000934 <HAL_UART_MspInit+0x114>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	4a35      	ldr	r2, [pc, #212]	; (8000934 <HAL_UART_MspInit+0x114>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000866:	4b33      	ldr	r3, [pc, #204]	; (8000934 <HAL_UART_MspInit+0x114>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	617b      	str	r3, [r7, #20]
 8000870:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000872:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000880:	2303      	movs	r3, #3
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000884:	2307      	movs	r3, #7
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000892:	f000 fa91 	bl	8000db8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	2105      	movs	r1, #5
 800089a:	2025      	movs	r0, #37	; 0x25
 800089c:	f000 fa20 	bl	8000ce0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008a0:	2025      	movs	r0, #37	; 0x25
 80008a2:	f000 fa39 	bl	8000d18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008a6:	e03f      	b.n	8000928 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART2)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a22      	ldr	r2, [pc, #136]	; (8000938 <HAL_UART_MspInit+0x118>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d13a      	bne.n	8000928 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008b2:	4b20      	ldr	r3, [pc, #128]	; (8000934 <HAL_UART_MspInit+0x114>)
 80008b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008b6:	4a1f      	ldr	r2, [pc, #124]	; (8000934 <HAL_UART_MspInit+0x114>)
 80008b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008bc:	6593      	str	r3, [r2, #88]	; 0x58
 80008be:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <HAL_UART_MspInit+0x114>)
 80008c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <HAL_UART_MspInit+0x114>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	4a19      	ldr	r2, [pc, #100]	; (8000934 <HAL_UART_MspInit+0x114>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d6:	4b17      	ldr	r3, [pc, #92]	; (8000934 <HAL_UART_MspInit+0x114>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80008e2:	2304      	movs	r3, #4
 80008e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ee:	2303      	movs	r3, #3
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008f2:	2307      	movs	r3, #7
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000900:	f000 fa5a 	bl	8000db8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000904:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000912:	2303      	movs	r3, #3
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000916:	2303      	movs	r3, #3
 8000918:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000924:	f000 fa48 	bl	8000db8 <HAL_GPIO_Init>
}
 8000928:	bf00      	nop
 800092a:	3730      	adds	r7, #48	; 0x30
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40013800 	.word	0x40013800
 8000934:	40021000 	.word	0x40021000
 8000938:	40004400 	.word	0x40004400

0800093c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08c      	sub	sp, #48	; 0x30
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 800094c:	2200      	movs	r2, #0
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	2019      	movs	r0, #25
 8000952:	f000 f9c5 	bl	8000ce0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8000956:	2019      	movs	r0, #25
 8000958:	f000 f9de 	bl	8000d18 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800095c:	4b1e      	ldr	r3, [pc, #120]	; (80009d8 <HAL_InitTick+0x9c>)
 800095e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000960:	4a1d      	ldr	r2, [pc, #116]	; (80009d8 <HAL_InitTick+0x9c>)
 8000962:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000966:	6613      	str	r3, [r2, #96]	; 0x60
 8000968:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <HAL_InitTick+0x9c>)
 800096a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800096c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000974:	f107 0210 	add.w	r2, r7, #16
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4611      	mov	r1, r2
 800097e:	4618      	mov	r0, r3
 8000980:	f001 fa22 	bl	8001dc8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000984:	f001 fa0a 	bl	8001d9c <HAL_RCC_GetPCLK2Freq>
 8000988:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800098a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800098c:	4a13      	ldr	r2, [pc, #76]	; (80009dc <HAL_InitTick+0xa0>)
 800098e:	fba2 2303 	umull	r2, r3, r2, r3
 8000992:	0c9b      	lsrs	r3, r3, #18
 8000994:	3b01      	subs	r3, #1
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <HAL_InitTick+0xa4>)
 800099a:	4a12      	ldr	r2, [pc, #72]	; (80009e4 <HAL_InitTick+0xa8>)
 800099c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <HAL_InitTick+0xa4>)
 80009a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009a4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009a6:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <HAL_InitTick+0xa4>)
 80009a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009aa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <HAL_InitTick+0xa4>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <HAL_InitTick+0xa4>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80009b8:	4809      	ldr	r0, [pc, #36]	; (80009e0 <HAL_InitTick+0xa4>)
 80009ba:	f001 fc2d 	bl	8002218 <HAL_TIM_Base_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d104      	bne.n	80009ce <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80009c4:	4806      	ldr	r0, [pc, #24]	; (80009e0 <HAL_InitTick+0xa4>)
 80009c6:	f001 fc5d 	bl	8002284 <HAL_TIM_Base_Start_IT>
 80009ca:	4603      	mov	r3, r0
 80009cc:	e000      	b.n	80009d0 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3730      	adds	r7, #48	; 0x30
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40021000 	.word	0x40021000
 80009dc:	431bde83 	.word	0x431bde83
 80009e0:	2000530c 	.word	0x2000530c
 80009e4:	40012c00 	.word	0x40012c00

080009e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <HardFault_Handler+0x4>

080009fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <MemManage_Handler+0x4>

08000a02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <BusFault_Handler+0x4>

08000a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <UsageFault_Handler+0x4>

08000a0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a20:	4802      	ldr	r0, [pc, #8]	; (8000a2c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000a22:	f001 fc59 	bl	80022d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	2000530c 	.word	0x2000530c

08000a30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a34:	4802      	ldr	r0, [pc, #8]	; (8000a40 <USART1_IRQHandler+0x10>)
 8000a36:	f001 fe67 	bl	8002708 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	2000520c 	.word	0x2000520c

08000a44 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a48:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <SystemInit+0x64>)
 8000a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a4e:	4a16      	ldr	r2, [pc, #88]	; (8000aa8 <SystemInit+0x64>)
 8000a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <SystemInit+0x68>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a13      	ldr	r2, [pc, #76]	; (8000aac <SystemInit+0x68>)
 8000a5e:	f043 0301 	orr.w	r3, r3, #1
 8000a62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <SystemInit+0x68>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <SystemInit+0x68>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a0f      	ldr	r2, [pc, #60]	; (8000aac <SystemInit+0x68>)
 8000a70:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a74:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a78:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <SystemInit+0x68>)
 8000a7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a80:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a82:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <SystemInit+0x68>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a09      	ldr	r2, [pc, #36]	; (8000aac <SystemInit+0x68>)
 8000a88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a8c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a8e:	4b07      	ldr	r3, [pc, #28]	; (8000aac <SystemInit+0x68>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a94:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <SystemInit+0x64>)
 8000a96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a9a:	609a      	str	r2, [r3, #8]
#endif
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000ed00 	.word	0xe000ed00
 8000aac:	40021000 	.word	0x40021000

08000ab0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ab0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ab4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ab6:	e003      	b.n	8000ac0 <LoopCopyDataInit>

08000ab8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000aba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000abc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000abe:	3104      	adds	r1, #4

08000ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ac0:	480b      	ldr	r0, [pc, #44]	; (8000af0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ac4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ac6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ac8:	d3f6      	bcc.n	8000ab8 <CopyDataInit>
	ldr	r2, =_sbss
 8000aca:	4a0b      	ldr	r2, [pc, #44]	; (8000af8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000acc:	e002      	b.n	8000ad4 <LoopFillZerobss>

08000ace <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ace:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ad0:	f842 3b04 	str.w	r3, [r2], #4

08000ad4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <LoopForever+0x16>)
	cmp	r2, r3
 8000ad6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ad8:	d3f9      	bcc.n	8000ace <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ada:	f7ff ffb3 	bl	8000a44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ade:	f004 fd91 	bl	8005604 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ae2:	f7ff fd0f 	bl	8000504 <main>

08000ae6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ae6:	e7fe      	b.n	8000ae6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ae8:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000aec:	080057b0 	.word	0x080057b0
	ldr	r0, =_sdata
 8000af0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000af4:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000af8:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000afc:	20005350 	.word	0x20005350

08000b00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b00:	e7fe      	b.n	8000b00 <ADC1_2_IRQHandler>

08000b02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b082      	sub	sp, #8
 8000b06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b0c:	2003      	movs	r0, #3
 8000b0e:	f000 f8dc 	bl	8000cca <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b12:	2000      	movs	r0, #0
 8000b14:	f7ff ff12 	bl	800093c <HAL_InitTick>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d002      	beq.n	8000b24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	71fb      	strb	r3, [r7, #7]
 8000b22:	e001      	b.n	8000b28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b24:	f7ff fe54 	bl	80007d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b28:	79fb      	ldrb	r3, [r7, #7]
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <HAL_IncTick+0x1c>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <HAL_IncTick+0x20>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4413      	add	r3, r2
 8000b42:	4a03      	ldr	r2, [pc, #12]	; (8000b50 <HAL_IncTick+0x1c>)
 8000b44:	6013      	str	r3, [r2, #0]
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	2000534c 	.word	0x2000534c
 8000b54:	20000008 	.word	0x20000008

08000b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <HAL_GetTick+0x14>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	2000534c 	.word	0x2000534c

08000b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ba2:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	60d3      	str	r3, [r2, #12]
}
 8000ba8:	bf00      	nop
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bbc:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	0a1b      	lsrs	r3, r3, #8
 8000bc2:	f003 0307 	and.w	r3, r3, #7
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	db0b      	blt.n	8000bfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	f003 021f 	and.w	r2, r3, #31
 8000bec:	4907      	ldr	r1, [pc, #28]	; (8000c0c <__NVIC_EnableIRQ+0x38>)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	095b      	lsrs	r3, r3, #5
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000e100 	.word	0xe000e100

08000c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	db0a      	blt.n	8000c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	490c      	ldr	r1, [pc, #48]	; (8000c5c <__NVIC_SetPriority+0x4c>)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	0112      	lsls	r2, r2, #4
 8000c30:	b2d2      	uxtb	r2, r2
 8000c32:	440b      	add	r3, r1
 8000c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c38:	e00a      	b.n	8000c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4908      	ldr	r1, [pc, #32]	; (8000c60 <__NVIC_SetPriority+0x50>)
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	f003 030f 	and.w	r3, r3, #15
 8000c46:	3b04      	subs	r3, #4
 8000c48:	0112      	lsls	r2, r2, #4
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	440b      	add	r3, r1
 8000c4e:	761a      	strb	r2, [r3, #24]
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000e100 	.word	0xe000e100
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b089      	sub	sp, #36	; 0x24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	f1c3 0307 	rsb	r3, r3, #7
 8000c7e:	2b04      	cmp	r3, #4
 8000c80:	bf28      	it	cs
 8000c82:	2304      	movcs	r3, #4
 8000c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	3304      	adds	r3, #4
 8000c8a:	2b06      	cmp	r3, #6
 8000c8c:	d902      	bls.n	8000c94 <NVIC_EncodePriority+0x30>
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3b03      	subs	r3, #3
 8000c92:	e000      	b.n	8000c96 <NVIC_EncodePriority+0x32>
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	f04f 32ff 	mov.w	r2, #4294967295
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43da      	mvns	r2, r3
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cac:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb6:	43d9      	mvns	r1, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	4313      	orrs	r3, r2
         );
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3724      	adds	r7, #36	; 0x24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff ff4c 	bl	8000b70 <__NVIC_SetPriorityGrouping>
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
 8000cec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf2:	f7ff ff61 	bl	8000bb8 <__NVIC_GetPriorityGrouping>
 8000cf6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	68b9      	ldr	r1, [r7, #8]
 8000cfc:	6978      	ldr	r0, [r7, #20]
 8000cfe:	f7ff ffb1 	bl	8000c64 <NVIC_EncodePriority>
 8000d02:	4602      	mov	r2, r0
 8000d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff ff80 	bl	8000c10 <__NVIC_SetPriority>
}
 8000d10:	bf00      	nop
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff ff54 	bl	8000bd4 <__NVIC_EnableIRQ>
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d005      	beq.n	8000d58 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2204      	movs	r2, #4
 8000d50:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	73fb      	strb	r3, [r7, #15]
 8000d56:	e029      	b.n	8000dac <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f022 020e 	bic.w	r2, r2, #14
 8000d66:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f022 0201 	bic.w	r2, r2, #1
 8000d76:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7c:	f003 021c 	and.w	r2, r3, #28
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d84:	2101      	movs	r1, #1
 8000d86:	fa01 f202 	lsl.w	r2, r1, r2
 8000d8a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2201      	movs	r2, #1
 8000d90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2200      	movs	r2, #0
 8000d98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d003      	beq.n	8000dac <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	4798      	blx	r3
    }
  }
  return status;
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b087      	sub	sp, #28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc6:	e14e      	b.n	8001066 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	2101      	movs	r1, #1
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f000 8140 	beq.w	8001060 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d003      	beq.n	8000df0 <HAL_GPIO_Init+0x38>
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	2b12      	cmp	r3, #18
 8000dee:	d123      	bne.n	8000e38 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	08da      	lsrs	r2, r3, #3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3208      	adds	r2, #8
 8000df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	f003 0307 	and.w	r3, r3, #7
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	220f      	movs	r2, #15
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	691a      	ldr	r2, [r3, #16]
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	08da      	lsrs	r2, r3, #3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	3208      	adds	r2, #8
 8000e32:	6939      	ldr	r1, [r7, #16]
 8000e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	2203      	movs	r2, #3
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 0203 	and.w	r2, r3, #3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d00b      	beq.n	8000e8c <HAL_GPIO_Init+0xd4>
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d007      	beq.n	8000e8c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e80:	2b11      	cmp	r3, #17
 8000e82:	d003      	beq.n	8000e8c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b12      	cmp	r3, #18
 8000e8a:	d130      	bne.n	8000eee <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	2203      	movs	r2, #3
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	68da      	ldr	r2, [r3, #12]
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	091b      	lsrs	r3, r3, #4
 8000ed8:	f003 0201 	and.w	r2, r3, #1
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	2203      	movs	r2, #3
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	689a      	ldr	r2, [r3, #8]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f000 809a 	beq.w	8001060 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2c:	4b55      	ldr	r3, [pc, #340]	; (8001084 <HAL_GPIO_Init+0x2cc>)
 8000f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f30:	4a54      	ldr	r2, [pc, #336]	; (8001084 <HAL_GPIO_Init+0x2cc>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	6613      	str	r3, [r2, #96]	; 0x60
 8000f38:	4b52      	ldr	r3, [pc, #328]	; (8001084 <HAL_GPIO_Init+0x2cc>)
 8000f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f44:	4a50      	ldr	r2, [pc, #320]	; (8001088 <HAL_GPIO_Init+0x2d0>)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	089b      	lsrs	r3, r3, #2
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f6e:	d013      	beq.n	8000f98 <HAL_GPIO_Init+0x1e0>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a46      	ldr	r2, [pc, #280]	; (800108c <HAL_GPIO_Init+0x2d4>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d00d      	beq.n	8000f94 <HAL_GPIO_Init+0x1dc>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a45      	ldr	r2, [pc, #276]	; (8001090 <HAL_GPIO_Init+0x2d8>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d007      	beq.n	8000f90 <HAL_GPIO_Init+0x1d8>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a44      	ldr	r2, [pc, #272]	; (8001094 <HAL_GPIO_Init+0x2dc>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d101      	bne.n	8000f8c <HAL_GPIO_Init+0x1d4>
 8000f88:	2303      	movs	r3, #3
 8000f8a:	e006      	b.n	8000f9a <HAL_GPIO_Init+0x1e2>
 8000f8c:	2307      	movs	r3, #7
 8000f8e:	e004      	b.n	8000f9a <HAL_GPIO_Init+0x1e2>
 8000f90:	2302      	movs	r3, #2
 8000f92:	e002      	b.n	8000f9a <HAL_GPIO_Init+0x1e2>
 8000f94:	2301      	movs	r3, #1
 8000f96:	e000      	b.n	8000f9a <HAL_GPIO_Init+0x1e2>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	f002 0203 	and.w	r2, r2, #3
 8000fa0:	0092      	lsls	r2, r2, #2
 8000fa2:	4093      	lsls	r3, r2
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000faa:	4937      	ldr	r1, [pc, #220]	; (8001088 <HAL_GPIO_Init+0x2d0>)
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	089b      	lsrs	r3, r3, #2
 8000fb0:	3302      	adds	r3, #2
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fb8:	4b37      	ldr	r3, [pc, #220]	; (8001098 <HAL_GPIO_Init+0x2e0>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d003      	beq.n	8000fdc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fdc:	4a2e      	ldr	r2, [pc, #184]	; (8001098 <HAL_GPIO_Init+0x2e0>)
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000fe2:	4b2d      	ldr	r3, [pc, #180]	; (8001098 <HAL_GPIO_Init+0x2e0>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	43db      	mvns	r3, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001006:	4a24      	ldr	r2, [pc, #144]	; (8001098 <HAL_GPIO_Init+0x2e0>)
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800100c:	4b22      	ldr	r3, [pc, #136]	; (8001098 <HAL_GPIO_Init+0x2e0>)
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	43db      	mvns	r3, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001030:	4a19      	ldr	r2, [pc, #100]	; (8001098 <HAL_GPIO_Init+0x2e0>)
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001036:	4b18      	ldr	r3, [pc, #96]	; (8001098 <HAL_GPIO_Init+0x2e0>)
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	43db      	mvns	r3, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4313      	orrs	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800105a:	4a0f      	ldr	r2, [pc, #60]	; (8001098 <HAL_GPIO_Init+0x2e0>)
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	3301      	adds	r3, #1
 8001064:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	fa22 f303 	lsr.w	r3, r2, r3
 8001070:	2b00      	cmp	r3, #0
 8001072:	f47f aea9 	bne.w	8000dc8 <HAL_GPIO_Init+0x10>
  }
}
 8001076:	bf00      	nop
 8001078:	371c      	adds	r7, #28
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	40021000 	.word	0x40021000
 8001088:	40010000 	.word	0x40010000
 800108c:	48000400 	.word	0x48000400
 8001090:	48000800 	.word	0x48000800
 8001094:	48000c00 	.word	0x48000c00
 8001098:	40010400 	.word	0x40010400

0800109c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	807b      	strh	r3, [r7, #2]
 80010a8:	4613      	mov	r3, r2
 80010aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010ac:	787b      	ldrb	r3, [r7, #1]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010b2:	887a      	ldrh	r2, [r7, #2]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010b8:	e002      	b.n	80010c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010ba:	887a      	ldrh	r2, [r7, #2]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80010d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	40007000 	.word	0x40007000

080010ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <HAL_PWREx_GetVoltageRange+0x18>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40007000 	.word	0x40007000

08001108 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001116:	d130      	bne.n	800117a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001118:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001124:	d038      	beq.n	8001198 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001126:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800112e:	4a1e      	ldr	r2, [pc, #120]	; (80011a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001130:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001134:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001136:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2232      	movs	r2, #50	; 0x32
 800113c:	fb02 f303 	mul.w	r3, r2, r3
 8001140:	4a1b      	ldr	r2, [pc, #108]	; (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001142:	fba2 2303 	umull	r2, r3, r2, r3
 8001146:	0c9b      	lsrs	r3, r3, #18
 8001148:	3301      	adds	r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800114c:	e002      	b.n	8001154 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	3b01      	subs	r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001154:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800115c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001160:	d102      	bne.n	8001168 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1f2      	bne.n	800114e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800116a:	695b      	ldr	r3, [r3, #20]
 800116c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001174:	d110      	bne.n	8001198 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e00f      	b.n	800119a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001186:	d007      	beq.n	8001198 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001188:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001190:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001192:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001196:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40007000 	.word	0x40007000
 80011ac:	20000000 	.word	0x20000000
 80011b0:	431bde83 	.word	0x431bde83

080011b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	; 0x28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d102      	bne.n	80011c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	f000 bc56 	b.w	8001a74 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011c8:	4ba1      	ldr	r3, [pc, #644]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f003 030c 	and.w	r3, r3, #12
 80011d0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011d2:	4b9f      	ldr	r3, [pc, #636]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	f003 0303 	and.w	r3, r3, #3
 80011da:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0310 	and.w	r3, r3, #16
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f000 80e6 	beq.w	80013b6 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011ea:	6a3b      	ldr	r3, [r7, #32]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d007      	beq.n	8001200 <HAL_RCC_OscConfig+0x4c>
 80011f0:	6a3b      	ldr	r3, [r7, #32]
 80011f2:	2b0c      	cmp	r3, #12
 80011f4:	f040 808d 	bne.w	8001312 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	f040 8089 	bne.w	8001312 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001200:	4b93      	ldr	r3, [pc, #588]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d006      	beq.n	800121a <HAL_RCC_OscConfig+0x66>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69db      	ldr	r3, [r3, #28]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d102      	bne.n	800121a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	f000 bc2d 	b.w	8001a74 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800121e:	4b8c      	ldr	r3, [pc, #560]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0308 	and.w	r3, r3, #8
 8001226:	2b00      	cmp	r3, #0
 8001228:	d004      	beq.n	8001234 <HAL_RCC_OscConfig+0x80>
 800122a:	4b89      	ldr	r3, [pc, #548]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001232:	e005      	b.n	8001240 <HAL_RCC_OscConfig+0x8c>
 8001234:	4b86      	ldr	r3, [pc, #536]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 8001236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800123a:	091b      	lsrs	r3, r3, #4
 800123c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001240:	4293      	cmp	r3, r2
 8001242:	d224      	bcs.n	800128e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001248:	4618      	mov	r0, r3
 800124a:	f000 fdef 	bl	8001e2c <RCC_SetFlashLatencyFromMSIRange>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d002      	beq.n	800125a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	f000 bc0d 	b.w	8001a74 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800125a:	4b7d      	ldr	r3, [pc, #500]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a7c      	ldr	r2, [pc, #496]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 8001260:	f043 0308 	orr.w	r3, r3, #8
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	4b7a      	ldr	r3, [pc, #488]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001272:	4977      	ldr	r1, [pc, #476]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 8001274:	4313      	orrs	r3, r2
 8001276:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001278:	4b75      	ldr	r3, [pc, #468]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a1b      	ldr	r3, [r3, #32]
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	4972      	ldr	r1, [pc, #456]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 8001288:	4313      	orrs	r3, r2
 800128a:	604b      	str	r3, [r1, #4]
 800128c:	e025      	b.n	80012da <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800128e:	4b70      	ldr	r3, [pc, #448]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a6f      	ldr	r2, [pc, #444]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 8001294:	f043 0308 	orr.w	r3, r3, #8
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	4b6d      	ldr	r3, [pc, #436]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a6:	496a      	ldr	r1, [pc, #424]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ac:	4b68      	ldr	r3, [pc, #416]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	4965      	ldr	r1, [pc, #404]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 80012bc:	4313      	orrs	r3, r2
 80012be:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012c0:	6a3b      	ldr	r3, [r7, #32]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d109      	bne.n	80012da <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 fdae 	bl	8001e2c <RCC_SetFlashLatencyFromMSIRange>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e3cc      	b.n	8001a74 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012da:	f000 fcb3 	bl	8001c44 <HAL_RCC_GetSysClockFreq>
 80012de:	4601      	mov	r1, r0
 80012e0:	4b5b      	ldr	r3, [pc, #364]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	091b      	lsrs	r3, r3, #4
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	4a5a      	ldr	r2, [pc, #360]	; (8001454 <HAL_RCC_OscConfig+0x2a0>)
 80012ec:	5cd3      	ldrb	r3, [r2, r3]
 80012ee:	f003 031f 	and.w	r3, r3, #31
 80012f2:	fa21 f303 	lsr.w	r3, r1, r3
 80012f6:	4a58      	ldr	r2, [pc, #352]	; (8001458 <HAL_RCC_OscConfig+0x2a4>)
 80012f8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012fa:	4b58      	ldr	r3, [pc, #352]	; (800145c <HAL_RCC_OscConfig+0x2a8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fb1c 	bl	800093c <HAL_InitTick>
 8001304:	4603      	mov	r3, r0
 8001306:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001308:	7dfb      	ldrb	r3, [r7, #23]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d052      	beq.n	80013b4 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800130e:	7dfb      	ldrb	r3, [r7, #23]
 8001310:	e3b0      	b.n	8001a74 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d032      	beq.n	8001380 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800131a:	4b4d      	ldr	r3, [pc, #308]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a4c      	ldr	r2, [pc, #304]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001326:	f7ff fc17 	bl	8000b58 <HAL_GetTick>
 800132a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800132c:	e008      	b.n	8001340 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800132e:	f7ff fc13 	bl	8000b58 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e399      	b.n	8001a74 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001340:	4b43      	ldr	r3, [pc, #268]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0f0      	beq.n	800132e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800134c:	4b40      	ldr	r3, [pc, #256]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a3f      	ldr	r2, [pc, #252]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 8001352:	f043 0308 	orr.w	r3, r3, #8
 8001356:	6013      	str	r3, [r2, #0]
 8001358:	4b3d      	ldr	r3, [pc, #244]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001364:	493a      	ldr	r1, [pc, #232]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 8001366:	4313      	orrs	r3, r2
 8001368:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800136a:	4b39      	ldr	r3, [pc, #228]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	021b      	lsls	r3, r3, #8
 8001378:	4935      	ldr	r1, [pc, #212]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 800137a:	4313      	orrs	r3, r2
 800137c:	604b      	str	r3, [r1, #4]
 800137e:	e01a      	b.n	80013b6 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001380:	4b33      	ldr	r3, [pc, #204]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a32      	ldr	r2, [pc, #200]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 8001386:	f023 0301 	bic.w	r3, r3, #1
 800138a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800138c:	f7ff fbe4 	bl	8000b58 <HAL_GetTick>
 8001390:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001394:	f7ff fbe0 	bl	8000b58 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e366      	b.n	8001a74 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013a6:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f0      	bne.n	8001394 <HAL_RCC_OscConfig+0x1e0>
 80013b2:	e000      	b.n	80013b6 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d073      	beq.n	80014aa <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013c2:	6a3b      	ldr	r3, [r7, #32]
 80013c4:	2b08      	cmp	r3, #8
 80013c6:	d005      	beq.n	80013d4 <HAL_RCC_OscConfig+0x220>
 80013c8:	6a3b      	ldr	r3, [r7, #32]
 80013ca:	2b0c      	cmp	r3, #12
 80013cc:	d10e      	bne.n	80013ec <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	2b03      	cmp	r3, #3
 80013d2:	d10b      	bne.n	80013ec <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d4:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d063      	beq.n	80014a8 <HAL_RCC_OscConfig+0x2f4>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d15f      	bne.n	80014a8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e343      	b.n	8001a74 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f4:	d106      	bne.n	8001404 <HAL_RCC_OscConfig+0x250>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a15      	ldr	r2, [pc, #84]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 80013fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	e01d      	b.n	8001440 <HAL_RCC_OscConfig+0x28c>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800140c:	d10c      	bne.n	8001428 <HAL_RCC_OscConfig+0x274>
 800140e:	4b10      	ldr	r3, [pc, #64]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a0f      	ldr	r2, [pc, #60]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 8001414:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a0c      	ldr	r2, [pc, #48]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 8001420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	e00b      	b.n	8001440 <HAL_RCC_OscConfig+0x28c>
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a08      	ldr	r2, [pc, #32]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 800142e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001432:	6013      	str	r3, [r2, #0]
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a05      	ldr	r2, [pc, #20]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 800143a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800143e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d01b      	beq.n	8001480 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001448:	f7ff fb86 	bl	8000b58 <HAL_GetTick>
 800144c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800144e:	e010      	b.n	8001472 <HAL_RCC_OscConfig+0x2be>
 8001450:	40021000 	.word	0x40021000
 8001454:	08005758 	.word	0x08005758
 8001458:	20000000 	.word	0x20000000
 800145c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001460:	f7ff fb7a 	bl	8000b58 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b64      	cmp	r3, #100	; 0x64
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e300      	b.n	8001a74 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001472:	4ba0      	ldr	r3, [pc, #640]	; (80016f4 <HAL_RCC_OscConfig+0x540>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f0      	beq.n	8001460 <HAL_RCC_OscConfig+0x2ac>
 800147e:	e014      	b.n	80014aa <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001480:	f7ff fb6a 	bl	8000b58 <HAL_GetTick>
 8001484:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001488:	f7ff fb66 	bl	8000b58 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b64      	cmp	r3, #100	; 0x64
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e2ec      	b.n	8001a74 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800149a:	4b96      	ldr	r3, [pc, #600]	; (80016f4 <HAL_RCC_OscConfig+0x540>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f0      	bne.n	8001488 <HAL_RCC_OscConfig+0x2d4>
 80014a6:	e000      	b.n	80014aa <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d060      	beq.n	8001578 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014b6:	6a3b      	ldr	r3, [r7, #32]
 80014b8:	2b04      	cmp	r3, #4
 80014ba:	d005      	beq.n	80014c8 <HAL_RCC_OscConfig+0x314>
 80014bc:	6a3b      	ldr	r3, [r7, #32]
 80014be:	2b0c      	cmp	r3, #12
 80014c0:	d119      	bne.n	80014f6 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d116      	bne.n	80014f6 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014c8:	4b8a      	ldr	r3, [pc, #552]	; (80016f4 <HAL_RCC_OscConfig+0x540>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d005      	beq.n	80014e0 <HAL_RCC_OscConfig+0x32c>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e2c9      	b.n	8001a74 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e0:	4b84      	ldr	r3, [pc, #528]	; (80016f4 <HAL_RCC_OscConfig+0x540>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	061b      	lsls	r3, r3, #24
 80014ee:	4981      	ldr	r1, [pc, #516]	; (80016f4 <HAL_RCC_OscConfig+0x540>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014f4:	e040      	b.n	8001578 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d023      	beq.n	8001546 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014fe:	4b7d      	ldr	r3, [pc, #500]	; (80016f4 <HAL_RCC_OscConfig+0x540>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a7c      	ldr	r2, [pc, #496]	; (80016f4 <HAL_RCC_OscConfig+0x540>)
 8001504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150a:	f7ff fb25 	bl	8000b58 <HAL_GetTick>
 800150e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001512:	f7ff fb21 	bl	8000b58 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e2a7      	b.n	8001a74 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001524:	4b73      	ldr	r3, [pc, #460]	; (80016f4 <HAL_RCC_OscConfig+0x540>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0f0      	beq.n	8001512 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001530:	4b70      	ldr	r3, [pc, #448]	; (80016f4 <HAL_RCC_OscConfig+0x540>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	061b      	lsls	r3, r3, #24
 800153e:	496d      	ldr	r1, [pc, #436]	; (80016f4 <HAL_RCC_OscConfig+0x540>)
 8001540:	4313      	orrs	r3, r2
 8001542:	604b      	str	r3, [r1, #4]
 8001544:	e018      	b.n	8001578 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001546:	4b6b      	ldr	r3, [pc, #428]	; (80016f4 <HAL_RCC_OscConfig+0x540>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a6a      	ldr	r2, [pc, #424]	; (80016f4 <HAL_RCC_OscConfig+0x540>)
 800154c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001550:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001552:	f7ff fb01 	bl	8000b58 <HAL_GetTick>
 8001556:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800155a:	f7ff fafd 	bl	8000b58 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e283      	b.n	8001a74 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800156c:	4b61      	ldr	r3, [pc, #388]	; (80016f4 <HAL_RCC_OscConfig+0x540>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1f0      	bne.n	800155a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0308 	and.w	r3, r3, #8
 8001580:	2b00      	cmp	r3, #0
 8001582:	d07f      	beq.n	8001684 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	695b      	ldr	r3, [r3, #20]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d05f      	beq.n	800164c <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800158c:	4b59      	ldr	r3, [pc, #356]	; (80016f4 <HAL_RCC_OscConfig+0x540>)
 800158e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001592:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	699a      	ldr	r2, [r3, #24]
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	f003 0310 	and.w	r3, r3, #16
 800159e:	429a      	cmp	r2, r3
 80015a0:	d037      	beq.n	8001612 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d006      	beq.n	80015ba <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e25c      	b.n	8001a74 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d01b      	beq.n	80015fc <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 80015c4:	4b4b      	ldr	r3, [pc, #300]	; (80016f4 <HAL_RCC_OscConfig+0x540>)
 80015c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ca:	4a4a      	ldr	r2, [pc, #296]	; (80016f4 <HAL_RCC_OscConfig+0x540>)
 80015cc:	f023 0301 	bic.w	r3, r3, #1
 80015d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80015d4:	f7ff fac0 	bl	8000b58 <HAL_GetTick>
 80015d8:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015dc:	f7ff fabc 	bl	8000b58 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b11      	cmp	r3, #17
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e242      	b.n	8001a74 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015ee:	4b41      	ldr	r3, [pc, #260]	; (80016f4 <HAL_RCC_OscConfig+0x540>)
 80015f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1ef      	bne.n	80015dc <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80015fc:	4b3d      	ldr	r3, [pc, #244]	; (80016f4 <HAL_RCC_OscConfig+0x540>)
 80015fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001602:	f023 0210 	bic.w	r2, r3, #16
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	493a      	ldr	r1, [pc, #232]	; (80016f4 <HAL_RCC_OscConfig+0x540>)
 800160c:	4313      	orrs	r3, r2
 800160e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001612:	4b38      	ldr	r3, [pc, #224]	; (80016f4 <HAL_RCC_OscConfig+0x540>)
 8001614:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001618:	4a36      	ldr	r2, [pc, #216]	; (80016f4 <HAL_RCC_OscConfig+0x540>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001622:	f7ff fa99 	bl	8000b58 <HAL_GetTick>
 8001626:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800162a:	f7ff fa95 	bl	8000b58 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b11      	cmp	r3, #17
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e21b      	b.n	8001a74 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800163c:	4b2d      	ldr	r3, [pc, #180]	; (80016f4 <HAL_RCC_OscConfig+0x540>)
 800163e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0ef      	beq.n	800162a <HAL_RCC_OscConfig+0x476>
 800164a:	e01b      	b.n	8001684 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800164c:	4b29      	ldr	r3, [pc, #164]	; (80016f4 <HAL_RCC_OscConfig+0x540>)
 800164e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001652:	4a28      	ldr	r2, [pc, #160]	; (80016f4 <HAL_RCC_OscConfig+0x540>)
 8001654:	f023 0301 	bic.w	r3, r3, #1
 8001658:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165c:	f7ff fa7c 	bl	8000b58 <HAL_GetTick>
 8001660:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001664:	f7ff fa78 	bl	8000b58 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b11      	cmp	r3, #17
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e1fe      	b.n	8001a74 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001676:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <HAL_RCC_OscConfig+0x540>)
 8001678:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1ef      	bne.n	8001664 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 80c1 	beq.w	8001814 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001698:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <HAL_RCC_OscConfig+0x540>)
 800169a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d10e      	bne.n	80016c2 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a4:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <HAL_RCC_OscConfig+0x540>)
 80016a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a8:	4a12      	ldr	r2, [pc, #72]	; (80016f4 <HAL_RCC_OscConfig+0x540>)
 80016aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ae:	6593      	str	r3, [r2, #88]	; 0x58
 80016b0:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <HAL_RCC_OscConfig+0x540>)
 80016b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016bc:	2301      	movs	r3, #1
 80016be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c2:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <HAL_RCC_OscConfig+0x544>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d11c      	bne.n	8001708 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016ce:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <HAL_RCC_OscConfig+0x544>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a09      	ldr	r2, [pc, #36]	; (80016f8 <HAL_RCC_OscConfig+0x544>)
 80016d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016da:	f7ff fa3d 	bl	8000b58 <HAL_GetTick>
 80016de:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016e0:	e00c      	b.n	80016fc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e2:	f7ff fa39 	bl	8000b58 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d905      	bls.n	80016fc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e1bf      	b.n	8001a74 <HAL_RCC_OscConfig+0x8c0>
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016fc:	4bb1      	ldr	r3, [pc, #708]	; (80019c4 <HAL_RCC_OscConfig+0x810>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0ec      	beq.n	80016e2 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b00      	cmp	r3, #0
 8001712:	d02c      	beq.n	800176e <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001714:	4bac      	ldr	r3, [pc, #688]	; (80019c8 <HAL_RCC_OscConfig+0x814>)
 8001716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001726:	49a8      	ldr	r1, [pc, #672]	; (80019c8 <HAL_RCC_OscConfig+0x814>)
 8001728:	4313      	orrs	r3, r2
 800172a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	2b00      	cmp	r3, #0
 8001738:	d010      	beq.n	800175c <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800173a:	4ba3      	ldr	r3, [pc, #652]	; (80019c8 <HAL_RCC_OscConfig+0x814>)
 800173c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001740:	4aa1      	ldr	r2, [pc, #644]	; (80019c8 <HAL_RCC_OscConfig+0x814>)
 8001742:	f043 0304 	orr.w	r3, r3, #4
 8001746:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800174a:	4b9f      	ldr	r3, [pc, #636]	; (80019c8 <HAL_RCC_OscConfig+0x814>)
 800174c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001750:	4a9d      	ldr	r2, [pc, #628]	; (80019c8 <HAL_RCC_OscConfig+0x814>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800175a:	e018      	b.n	800178e <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800175c:	4b9a      	ldr	r3, [pc, #616]	; (80019c8 <HAL_RCC_OscConfig+0x814>)
 800175e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001762:	4a99      	ldr	r2, [pc, #612]	; (80019c8 <HAL_RCC_OscConfig+0x814>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800176c:	e00f      	b.n	800178e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800176e:	4b96      	ldr	r3, [pc, #600]	; (80019c8 <HAL_RCC_OscConfig+0x814>)
 8001770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001774:	4a94      	ldr	r2, [pc, #592]	; (80019c8 <HAL_RCC_OscConfig+0x814>)
 8001776:	f023 0301 	bic.w	r3, r3, #1
 800177a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800177e:	4b92      	ldr	r3, [pc, #584]	; (80019c8 <HAL_RCC_OscConfig+0x814>)
 8001780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001784:	4a90      	ldr	r2, [pc, #576]	; (80019c8 <HAL_RCC_OscConfig+0x814>)
 8001786:	f023 0304 	bic.w	r3, r3, #4
 800178a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d016      	beq.n	80017c4 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001796:	f7ff f9df 	bl	8000b58 <HAL_GetTick>
 800179a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800179c:	e00a      	b.n	80017b4 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800179e:	f7ff f9db 	bl	8000b58 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e15f      	b.n	8001a74 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017b4:	4b84      	ldr	r3, [pc, #528]	; (80019c8 <HAL_RCC_OscConfig+0x814>)
 80017b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0ed      	beq.n	800179e <HAL_RCC_OscConfig+0x5ea>
 80017c2:	e01d      	b.n	8001800 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c4:	f7ff f9c8 	bl	8000b58 <HAL_GetTick>
 80017c8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017ca:	e00a      	b.n	80017e2 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017cc:	f7ff f9c4 	bl	8000b58 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017da:	4293      	cmp	r3, r2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e148      	b.n	8001a74 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017e2:	4b79      	ldr	r3, [pc, #484]	; (80019c8 <HAL_RCC_OscConfig+0x814>)
 80017e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1ed      	bne.n	80017cc <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80017f0:	4b75      	ldr	r3, [pc, #468]	; (80019c8 <HAL_RCC_OscConfig+0x814>)
 80017f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f6:	4a74      	ldr	r2, [pc, #464]	; (80019c8 <HAL_RCC_OscConfig+0x814>)
 80017f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001800:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001804:	2b01      	cmp	r3, #1
 8001806:	d105      	bne.n	8001814 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001808:	4b6f      	ldr	r3, [pc, #444]	; (80019c8 <HAL_RCC_OscConfig+0x814>)
 800180a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180c:	4a6e      	ldr	r2, [pc, #440]	; (80019c8 <HAL_RCC_OscConfig+0x814>)
 800180e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001812:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0320 	and.w	r3, r3, #32
 800181c:	2b00      	cmp	r3, #0
 800181e:	d03c      	beq.n	800189a <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001824:	2b00      	cmp	r3, #0
 8001826:	d01c      	beq.n	8001862 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001828:	4b67      	ldr	r3, [pc, #412]	; (80019c8 <HAL_RCC_OscConfig+0x814>)
 800182a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800182e:	4a66      	ldr	r2, [pc, #408]	; (80019c8 <HAL_RCC_OscConfig+0x814>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001838:	f7ff f98e 	bl	8000b58 <HAL_GetTick>
 800183c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001840:	f7ff f98a 	bl	8000b58 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e110      	b.n	8001a74 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001852:	4b5d      	ldr	r3, [pc, #372]	; (80019c8 <HAL_RCC_OscConfig+0x814>)
 8001854:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0ef      	beq.n	8001840 <HAL_RCC_OscConfig+0x68c>
 8001860:	e01b      	b.n	800189a <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001862:	4b59      	ldr	r3, [pc, #356]	; (80019c8 <HAL_RCC_OscConfig+0x814>)
 8001864:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001868:	4a57      	ldr	r2, [pc, #348]	; (80019c8 <HAL_RCC_OscConfig+0x814>)
 800186a:	f023 0301 	bic.w	r3, r3, #1
 800186e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001872:	f7ff f971 	bl	8000b58 <HAL_GetTick>
 8001876:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800187a:	f7ff f96d 	bl	8000b58 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e0f3      	b.n	8001a74 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800188c:	4b4e      	ldr	r3, [pc, #312]	; (80019c8 <HAL_RCC_OscConfig+0x814>)
 800188e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1ef      	bne.n	800187a <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 80e7 	beq.w	8001a72 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	f040 80b7 	bne.w	8001a1c <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018ae:	4b46      	ldr	r3, [pc, #280]	; (80019c8 <HAL_RCC_OscConfig+0x814>)
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f003 0203 	and.w	r2, r3, #3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	429a      	cmp	r2, r3
 80018c0:	d124      	bne.n	800190c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018cc:	3b01      	subs	r3, #1
 80018ce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d11b      	bne.n	800190c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018de:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d113      	bne.n	800190c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ee:	085b      	lsrs	r3, r3, #1
 80018f0:	3b01      	subs	r3, #1
 80018f2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d109      	bne.n	800190c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	085b      	lsrs	r3, r3, #1
 8001904:	3b01      	subs	r3, #1
 8001906:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001908:	429a      	cmp	r2, r3
 800190a:	d061      	beq.n	80019d0 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800190c:	6a3b      	ldr	r3, [r7, #32]
 800190e:	2b0c      	cmp	r3, #12
 8001910:	d056      	beq.n	80019c0 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001912:	4b2d      	ldr	r3, [pc, #180]	; (80019c8 <HAL_RCC_OscConfig+0x814>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a2c      	ldr	r2, [pc, #176]	; (80019c8 <HAL_RCC_OscConfig+0x814>)
 8001918:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800191c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800191e:	f7ff f91b 	bl	8000b58 <HAL_GetTick>
 8001922:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001926:	f7ff f917 	bl	8000b58 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e09d      	b.n	8001a74 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001938:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <HAL_RCC_OscConfig+0x814>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1f0      	bne.n	8001926 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001944:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <HAL_RCC_OscConfig+0x814>)
 8001946:	68da      	ldr	r2, [r3, #12]
 8001948:	4b20      	ldr	r3, [pc, #128]	; (80019cc <HAL_RCC_OscConfig+0x818>)
 800194a:	4013      	ands	r3, r2
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001954:	3a01      	subs	r2, #1
 8001956:	0112      	lsls	r2, r2, #4
 8001958:	4311      	orrs	r1, r2
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800195e:	0212      	lsls	r2, r2, #8
 8001960:	4311      	orrs	r1, r2
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001966:	0852      	lsrs	r2, r2, #1
 8001968:	3a01      	subs	r2, #1
 800196a:	0552      	lsls	r2, r2, #21
 800196c:	4311      	orrs	r1, r2
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001972:	0852      	lsrs	r2, r2, #1
 8001974:	3a01      	subs	r2, #1
 8001976:	0652      	lsls	r2, r2, #25
 8001978:	430a      	orrs	r2, r1
 800197a:	4913      	ldr	r1, [pc, #76]	; (80019c8 <HAL_RCC_OscConfig+0x814>)
 800197c:	4313      	orrs	r3, r2
 800197e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <HAL_RCC_OscConfig+0x814>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a10      	ldr	r2, [pc, #64]	; (80019c8 <HAL_RCC_OscConfig+0x814>)
 8001986:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800198a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800198c:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <HAL_RCC_OscConfig+0x814>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	4a0d      	ldr	r2, [pc, #52]	; (80019c8 <HAL_RCC_OscConfig+0x814>)
 8001992:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001996:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001998:	f7ff f8de 	bl	8000b58 <HAL_GetTick>
 800199c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a0:	f7ff f8da 	bl	8000b58 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e060      	b.n	8001a74 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b2:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <HAL_RCC_OscConfig+0x814>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0f0      	beq.n	80019a0 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019be:	e058      	b.n	8001a72 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e057      	b.n	8001a74 <HAL_RCC_OscConfig+0x8c0>
 80019c4:	40007000 	.word	0x40007000
 80019c8:	40021000 	.word	0x40021000
 80019cc:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d0:	4b2a      	ldr	r3, [pc, #168]	; (8001a7c <HAL_RCC_OscConfig+0x8c8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d14a      	bne.n	8001a72 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019dc:	4b27      	ldr	r3, [pc, #156]	; (8001a7c <HAL_RCC_OscConfig+0x8c8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a26      	ldr	r2, [pc, #152]	; (8001a7c <HAL_RCC_OscConfig+0x8c8>)
 80019e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019e8:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <HAL_RCC_OscConfig+0x8c8>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	4a23      	ldr	r2, [pc, #140]	; (8001a7c <HAL_RCC_OscConfig+0x8c8>)
 80019ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019f4:	f7ff f8b0 	bl	8000b58 <HAL_GetTick>
 80019f8:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019fc:	f7ff f8ac 	bl	8000b58 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e032      	b.n	8001a74 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <HAL_RCC_OscConfig+0x8c8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0f0      	beq.n	80019fc <HAL_RCC_OscConfig+0x848>
 8001a1a:	e02a      	b.n	8001a72 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	2b0c      	cmp	r3, #12
 8001a20:	d025      	beq.n	8001a6e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a22:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <HAL_RCC_OscConfig+0x8c8>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a15      	ldr	r2, [pc, #84]	; (8001a7c <HAL_RCC_OscConfig+0x8c8>)
 8001a28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a2c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a2e:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <HAL_RCC_OscConfig+0x8c8>)
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	4a12      	ldr	r2, [pc, #72]	; (8001a7c <HAL_RCC_OscConfig+0x8c8>)
 8001a34:	f023 0303 	bic.w	r3, r3, #3
 8001a38:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001a3a:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <HAL_RCC_OscConfig+0x8c8>)
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	4a0f      	ldr	r2, [pc, #60]	; (8001a7c <HAL_RCC_OscConfig+0x8c8>)
 8001a40:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a44:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a46:	f7ff f887 	bl	8000b58 <HAL_GetTick>
 8001a4a:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4e:	f7ff f883 	bl	8000b58 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e009      	b.n	8001a74 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_RCC_OscConfig+0x8c8>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1f0      	bne.n	8001a4e <HAL_RCC_OscConfig+0x89a>
 8001a6c:	e001      	b.n	8001a72 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e000      	b.n	8001a74 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3728      	adds	r7, #40	; 0x28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40021000 	.word	0x40021000

08001a80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e0c8      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a94:	4b66      	ldr	r3, [pc, #408]	; (8001c30 <HAL_RCC_ClockConfig+0x1b0>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d910      	bls.n	8001ac4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa2:	4b63      	ldr	r3, [pc, #396]	; (8001c30 <HAL_RCC_ClockConfig+0x1b0>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f023 0207 	bic.w	r2, r3, #7
 8001aaa:	4961      	ldr	r1, [pc, #388]	; (8001c30 <HAL_RCC_ClockConfig+0x1b0>)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab2:	4b5f      	ldr	r3, [pc, #380]	; (8001c30 <HAL_RCC_ClockConfig+0x1b0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d001      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e0b0      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d04c      	beq.n	8001b6a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b03      	cmp	r3, #3
 8001ad6:	d107      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad8:	4b56      	ldr	r3, [pc, #344]	; (8001c34 <HAL_RCC_ClockConfig+0x1b4>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d121      	bne.n	8001b28 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e09e      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d107      	bne.n	8001b00 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001af0:	4b50      	ldr	r3, [pc, #320]	; (8001c34 <HAL_RCC_ClockConfig+0x1b4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d115      	bne.n	8001b28 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e092      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d107      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b08:	4b4a      	ldr	r3, [pc, #296]	; (8001c34 <HAL_RCC_ClockConfig+0x1b4>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d109      	bne.n	8001b28 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e086      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b18:	4b46      	ldr	r3, [pc, #280]	; (8001c34 <HAL_RCC_ClockConfig+0x1b4>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e07e      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b28:	4b42      	ldr	r3, [pc, #264]	; (8001c34 <HAL_RCC_ClockConfig+0x1b4>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f023 0203 	bic.w	r2, r3, #3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	493f      	ldr	r1, [pc, #252]	; (8001c34 <HAL_RCC_ClockConfig+0x1b4>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b3a:	f7ff f80d 	bl	8000b58 <HAL_GetTick>
 8001b3e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b40:	e00a      	b.n	8001b58 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b42:	f7ff f809 	bl	8000b58 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e066      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b58:	4b36      	ldr	r3, [pc, #216]	; (8001c34 <HAL_RCC_ClockConfig+0x1b4>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 020c 	and.w	r2, r3, #12
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d1eb      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d008      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b76:	4b2f      	ldr	r3, [pc, #188]	; (8001c34 <HAL_RCC_ClockConfig+0x1b4>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	492c      	ldr	r1, [pc, #176]	; (8001c34 <HAL_RCC_ClockConfig+0x1b4>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b88:	4b29      	ldr	r3, [pc, #164]	; (8001c30 <HAL_RCC_ClockConfig+0x1b0>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d210      	bcs.n	8001bb8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b96:	4b26      	ldr	r3, [pc, #152]	; (8001c30 <HAL_RCC_ClockConfig+0x1b0>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f023 0207 	bic.w	r2, r3, #7
 8001b9e:	4924      	ldr	r1, [pc, #144]	; (8001c30 <HAL_RCC_ClockConfig+0x1b0>)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba6:	4b22      	ldr	r3, [pc, #136]	; (8001c30 <HAL_RCC_ClockConfig+0x1b0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d001      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e036      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d008      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc4:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <HAL_RCC_ClockConfig+0x1b4>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	4918      	ldr	r1, [pc, #96]	; (8001c34 <HAL_RCC_ClockConfig+0x1b4>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d009      	beq.n	8001bf6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001be2:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <HAL_RCC_ClockConfig+0x1b4>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	4910      	ldr	r1, [pc, #64]	; (8001c34 <HAL_RCC_ClockConfig+0x1b4>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bf6:	f000 f825 	bl	8001c44 <HAL_RCC_GetSysClockFreq>
 8001bfa:	4601      	mov	r1, r0
 8001bfc:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <HAL_RCC_ClockConfig+0x1b4>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	091b      	lsrs	r3, r3, #4
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	4a0c      	ldr	r2, [pc, #48]	; (8001c38 <HAL_RCC_ClockConfig+0x1b8>)
 8001c08:	5cd3      	ldrb	r3, [r2, r3]
 8001c0a:	f003 031f 	and.w	r3, r3, #31
 8001c0e:	fa21 f303 	lsr.w	r3, r1, r3
 8001c12:	4a0a      	ldr	r2, [pc, #40]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <HAL_RCC_ClockConfig+0x1c0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe fe8e 	bl	800093c <HAL_InitTick>
 8001c20:	4603      	mov	r3, r0
 8001c22:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c24:	7afb      	ldrb	r3, [r7, #11]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40022000 	.word	0x40022000
 8001c34:	40021000 	.word	0x40021000
 8001c38:	08005758 	.word	0x08005758
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	20000004 	.word	0x20000004

08001c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b089      	sub	sp, #36	; 0x24
 8001c48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c52:	4b3d      	ldr	r3, [pc, #244]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 030c 	and.w	r3, r3, #12
 8001c5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c5c:	4b3a      	ldr	r3, [pc, #232]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d005      	beq.n	8001c78 <HAL_RCC_GetSysClockFreq+0x34>
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	2b0c      	cmp	r3, #12
 8001c70:	d121      	bne.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d11e      	bne.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c78:	4b33      	ldr	r3, [pc, #204]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d107      	bne.n	8001c94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c84:	4b30      	ldr	r3, [pc, #192]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c8a:	0a1b      	lsrs	r3, r3, #8
 8001c8c:	f003 030f 	and.w	r3, r3, #15
 8001c90:	61fb      	str	r3, [r7, #28]
 8001c92:	e005      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c94:	4b2c      	ldr	r3, [pc, #176]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	091b      	lsrs	r3, r3, #4
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ca0:	4a2a      	ldr	r2, [pc, #168]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d10d      	bne.n	8001ccc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cb4:	e00a      	b.n	8001ccc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	2b04      	cmp	r3, #4
 8001cba:	d102      	bne.n	8001cc2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cbc:	4b24      	ldr	r3, [pc, #144]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cbe:	61bb      	str	r3, [r7, #24]
 8001cc0:	e004      	b.n	8001ccc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d101      	bne.n	8001ccc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cc8:	4b22      	ldr	r3, [pc, #136]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	2b0c      	cmp	r3, #12
 8001cd0:	d133      	bne.n	8001d3a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cd2:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x104>)
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d002      	beq.n	8001ce8 <HAL_RCC_GetSysClockFreq+0xa4>
 8001ce2:	2b03      	cmp	r3, #3
 8001ce4:	d003      	beq.n	8001cee <HAL_RCC_GetSysClockFreq+0xaa>
 8001ce6:	e005      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ce8:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cea:	617b      	str	r3, [r7, #20]
      break;
 8001cec:	e005      	b.n	8001cfa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001cee:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cf0:	617b      	str	r3, [r7, #20]
      break;
 8001cf2:	e002      	b.n	8001cfa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	617b      	str	r3, [r7, #20]
      break;
 8001cf8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cfa:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x104>)
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	091b      	lsrs	r3, r3, #4
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	3301      	adds	r3, #1
 8001d06:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d08:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	0a1b      	lsrs	r3, r3, #8
 8001d0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	fb02 f203 	mul.w	r2, r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d20:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	0e5b      	lsrs	r3, r3, #25
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d38:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d3a:	69bb      	ldr	r3, [r7, #24]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3724      	adds	r7, #36	; 0x24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	08005770 	.word	0x08005770
 8001d50:	00f42400 	.word	0x00f42400
 8001d54:	007a1200 	.word	0x007a1200

08001d58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d5c:	4b03      	ldr	r3, [pc, #12]	; (8001d6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	20000000 	.word	0x20000000

08001d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d74:	f7ff fff0 	bl	8001d58 <HAL_RCC_GetHCLKFreq>
 8001d78:	4601      	mov	r1, r0
 8001d7a:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	0a1b      	lsrs	r3, r3, #8
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	4a04      	ldr	r2, [pc, #16]	; (8001d98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d86:	5cd3      	ldrb	r3, [r2, r3]
 8001d88:	f003 031f 	and.w	r3, r3, #31
 8001d8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40021000 	.word	0x40021000
 8001d98:	08005768 	.word	0x08005768

08001d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001da0:	f7ff ffda 	bl	8001d58 <HAL_RCC_GetHCLKFreq>
 8001da4:	4601      	mov	r1, r0
 8001da6:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	0adb      	lsrs	r3, r3, #11
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	4a04      	ldr	r2, [pc, #16]	; (8001dc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001db2:	5cd3      	ldrb	r3, [r2, r3]
 8001db4:	f003 031f 	and.w	r3, r3, #31
 8001db8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	08005768 	.word	0x08005768

08001dc8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	220f      	movs	r2, #15
 8001dd6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <HAL_RCC_GetClockConfig+0x5c>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 0203 	and.w	r2, r3, #3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001de4:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <HAL_RCC_GetClockConfig+0x5c>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <HAL_RCC_GetClockConfig+0x5c>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001dfc:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <HAL_RCC_GetClockConfig+0x5c>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	08db      	lsrs	r3, r3, #3
 8001e02:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001e0a:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <HAL_RCC_GetClockConfig+0x60>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0207 	and.w	r2, r3, #7
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	601a      	str	r2, [r3, #0]
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40022000 	.word	0x40022000

08001e2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e34:	2300      	movs	r3, #0
 8001e36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e38:	4b2a      	ldr	r3, [pc, #168]	; (8001ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e44:	f7ff f952 	bl	80010ec <HAL_PWREx_GetVoltageRange>
 8001e48:	6178      	str	r0, [r7, #20]
 8001e4a:	e014      	b.n	8001e76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e4c:	4b25      	ldr	r3, [pc, #148]	; (8001ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e50:	4a24      	ldr	r2, [pc, #144]	; (8001ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e56:	6593      	str	r3, [r2, #88]	; 0x58
 8001e58:	4b22      	ldr	r3, [pc, #136]	; (8001ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e64:	f7ff f942 	bl	80010ec <HAL_PWREx_GetVoltageRange>
 8001e68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6e:	4a1d      	ldr	r2, [pc, #116]	; (8001ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e74:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e7c:	d10b      	bne.n	8001e96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b80      	cmp	r3, #128	; 0x80
 8001e82:	d919      	bls.n	8001eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2ba0      	cmp	r3, #160	; 0xa0
 8001e88:	d902      	bls.n	8001e90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	e013      	b.n	8001eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e90:	2301      	movs	r3, #1
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	e010      	b.n	8001eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b80      	cmp	r3, #128	; 0x80
 8001e9a:	d902      	bls.n	8001ea2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	e00a      	b.n	8001eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b80      	cmp	r3, #128	; 0x80
 8001ea6:	d102      	bne.n	8001eae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	e004      	b.n	8001eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b70      	cmp	r3, #112	; 0x70
 8001eb2:	d101      	bne.n	8001eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f023 0207 	bic.w	r2, r3, #7
 8001ec0:	4909      	ldr	r1, [pc, #36]	; (8001ee8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ec8:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d001      	beq.n	8001eda <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40022000 	.word	0x40022000

08001eec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ef8:	2300      	movs	r3, #0
 8001efa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f000 809e 	beq.w	8002046 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f0e:	4b46      	ldr	r3, [pc, #280]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8001f1e:	2300      	movs	r3, #0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00d      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f24:	4b40      	ldr	r3, [pc, #256]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f28:	4a3f      	ldr	r2, [pc, #252]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f2e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f30:	4b3d      	ldr	r3, [pc, #244]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f40:	4b3a      	ldr	r3, [pc, #232]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a39      	ldr	r2, [pc, #228]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f4c:	f7fe fe04 	bl	8000b58 <HAL_GetTick>
 8001f50:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f52:	e009      	b.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f54:	f7fe fe00 	bl	8000b58 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d902      	bls.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	74fb      	strb	r3, [r7, #19]
        break;
 8001f66:	e005      	b.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f68:	4b30      	ldr	r3, [pc, #192]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0ef      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8001f74:	7cfb      	ldrb	r3, [r7, #19]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d15a      	bne.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f7a:	4b2b      	ldr	r3, [pc, #172]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f84:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d01e      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0xde>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d019      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f96:	4b24      	ldr	r3, [pc, #144]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fa0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fa2:	4b21      	ldr	r3, [pc, #132]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa8:	4a1f      	ldr	r2, [pc, #124]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fb2:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb8:	4a1b      	ldr	r2, [pc, #108]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fc2:	4a19      	ldr	r2, [pc, #100]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d016      	beq.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd4:	f7fe fdc0 	bl	8000b58 <HAL_GetTick>
 8001fd8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fda:	e00b      	b.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fdc:	f7fe fdbc 	bl	8000b58 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d902      	bls.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	74fb      	strb	r3, [r7, #19]
            break;
 8001ff2:	e006      	b.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0ec      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8002002:	7cfb      	ldrb	r3, [r7, #19]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10b      	bne.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002008:	4b07      	ldr	r3, [pc, #28]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800200a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	4904      	ldr	r1, [pc, #16]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002018:	4313      	orrs	r3, r2
 800201a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800201e:	e009      	b.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002020:	7cfb      	ldrb	r3, [r7, #19]
 8002022:	74bb      	strb	r3, [r7, #18]
 8002024:	e006      	b.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002026:	bf00      	nop
 8002028:	40021000 	.word	0x40021000
 800202c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002030:	7cfb      	ldrb	r3, [r7, #19]
 8002032:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002034:	7c7b      	ldrb	r3, [r7, #17]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d105      	bne.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800203a:	4b6e      	ldr	r3, [pc, #440]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800203c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203e:	4a6d      	ldr	r2, [pc, #436]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002040:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002044:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00a      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002052:	4b68      	ldr	r3, [pc, #416]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002058:	f023 0203 	bic.w	r2, r3, #3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	4964      	ldr	r1, [pc, #400]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002062:	4313      	orrs	r3, r2
 8002064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00a      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002074:	4b5f      	ldr	r3, [pc, #380]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207a:	f023 020c 	bic.w	r2, r3, #12
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	495c      	ldr	r1, [pc, #368]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002084:	4313      	orrs	r3, r2
 8002086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00a      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002096:	4b57      	ldr	r3, [pc, #348]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	4953      	ldr	r1, [pc, #332]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0320 	and.w	r3, r3, #32
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00a      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020b8:	4b4e      	ldr	r3, [pc, #312]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	494b      	ldr	r1, [pc, #300]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00a      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020da:	4b46      	ldr	r3, [pc, #280]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	4942      	ldr	r1, [pc, #264]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00a      	beq.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80020fc:	4b3d      	ldr	r3, [pc, #244]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002102:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	493a      	ldr	r1, [pc, #232]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800210c:	4313      	orrs	r3, r2
 800210e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00a      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800211e:	4b35      	ldr	r3, [pc, #212]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002124:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	4931      	ldr	r1, [pc, #196]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800212e:	4313      	orrs	r3, r2
 8002130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00a      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002140:	4b2c      	ldr	r3, [pc, #176]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002146:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	4929      	ldr	r1, [pc, #164]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00a      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002162:	4b24      	ldr	r3, [pc, #144]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002168:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	4920      	ldr	r1, [pc, #128]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002172:	4313      	orrs	r3, r2
 8002174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d015      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002184:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002192:	4918      	ldr	r1, [pc, #96]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002194:	4313      	orrs	r3, r2
 8002196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021a2:	d105      	bne.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021a4:	4b13      	ldr	r3, [pc, #76]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	4a12      	ldr	r2, [pc, #72]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021ae:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d015      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021bc:	4b0d      	ldr	r3, [pc, #52]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ca:	490a      	ldr	r1, [pc, #40]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021da:	d105      	bne.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021dc:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	4a04      	ldr	r2, [pc, #16]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021e6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80021e8:	7cbb      	ldrb	r3, [r7, #18]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40021000 	.word	0x40021000

080021f8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a04      	ldr	r2, [pc, #16]	; (8002214 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002202:	f043 0304 	orr.w	r3, r3, #4
 8002206:	6013      	str	r3, [r2, #0]
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40021000 	.word	0x40021000

08002218 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e01d      	b.n	8002266 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d106      	bne.n	8002244 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f815 	bl	800226e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2202      	movs	r2, #2
 8002248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3304      	adds	r3, #4
 8002254:	4619      	mov	r1, r3
 8002256:	4610      	mov	r0, r2
 8002258:	f000 f986 	bl	8002568 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
	...

08002284 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0201 	orr.w	r2, r2, #1
 800229a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <HAL_TIM_Base_Start_IT+0x50>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2b06      	cmp	r3, #6
 80022ac:	d00b      	beq.n	80022c6 <HAL_TIM_Base_Start_IT+0x42>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b4:	d007      	beq.n	80022c6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f042 0201 	orr.w	r2, r2, #1
 80022c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	00010007 	.word	0x00010007

080022d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d122      	bne.n	8002334 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d11b      	bne.n	8002334 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f06f 0202 	mvn.w	r2, #2
 8002304:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f905 	bl	800252a <HAL_TIM_IC_CaptureCallback>
 8002320:	e005      	b.n	800232e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f8f7 	bl	8002516 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 f908 	bl	800253e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f003 0304 	and.w	r3, r3, #4
 800233e:	2b04      	cmp	r3, #4
 8002340:	d122      	bne.n	8002388 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b04      	cmp	r3, #4
 800234e:	d11b      	bne.n	8002388 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f06f 0204 	mvn.w	r2, #4
 8002358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2202      	movs	r2, #2
 800235e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f8db 	bl	800252a <HAL_TIM_IC_CaptureCallback>
 8002374:	e005      	b.n	8002382 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f8cd 	bl	8002516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 f8de 	bl	800253e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b08      	cmp	r3, #8
 8002394:	d122      	bne.n	80023dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	f003 0308 	and.w	r3, r3, #8
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d11b      	bne.n	80023dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f06f 0208 	mvn.w	r2, #8
 80023ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2204      	movs	r2, #4
 80023b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f8b1 	bl	800252a <HAL_TIM_IC_CaptureCallback>
 80023c8:	e005      	b.n	80023d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f8a3 	bl	8002516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f8b4 	bl	800253e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	2b10      	cmp	r3, #16
 80023e8:	d122      	bne.n	8002430 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f003 0310 	and.w	r3, r3, #16
 80023f4:	2b10      	cmp	r3, #16
 80023f6:	d11b      	bne.n	8002430 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f06f 0210 	mvn.w	r2, #16
 8002400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2208      	movs	r2, #8
 8002406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f887 	bl	800252a <HAL_TIM_IC_CaptureCallback>
 800241c:	e005      	b.n	800242a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f879 	bl	8002516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f88a 	bl	800253e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b01      	cmp	r3, #1
 800243c:	d10e      	bne.n	800245c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b01      	cmp	r3, #1
 800244a:	d107      	bne.n	800245c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f06f 0201 	mvn.w	r2, #1
 8002454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7fe f9a0 	bl	800079c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002466:	2b80      	cmp	r3, #128	; 0x80
 8002468:	d10e      	bne.n	8002488 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002474:	2b80      	cmp	r3, #128	; 0x80
 8002476:	d107      	bne.n	8002488 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f8de 	bl	8002644 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002496:	d10e      	bne.n	80024b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a2:	2b80      	cmp	r3, #128	; 0x80
 80024a4:	d107      	bne.n	80024b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80024ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f8d1 	bl	8002658 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c0:	2b40      	cmp	r3, #64	; 0x40
 80024c2:	d10e      	bne.n	80024e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ce:	2b40      	cmp	r3, #64	; 0x40
 80024d0:	d107      	bne.n	80024e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f838 	bl	8002552 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	f003 0320 	and.w	r3, r3, #32
 80024ec:	2b20      	cmp	r3, #32
 80024ee:	d10e      	bne.n	800250e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	f003 0320 	and.w	r3, r3, #32
 80024fa:	2b20      	cmp	r3, #32
 80024fc:	d107      	bne.n	800250e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f06f 0220 	mvn.w	r2, #32
 8002506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f891 	bl	8002630 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
	...

08002568 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a2a      	ldr	r2, [pc, #168]	; (8002624 <TIM_Base_SetConfig+0xbc>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d003      	beq.n	8002588 <TIM_Base_SetConfig+0x20>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002586:	d108      	bne.n	800259a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800258e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	4313      	orrs	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a21      	ldr	r2, [pc, #132]	; (8002624 <TIM_Base_SetConfig+0xbc>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d00b      	beq.n	80025ba <TIM_Base_SetConfig+0x52>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a8:	d007      	beq.n	80025ba <TIM_Base_SetConfig+0x52>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a1e      	ldr	r2, [pc, #120]	; (8002628 <TIM_Base_SetConfig+0xc0>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d003      	beq.n	80025ba <TIM_Base_SetConfig+0x52>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a1d      	ldr	r2, [pc, #116]	; (800262c <TIM_Base_SetConfig+0xc4>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d108      	bne.n	80025cc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a0c      	ldr	r2, [pc, #48]	; (8002624 <TIM_Base_SetConfig+0xbc>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d007      	beq.n	8002608 <TIM_Base_SetConfig+0xa0>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a0b      	ldr	r2, [pc, #44]	; (8002628 <TIM_Base_SetConfig+0xc0>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d003      	beq.n	8002608 <TIM_Base_SetConfig+0xa0>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a0a      	ldr	r2, [pc, #40]	; (800262c <TIM_Base_SetConfig+0xc4>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d103      	bne.n	8002610 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	691a      	ldr	r2, [r3, #16]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	615a      	str	r2, [r3, #20]
}
 8002616:	bf00      	nop
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40012c00 	.word	0x40012c00
 8002628:	40014000 	.word	0x40014000
 800262c:	40014400 	.word	0x40014400

08002630 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e040      	b.n	8002700 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002682:	2b00      	cmp	r3, #0
 8002684:	d106      	bne.n	8002694 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7fe f8c6 	bl	8000820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2224      	movs	r2, #36	; 0x24
 8002698:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0201 	bic.w	r2, r2, #1
 80026a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f986 	bl	80029bc <UART_SetConfig>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d101      	bne.n	80026ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e022      	b.n	8002700 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d002      	beq.n	80026c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 fc8e 	bl	8002fe4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f042 0201 	orr.w	r2, r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 fd15 	bl	8003128 <UART_CheckIdleState>
 80026fe:	4603      	mov	r3, r0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002728:	69fa      	ldr	r2, [r7, #28]
 800272a:	f640 030f 	movw	r3, #2063	; 0x80f
 800272e:	4013      	ands	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d113      	bne.n	8002760 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f003 0320 	and.w	r3, r3, #32
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00e      	beq.n	8002760 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	f003 0320 	and.w	r3, r3, #32
 8002748:	2b00      	cmp	r3, #0
 800274a:	d009      	beq.n	8002760 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 8114 	beq.w	800297e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	4798      	blx	r3
      }
      return;
 800275e:	e10e      	b.n	800297e <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 80d6 	beq.w	8002914 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d105      	bne.n	800277e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 80cb 	beq.w	8002914 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00e      	beq.n	80027a6 <HAL_UART_IRQHandler+0x9e>
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278e:	2b00      	cmp	r3, #0
 8002790:	d009      	beq.n	80027a6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2201      	movs	r2, #1
 8002798:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800279e:	f043 0201 	orr.w	r2, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00e      	beq.n	80027ce <HAL_UART_IRQHandler+0xc6>
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d009      	beq.n	80027ce <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2202      	movs	r2, #2
 80027c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027c6:	f043 0204 	orr.w	r2, r3, #4
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00e      	beq.n	80027f6 <HAL_UART_IRQHandler+0xee>
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d009      	beq.n	80027f6 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2204      	movs	r2, #4
 80027e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027ee:	f043 0202 	orr.w	r2, r3, #2
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d013      	beq.n	8002828 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	f003 0320 	and.w	r3, r3, #32
 8002806:	2b00      	cmp	r3, #0
 8002808:	d104      	bne.n	8002814 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002810:	2b00      	cmp	r3, #0
 8002812:	d009      	beq.n	8002828 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2208      	movs	r2, #8
 800281a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002820:	f043 0208 	orr.w	r2, r3, #8
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00f      	beq.n	8002852 <HAL_UART_IRQHandler+0x14a>
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00a      	beq.n	8002852 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002844:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800284a:	f043 0220 	orr.w	r2, r3, #32
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 8093 	beq.w	8002982 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f003 0320 	and.w	r3, r3, #32
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00c      	beq.n	8002880 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	f003 0320 	and.w	r3, r3, #32
 800286c:	2b00      	cmp	r3, #0
 800286e:	d007      	beq.n	8002880 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002884:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002890:	2b40      	cmp	r3, #64	; 0x40
 8002892:	d004      	beq.n	800289e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800289a:	2b00      	cmp	r3, #0
 800289c:	d031      	beq.n	8002902 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 fd02 	bl	80032a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ae:	2b40      	cmp	r3, #64	; 0x40
 80028b0:	d123      	bne.n	80028fa <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028c0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d013      	beq.n	80028f2 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ce:	4a30      	ldr	r2, [pc, #192]	; (8002990 <HAL_UART_IRQHandler+0x288>)
 80028d0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe fa2c 	bl	8000d34 <HAL_DMA_Abort_IT>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d016      	beq.n	8002910 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80028ec:	4610      	mov	r0, r2
 80028ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028f0:	e00e      	b.n	8002910 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f858 	bl	80029a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028f8:	e00a      	b.n	8002910 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f854 	bl	80029a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002900:	e006      	b.n	8002910 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f850 	bl	80029a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800290e:	e038      	b.n	8002982 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002910:	bf00      	nop
    return;
 8002912:	e036      	b.n	8002982 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00d      	beq.n	800293a <HAL_UART_IRQHandler+0x232>
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d008      	beq.n	800293a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002930:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 fd07 	bl	8003346 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002938:	e026      	b.n	8002988 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00d      	beq.n	8002960 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294a:	2b00      	cmp	r3, #0
 800294c:	d008      	beq.n	8002960 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002952:	2b00      	cmp	r3, #0
 8002954:	d017      	beq.n	8002986 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	4798      	blx	r3
    }
    return;
 800295e:	e012      	b.n	8002986 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00e      	beq.n	8002988 <HAL_UART_IRQHandler+0x280>
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002970:	2b00      	cmp	r3, #0
 8002972:	d009      	beq.n	8002988 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 fccd 	bl	8003314 <UART_EndTransmit_IT>
    return;
 800297a:	bf00      	nop
 800297c:	e004      	b.n	8002988 <HAL_UART_IRQHandler+0x280>
      return;
 800297e:	bf00      	nop
 8002980:	e002      	b.n	8002988 <HAL_UART_IRQHandler+0x280>
    return;
 8002982:	bf00      	nop
 8002984:	e000      	b.n	8002988 <HAL_UART_IRQHandler+0x280>
    return;
 8002986:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002988:	3720      	adds	r7, #32
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	080032e9 	.word	0x080032e9

08002994 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029bc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80029c0:	b08a      	sub	sp, #40	; 0x28
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80029ca:	2300      	movs	r3, #0
 80029cc:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	4bbc      	ldr	r3, [pc, #752]	; (8002ce4 <UART_SetConfig+0x328>)
 80029f2:	4013      	ands	r3, r2
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6812      	ldr	r2, [r2, #0]
 80029f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029fa:	430b      	orrs	r3, r1
 80029fc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4ab2      	ldr	r2, [pc, #712]	; (8002ce8 <UART_SetConfig+0x32c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d004      	beq.n	8002a2e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4aa9      	ldr	r2, [pc, #676]	; (8002cec <UART_SetConfig+0x330>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d126      	bne.n	8002a9a <UART_SetConfig+0xde>
 8002a4c:	4ba8      	ldr	r3, [pc, #672]	; (8002cf0 <UART_SetConfig+0x334>)
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a52:	f003 0303 	and.w	r3, r3, #3
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d81a      	bhi.n	8002a90 <UART_SetConfig+0xd4>
 8002a5a:	a201      	add	r2, pc, #4	; (adr r2, 8002a60 <UART_SetConfig+0xa4>)
 8002a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a60:	08002a71 	.word	0x08002a71
 8002a64:	08002a81 	.word	0x08002a81
 8002a68:	08002a79 	.word	0x08002a79
 8002a6c:	08002a89 	.word	0x08002a89
 8002a70:	2301      	movs	r3, #1
 8002a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a76:	e0ab      	b.n	8002bd0 <UART_SetConfig+0x214>
 8002a78:	2302      	movs	r3, #2
 8002a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a7e:	e0a7      	b.n	8002bd0 <UART_SetConfig+0x214>
 8002a80:	2304      	movs	r3, #4
 8002a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a86:	e0a3      	b.n	8002bd0 <UART_SetConfig+0x214>
 8002a88:	2308      	movs	r3, #8
 8002a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a8e:	e09f      	b.n	8002bd0 <UART_SetConfig+0x214>
 8002a90:	2310      	movs	r3, #16
 8002a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a96:	bf00      	nop
 8002a98:	e09a      	b.n	8002bd0 <UART_SetConfig+0x214>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a95      	ldr	r2, [pc, #596]	; (8002cf4 <UART_SetConfig+0x338>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d138      	bne.n	8002b16 <UART_SetConfig+0x15a>
 8002aa4:	4b92      	ldr	r3, [pc, #584]	; (8002cf0 <UART_SetConfig+0x334>)
 8002aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aaa:	f003 030c 	and.w	r3, r3, #12
 8002aae:	2b0c      	cmp	r3, #12
 8002ab0:	d82c      	bhi.n	8002b0c <UART_SetConfig+0x150>
 8002ab2:	a201      	add	r2, pc, #4	; (adr r2, 8002ab8 <UART_SetConfig+0xfc>)
 8002ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab8:	08002aed 	.word	0x08002aed
 8002abc:	08002b0d 	.word	0x08002b0d
 8002ac0:	08002b0d 	.word	0x08002b0d
 8002ac4:	08002b0d 	.word	0x08002b0d
 8002ac8:	08002afd 	.word	0x08002afd
 8002acc:	08002b0d 	.word	0x08002b0d
 8002ad0:	08002b0d 	.word	0x08002b0d
 8002ad4:	08002b0d 	.word	0x08002b0d
 8002ad8:	08002af5 	.word	0x08002af5
 8002adc:	08002b0d 	.word	0x08002b0d
 8002ae0:	08002b0d 	.word	0x08002b0d
 8002ae4:	08002b0d 	.word	0x08002b0d
 8002ae8:	08002b05 	.word	0x08002b05
 8002aec:	2300      	movs	r3, #0
 8002aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002af2:	e06d      	b.n	8002bd0 <UART_SetConfig+0x214>
 8002af4:	2302      	movs	r3, #2
 8002af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002afa:	e069      	b.n	8002bd0 <UART_SetConfig+0x214>
 8002afc:	2304      	movs	r3, #4
 8002afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b02:	e065      	b.n	8002bd0 <UART_SetConfig+0x214>
 8002b04:	2308      	movs	r3, #8
 8002b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b0a:	e061      	b.n	8002bd0 <UART_SetConfig+0x214>
 8002b0c:	2310      	movs	r3, #16
 8002b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b12:	bf00      	nop
 8002b14:	e05c      	b.n	8002bd0 <UART_SetConfig+0x214>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a77      	ldr	r2, [pc, #476]	; (8002cf8 <UART_SetConfig+0x33c>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d125      	bne.n	8002b6c <UART_SetConfig+0x1b0>
 8002b20:	4b73      	ldr	r3, [pc, #460]	; (8002cf0 <UART_SetConfig+0x334>)
 8002b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b26:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002b2a:	2b10      	cmp	r3, #16
 8002b2c:	d011      	beq.n	8002b52 <UART_SetConfig+0x196>
 8002b2e:	2b10      	cmp	r3, #16
 8002b30:	d802      	bhi.n	8002b38 <UART_SetConfig+0x17c>
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d005      	beq.n	8002b42 <UART_SetConfig+0x186>
 8002b36:	e014      	b.n	8002b62 <UART_SetConfig+0x1a6>
 8002b38:	2b20      	cmp	r3, #32
 8002b3a:	d006      	beq.n	8002b4a <UART_SetConfig+0x18e>
 8002b3c:	2b30      	cmp	r3, #48	; 0x30
 8002b3e:	d00c      	beq.n	8002b5a <UART_SetConfig+0x19e>
 8002b40:	e00f      	b.n	8002b62 <UART_SetConfig+0x1a6>
 8002b42:	2300      	movs	r3, #0
 8002b44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b48:	e042      	b.n	8002bd0 <UART_SetConfig+0x214>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b50:	e03e      	b.n	8002bd0 <UART_SetConfig+0x214>
 8002b52:	2304      	movs	r3, #4
 8002b54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b58:	e03a      	b.n	8002bd0 <UART_SetConfig+0x214>
 8002b5a:	2308      	movs	r3, #8
 8002b5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b60:	e036      	b.n	8002bd0 <UART_SetConfig+0x214>
 8002b62:	2310      	movs	r3, #16
 8002b64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b68:	bf00      	nop
 8002b6a:	e031      	b.n	8002bd0 <UART_SetConfig+0x214>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a5d      	ldr	r2, [pc, #372]	; (8002ce8 <UART_SetConfig+0x32c>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d129      	bne.n	8002bca <UART_SetConfig+0x20e>
 8002b76:	4b5e      	ldr	r3, [pc, #376]	; (8002cf0 <UART_SetConfig+0x334>)
 8002b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b84:	d014      	beq.n	8002bb0 <UART_SetConfig+0x1f4>
 8002b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b8a:	d802      	bhi.n	8002b92 <UART_SetConfig+0x1d6>
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d007      	beq.n	8002ba0 <UART_SetConfig+0x1e4>
 8002b90:	e016      	b.n	8002bc0 <UART_SetConfig+0x204>
 8002b92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b96:	d007      	beq.n	8002ba8 <UART_SetConfig+0x1ec>
 8002b98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b9c:	d00c      	beq.n	8002bb8 <UART_SetConfig+0x1fc>
 8002b9e:	e00f      	b.n	8002bc0 <UART_SetConfig+0x204>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ba6:	e013      	b.n	8002bd0 <UART_SetConfig+0x214>
 8002ba8:	2302      	movs	r3, #2
 8002baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bae:	e00f      	b.n	8002bd0 <UART_SetConfig+0x214>
 8002bb0:	2304      	movs	r3, #4
 8002bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bb6:	e00b      	b.n	8002bd0 <UART_SetConfig+0x214>
 8002bb8:	2308      	movs	r3, #8
 8002bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bbe:	e007      	b.n	8002bd0 <UART_SetConfig+0x214>
 8002bc0:	2310      	movs	r3, #16
 8002bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bc6:	bf00      	nop
 8002bc8:	e002      	b.n	8002bd0 <UART_SetConfig+0x214>
 8002bca:	2310      	movs	r3, #16
 8002bcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a44      	ldr	r2, [pc, #272]	; (8002ce8 <UART_SetConfig+0x32c>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	f040 80fb 	bne.w	8002dd2 <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002bdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d824      	bhi.n	8002c2e <UART_SetConfig+0x272>
 8002be4:	a201      	add	r2, pc, #4	; (adr r2, 8002bec <UART_SetConfig+0x230>)
 8002be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bea:	bf00      	nop
 8002bec:	08002c11 	.word	0x08002c11
 8002bf0:	08002c2f 	.word	0x08002c2f
 8002bf4:	08002c19 	.word	0x08002c19
 8002bf8:	08002c2f 	.word	0x08002c2f
 8002bfc:	08002c1f 	.word	0x08002c1f
 8002c00:	08002c2f 	.word	0x08002c2f
 8002c04:	08002c2f 	.word	0x08002c2f
 8002c08:	08002c2f 	.word	0x08002c2f
 8002c0c:	08002c27 	.word	0x08002c27
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002c10:	f7ff f8ae 	bl	8001d70 <HAL_RCC_GetPCLK1Freq>
 8002c14:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002c16:	e00d      	b.n	8002c34 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002c18:	4b38      	ldr	r3, [pc, #224]	; (8002cfc <UART_SetConfig+0x340>)
 8002c1a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002c1c:	e00a      	b.n	8002c34 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002c1e:	f7ff f811 	bl	8001c44 <HAL_RCC_GetSysClockFreq>
 8002c22:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002c24:	e006      	b.n	8002c34 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c2a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002c2c:	e002      	b.n	8002c34 <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	76fb      	strb	r3, [r7, #27]
        break;
 8002c32:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 81c8 	beq.w	8002fcc <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	4613      	mov	r3, r2
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	4413      	add	r3, r2
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d305      	bcc.n	8002c58 <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d902      	bls.n	8002c5e <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	76fb      	strb	r3, [r7, #27]
 8002c5c:	e1b6      	b.n	8002fcc <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 8002c5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	f200 80a2 	bhi.w	8002dac <UART_SetConfig+0x3f0>
 8002c68:	a201      	add	r2, pc, #4	; (adr r2, 8002c70 <UART_SetConfig+0x2b4>)
 8002c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6e:	bf00      	nop
 8002c70:	08002c95 	.word	0x08002c95
 8002c74:	08002dad 	.word	0x08002dad
 8002c78:	08002d01 	.word	0x08002d01
 8002c7c:	08002dad 	.word	0x08002dad
 8002c80:	08002d35 	.word	0x08002d35
 8002c84:	08002dad 	.word	0x08002dad
 8002c88:	08002dad 	.word	0x08002dad
 8002c8c:	08002dad 	.word	0x08002dad
 8002c90:	08002d83 	.word	0x08002d83
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8002c94:	f7ff f86c 	bl	8001d70 <HAL_RCC_GetPCLK1Freq>
 8002c98:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	f04f 0300 	mov.w	r3, #0
 8002ca6:	f04f 0400 	mov.w	r4, #0
 8002caa:	0214      	lsls	r4, r2, #8
 8002cac:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002cb0:	020b      	lsls	r3, r1, #8
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	6852      	ldr	r2, [r2, #4]
 8002cb6:	0852      	lsrs	r2, r2, #1
 8002cb8:	4611      	mov	r1, r2
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	eb13 0b01 	adds.w	fp, r3, r1
 8002cc2:	eb44 0c02 	adc.w	ip, r4, r2
 8002cc6:	4658      	mov	r0, fp
 8002cc8:	4661      	mov	r1, ip
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f04f 0400 	mov.w	r4, #0
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	4623      	mov	r3, r4
 8002cd6:	f7fd fa7b 	bl	80001d0 <__aeabi_uldivmod>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	460c      	mov	r4, r1
 8002cde:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002ce0:	e067      	b.n	8002db2 <UART_SetConfig+0x3f6>
 8002ce2:	bf00      	nop
 8002ce4:	efff69f3 	.word	0xefff69f3
 8002ce8:	40008000 	.word	0x40008000
 8002cec:	40013800 	.word	0x40013800
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	40004400 	.word	0x40004400
 8002cf8:	40004800 	.word	0x40004800
 8002cfc:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	085b      	lsrs	r3, r3, #1
 8002d06:	f04f 0400 	mov.w	r4, #0
 8002d0a:	49ae      	ldr	r1, [pc, #696]	; (8002fc4 <UART_SetConfig+0x608>)
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	eb13 0b01 	adds.w	fp, r3, r1
 8002d14:	eb44 0c02 	adc.w	ip, r4, r2
 8002d18:	4658      	mov	r0, fp
 8002d1a:	4661      	mov	r1, ip
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f04f 0400 	mov.w	r4, #0
 8002d24:	461a      	mov	r2, r3
 8002d26:	4623      	mov	r3, r4
 8002d28:	f7fd fa52 	bl	80001d0 <__aeabi_uldivmod>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	460c      	mov	r4, r1
 8002d30:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002d32:	e03e      	b.n	8002db2 <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8002d34:	f7fe ff86 	bl	8001c44 <HAL_RCC_GetSysClockFreq>
 8002d38:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	f04f 0400 	mov.w	r4, #0
 8002d4a:	0214      	lsls	r4, r2, #8
 8002d4c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002d50:	020b      	lsls	r3, r1, #8
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6852      	ldr	r2, [r2, #4]
 8002d56:	0852      	lsrs	r2, r2, #1
 8002d58:	4611      	mov	r1, r2
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	eb13 0b01 	adds.w	fp, r3, r1
 8002d62:	eb44 0c02 	adc.w	ip, r4, r2
 8002d66:	4658      	mov	r0, fp
 8002d68:	4661      	mov	r1, ip
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f04f 0400 	mov.w	r4, #0
 8002d72:	461a      	mov	r2, r3
 8002d74:	4623      	mov	r3, r4
 8002d76:	f7fd fa2b 	bl	80001d0 <__aeabi_uldivmod>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	460c      	mov	r4, r1
 8002d7e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002d80:	e017      	b.n	8002db2 <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	085b      	lsrs	r3, r3, #1
 8002d88:	f04f 0400 	mov.w	r4, #0
 8002d8c:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8002d90:	f144 0100 	adc.w	r1, r4, #0
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f04f 0400 	mov.w	r4, #0
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4623      	mov	r3, r4
 8002da0:	f7fd fa16 	bl	80001d0 <__aeabi_uldivmod>
 8002da4:	4603      	mov	r3, r0
 8002da6:	460c      	mov	r4, r1
 8002da8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002daa:	e002      	b.n	8002db2 <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	76fb      	strb	r3, [r7, #27]
            break;
 8002db0:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002db8:	d308      	bcc.n	8002dcc <UART_SetConfig+0x410>
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dc0:	d204      	bcs.n	8002dcc <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	69fa      	ldr	r2, [r7, #28]
 8002dc8:	60da      	str	r2, [r3, #12]
 8002dca:	e0ff      	b.n	8002fcc <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	76fb      	strb	r3, [r7, #27]
 8002dd0:	e0fc      	b.n	8002fcc <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dda:	f040 8083 	bne.w	8002ee4 <UART_SetConfig+0x528>
  {
    switch (clocksource)
 8002dde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002de2:	2b08      	cmp	r3, #8
 8002de4:	d85e      	bhi.n	8002ea4 <UART_SetConfig+0x4e8>
 8002de6:	a201      	add	r2, pc, #4	; (adr r2, 8002dec <UART_SetConfig+0x430>)
 8002de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dec:	08002e11 	.word	0x08002e11
 8002df0:	08002e31 	.word	0x08002e31
 8002df4:	08002e51 	.word	0x08002e51
 8002df8:	08002ea5 	.word	0x08002ea5
 8002dfc:	08002e6d 	.word	0x08002e6d
 8002e00:	08002ea5 	.word	0x08002ea5
 8002e04:	08002ea5 	.word	0x08002ea5
 8002e08:	08002ea5 	.word	0x08002ea5
 8002e0c:	08002e8d 	.word	0x08002e8d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e10:	f7fe ffae 	bl	8001d70 <HAL_RCC_GetPCLK1Freq>
 8002e14:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	005a      	lsls	r2, r3, #1
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	085b      	lsrs	r3, r3, #1
 8002e20:	441a      	add	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002e2e:	e03c      	b.n	8002eaa <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e30:	f7fe ffb4 	bl	8001d9c <HAL_RCC_GetPCLK2Freq>
 8002e34:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	005a      	lsls	r2, r3, #1
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	085b      	lsrs	r3, r3, #1
 8002e40:	441a      	add	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002e4e:	e02c      	b.n	8002eaa <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	085b      	lsrs	r3, r3, #1
 8002e56:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002e5a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6852      	ldr	r2, [r2, #4]
 8002e62:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002e6a:	e01e      	b.n	8002eaa <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e6c:	f7fe feea 	bl	8001c44 <HAL_RCC_GetSysClockFreq>
 8002e70:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	005a      	lsls	r2, r3, #1
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	085b      	lsrs	r3, r3, #1
 8002e7c:	441a      	add	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002e8a:	e00e      	b.n	8002eaa <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	085b      	lsrs	r3, r3, #1
 8002e92:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002ea2:	e002      	b.n	8002eaa <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	76fb      	strb	r3, [r7, #27]
        break;
 8002ea8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	2b0f      	cmp	r3, #15
 8002eae:	d916      	bls.n	8002ede <UART_SetConfig+0x522>
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb6:	d212      	bcs.n	8002ede <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	f023 030f 	bic.w	r3, r3, #15
 8002ec0:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	085b      	lsrs	r3, r3, #1
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	89fb      	ldrh	r3, [r7, #14]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	89fa      	ldrh	r2, [r7, #14]
 8002eda:	60da      	str	r2, [r3, #12]
 8002edc:	e076      	b.n	8002fcc <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	76fb      	strb	r3, [r7, #27]
 8002ee2:	e073      	b.n	8002fcc <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 8002ee4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d85c      	bhi.n	8002fa6 <UART_SetConfig+0x5ea>
 8002eec:	a201      	add	r2, pc, #4	; (adr r2, 8002ef4 <UART_SetConfig+0x538>)
 8002eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef2:	bf00      	nop
 8002ef4:	08002f19 	.word	0x08002f19
 8002ef8:	08002f37 	.word	0x08002f37
 8002efc:	08002f55 	.word	0x08002f55
 8002f00:	08002fa7 	.word	0x08002fa7
 8002f04:	08002f71 	.word	0x08002f71
 8002f08:	08002fa7 	.word	0x08002fa7
 8002f0c:	08002fa7 	.word	0x08002fa7
 8002f10:	08002fa7 	.word	0x08002fa7
 8002f14:	08002f8f 	.word	0x08002f8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f18:	f7fe ff2a 	bl	8001d70 <HAL_RCC_GetPCLK1Freq>
 8002f1c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	085a      	lsrs	r2, r3, #1
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	441a      	add	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002f34:	e03a      	b.n	8002fac <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f36:	f7fe ff31 	bl	8001d9c <HAL_RCC_GetPCLK2Freq>
 8002f3a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	085a      	lsrs	r2, r3, #1
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	441a      	add	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002f52:	e02b      	b.n	8002fac <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	085b      	lsrs	r3, r3, #1
 8002f5a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002f5e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6852      	ldr	r2, [r2, #4]
 8002f66:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002f6e:	e01d      	b.n	8002fac <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f70:	f7fe fe68 	bl	8001c44 <HAL_RCC_GetSysClockFreq>
 8002f74:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	085a      	lsrs	r2, r3, #1
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	441a      	add	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002f8c:	e00e      	b.n	8002fac <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	085b      	lsrs	r3, r3, #1
 8002f94:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002fa4:	e002      	b.n	8002fac <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	76fb      	strb	r3, [r7, #27]
        break;
 8002faa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	2b0f      	cmp	r3, #15
 8002fb0:	d90a      	bls.n	8002fc8 <UART_SetConfig+0x60c>
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb8:	d206      	bcs.n	8002fc8 <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	69fa      	ldr	r2, [r7, #28]
 8002fc0:	60da      	str	r2, [r3, #12]
 8002fc2:	e003      	b.n	8002fcc <UART_SetConfig+0x610>
 8002fc4:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002fd8:	7efb      	ldrb	r3, [r7, #27]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3728      	adds	r7, #40	; 0x28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08002fe4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00a      	beq.n	800300e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	430a      	orrs	r2, r1
 800302e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00a      	beq.n	8003052 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	f003 0308 	and.w	r3, r3, #8
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	f003 0310 	and.w	r3, r3, #16
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00a      	beq.n	8003096 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	f003 0320 	and.w	r3, r3, #32
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00a      	beq.n	80030b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d01a      	beq.n	80030fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030e2:	d10a      	bne.n	80030fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00a      	beq.n	800311c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	605a      	str	r2, [r3, #4]
  }
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af02      	add	r7, sp, #8
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003136:	f7fd fd0f 	bl	8000b58 <HAL_GetTick>
 800313a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b08      	cmp	r3, #8
 8003148:	d10e      	bne.n	8003168 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800314a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f82a 	bl	80031b2 <UART_WaitOnFlagUntilTimeout>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e020      	b.n	80031aa <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0304 	and.w	r3, r3, #4
 8003172:	2b04      	cmp	r3, #4
 8003174:	d10e      	bne.n	8003194 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003176:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 f814 	bl	80031b2 <UART_WaitOnFlagUntilTimeout>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e00a      	b.n	80031aa <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2220      	movs	r2, #32
 8003198:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2220      	movs	r2, #32
 800319e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b084      	sub	sp, #16
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	60f8      	str	r0, [r7, #12]
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	603b      	str	r3, [r7, #0]
 80031be:	4613      	mov	r3, r2
 80031c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031c2:	e05d      	b.n	8003280 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ca:	d059      	beq.n	8003280 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031cc:	f7fd fcc4 	bl	8000b58 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d302      	bcc.n	80031e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d11b      	bne.n	800321a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031f0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0201 	bic.w	r2, r2, #1
 8003200:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2220      	movs	r2, #32
 8003206:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2220      	movs	r2, #32
 800320c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e042      	b.n	80032a0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b00      	cmp	r3, #0
 8003226:	d02b      	beq.n	8003280 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003232:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003236:	d123      	bne.n	8003280 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003240:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003250:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0201 	bic.w	r2, r2, #1
 8003260:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2220      	movs	r2, #32
 8003266:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2220      	movs	r2, #32
 800326c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2220      	movs	r2, #32
 8003272:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e00f      	b.n	80032a0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	69da      	ldr	r2, [r3, #28]
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	4013      	ands	r3, r2
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	429a      	cmp	r2, r3
 800328e:	bf0c      	ite	eq
 8003290:	2301      	moveq	r3, #1
 8003292:	2300      	movne	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	461a      	mov	r2, r3
 8003298:	79fb      	ldrb	r3, [r7, #7]
 800329a:	429a      	cmp	r2, r3
 800329c:	d092      	beq.n	80031c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80032be:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0201 	bic.w	r2, r2, #1
 80032ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2220      	movs	r2, #32
 80032d4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	661a      	str	r2, [r3, #96]	; 0x60
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f7ff fb4e 	bl	80029a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800330c:	bf00      	nop
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800332a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2220      	movs	r2, #32
 8003330:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff fb2b 	bl	8002994 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800333e:	bf00      	nop
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800335a:	b480      	push	{r7}
 800335c:	b085      	sub	sp, #20
 800335e:	af00      	add	r7, sp, #0
 8003360:	4603      	mov	r3, r0
 8003362:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003364:	2300      	movs	r3, #0
 8003366:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003368:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800336c:	2b84      	cmp	r3, #132	; 0x84
 800336e:	d005      	beq.n	800337c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003370:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4413      	add	r3, r2
 8003378:	3303      	adds	r3, #3
 800337a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800337c:	68fb      	ldr	r3, [r7, #12]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800338e:	f000 ff97 	bl	80042c0 <vTaskStartScheduler>
  
  return osOK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	bd80      	pop	{r7, pc}

08003398 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800339a:	b089      	sub	sp, #36	; 0x24
 800339c:	af04      	add	r7, sp, #16
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d020      	beq.n	80033ec <osThreadCreate+0x54>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d01c      	beq.n	80033ec <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685c      	ldr	r4, [r3, #4]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681d      	ldr	r5, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691e      	ldr	r6, [r3, #16]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff ffc8 	bl	800335a <makeFreeRtosPriority>
 80033ca:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033d4:	9202      	str	r2, [sp, #8]
 80033d6:	9301      	str	r3, [sp, #4]
 80033d8:	9100      	str	r1, [sp, #0]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	4632      	mov	r2, r6
 80033de:	4629      	mov	r1, r5
 80033e0:	4620      	mov	r0, r4
 80033e2:	f000 fd1b 	bl	8003e1c <xTaskCreateStatic>
 80033e6:	4603      	mov	r3, r0
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	e01c      	b.n	8003426 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685c      	ldr	r4, [r3, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033f8:	b29e      	uxth	r6, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff ffaa 	bl	800335a <makeFreeRtosPriority>
 8003406:	4602      	mov	r2, r0
 8003408:	f107 030c 	add.w	r3, r7, #12
 800340c:	9301      	str	r3, [sp, #4]
 800340e:	9200      	str	r2, [sp, #0]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	4632      	mov	r2, r6
 8003414:	4629      	mov	r1, r5
 8003416:	4620      	mov	r0, r4
 8003418:	f000 fd5a 	bl	8003ed0 <xTaskCreate>
 800341c:	4603      	mov	r3, r0
 800341e:	2b01      	cmp	r3, #1
 8003420:	d001      	beq.n	8003426 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003422:	2300      	movs	r3, #0
 8003424:	e000      	b.n	8003428 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003426:	68fb      	ldr	r3, [r7, #12]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003430 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 fe7f 	bl	800413c <vTaskDelete>
  return osOK;
 800343e:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <osDelay+0x16>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	e000      	b.n	8003460 <osDelay+0x18>
 800345e:	2301      	movs	r3, #1
 8003460:	4618      	mov	r0, r3
 8003462:	f000 fef9 	bl	8004258 <vTaskDelay>
  
  return osOK;
 8003466:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d007      	beq.n	8003490 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	4619      	mov	r1, r3
 8003486:	2001      	movs	r0, #1
 8003488:	f000 fadf 	bl	8003a4a <xQueueCreateMutexStatic>
 800348c:	4603      	mov	r3, r0
 800348e:	e003      	b.n	8003498 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8003490:	2001      	movs	r0, #1
 8003492:	f000 fac2 	bl	8003a1a <xQueueCreateMutex>
 8003496:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8003498:	4618      	mov	r0, r3
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	3303      	adds	r3, #3
 80034ae:	f023 0303 	bic.w	r3, r3, #3
 80034b2:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 80034b4:	2014      	movs	r0, #20
 80034b6:	f001 fe05 	bl	80050c4 <pvPortMalloc>
 80034ba:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d046      	beq.n	8003550 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	2200      	movs	r2, #0
 80034d4:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f001 fdf2 	bl	80050c4 <pvPortMalloc>
 80034e0:	4602      	mov	r2, r0
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d02b      	beq.n	8003546 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	fb02 f303 	mul.w	r3, r2, r3
 80034f8:	4618      	mov	r0, r3
 80034fa:	f001 fde3 	bl	80050c4 <pvPortMalloc>
 80034fe:	4602      	mov	r2, r0
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d011      	beq.n	8003530 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 800350c:	2300      	movs	r3, #0
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	e008      	b.n	8003524 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	4413      	add	r3, r2
 800351a:	2200      	movs	r2, #0
 800351c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	3301      	adds	r3, #1
 8003522:	613b      	str	r3, [r7, #16]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	429a      	cmp	r2, r3
 800352c:	d3f1      	bcc.n	8003512 <osPoolCreate+0x72>
 800352e:	e00f      	b.n	8003550 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	4618      	mov	r0, r3
 8003536:	f001 fe87 	bl	8005248 <vPortFree>
        vPortFree(thePool);
 800353a:	6978      	ldr	r0, [r7, #20]
 800353c:	f001 fe84 	bl	8005248 <vPortFree>
        thePool = NULL;
 8003540:	2300      	movs	r3, #0
 8003542:	617b      	str	r3, [r7, #20]
 8003544:	e004      	b.n	8003550 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8003546:	6978      	ldr	r0, [r7, #20]
 8003548:	f001 fe7e 	bl	8005248 <vPortFree>
      thePool = NULL;
 800354c:	2300      	movs	r3, #0
 800354e:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8003550:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8003552:	4618      	mov	r0, r3
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 800355a:	b590      	push	{r4, r7, lr}
 800355c:	b087      	sub	sp, #28
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 8003562:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	613b      	str	r3, [r7, #16]
 8003570:	2300      	movs	r3, #0
 8003572:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689c      	ldr	r4, [r3, #8]
 8003578:	200c      	movs	r0, #12
 800357a:	f001 fda3 	bl	80050c4 <pvPortMalloc>
 800357e:	4603      	mov	r3, r0
 8003580:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <osMailCreate+0x36>
    return NULL;
 800358c:	2300      	movs	r3, #0
 800358e:	e038      	b.n	8003602 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	681c      	ldr	r4, [r3, #0]
 80035a4:	2200      	movs	r2, #0
 80035a6:	2104      	movs	r1, #4
 80035a8:	f000 f9bf 	bl	800392a <xQueueGenericCreate>
 80035ac:	4603      	mov	r3, r0
 80035ae:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d107      	bne.n	80035cc <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f001 fe40 	bl	8005248 <vPortFree>
    return NULL;
 80035c8:	2300      	movs	r3, #0
 80035ca:	e01a      	b.n	8003602 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	681c      	ldr	r4, [r3, #0]
 80035d2:	f107 030c 	add.w	r3, r7, #12
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7ff ff62 	bl	80034a0 <osPoolCreate>
 80035dc:	4603      	mov	r3, r0
 80035de:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d107      	bne.n	80035fc <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f001 fe28 	bl	8005248 <vPortFree>
    return NULL;
 80035f8:	2300      	movs	r3, #0
 80035fa:	e002      	b.n	8003602 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8003602:	4618      	mov	r0, r3
 8003604:	371c      	adds	r7, #28
 8003606:	46bd      	mov	sp, r7
 8003608:	bd90      	pop	{r4, r7, pc}

0800360a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f103 0208 	add.w	r2, r3, #8
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f04f 32ff 	mov.w	r2, #4294967295
 8003622:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f103 0208 	add.w	r2, r3, #8
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f103 0208 	add.w	r2, r3, #8
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	601a      	str	r2, [r3, #0]
}
 80036a0:	bf00      	nop
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c2:	d103      	bne.n	80036cc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	60fb      	str	r3, [r7, #12]
 80036ca:	e00c      	b.n	80036e6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3308      	adds	r3, #8
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	e002      	b.n	80036da <vListInsert+0x2e>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d2f6      	bcs.n	80036d4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	1c5a      	adds	r2, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	601a      	str	r2, [r3, #0]
}
 8003712:	bf00      	nop
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800371e:	b480      	push	{r7}
 8003720:	b085      	sub	sp, #20
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6892      	ldr	r2, [r2, #8]
 8003734:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6852      	ldr	r2, [r2, #4]
 800373e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	429a      	cmp	r2, r3
 8003748:	d103      	bne.n	8003752 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689a      	ldr	r2, [r3, #8]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	1e5a      	subs	r2, r3, #1
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
	...

08003774 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d109      	bne.n	800379c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378c:	f383 8811 	msr	BASEPRI, r3
 8003790:	f3bf 8f6f 	isb	sy
 8003794:	f3bf 8f4f 	dsb	sy
 8003798:	60bb      	str	r3, [r7, #8]
 800379a:	e7fe      	b.n	800379a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800379c:	f001 fbb6 	bl	8004f0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a8:	68f9      	ldr	r1, [r7, #12]
 80037aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037ac:	fb01 f303 	mul.w	r3, r1, r3
 80037b0:	441a      	add	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037cc:	3b01      	subs	r3, #1
 80037ce:	68f9      	ldr	r1, [r7, #12]
 80037d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037d2:	fb01 f303 	mul.w	r3, r1, r3
 80037d6:	441a      	add	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	22ff      	movs	r2, #255	; 0xff
 80037e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	22ff      	movs	r2, #255	; 0xff
 80037e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d114      	bne.n	800381c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d01a      	beq.n	8003830 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	3310      	adds	r3, #16
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 ff9c 	bl	800473c <xTaskRemoveFromEventList>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d012      	beq.n	8003830 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800380a:	4b0d      	ldr	r3, [pc, #52]	; (8003840 <xQueueGenericReset+0xcc>)
 800380c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	f3bf 8f4f 	dsb	sy
 8003816:	f3bf 8f6f 	isb	sy
 800381a:	e009      	b.n	8003830 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	3310      	adds	r3, #16
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff fef2 	bl	800360a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	3324      	adds	r3, #36	; 0x24
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff feed 	bl	800360a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003830:	f001 fb9a 	bl	8004f68 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003834:	2301      	movs	r3, #1
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	e000ed04 	.word	0xe000ed04

08003844 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003844:	b580      	push	{r7, lr}
 8003846:	b08e      	sub	sp, #56	; 0x38
 8003848:	af02      	add	r7, sp, #8
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
 8003850:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d109      	bne.n	800386c <xQueueGenericCreateStatic+0x28>
 8003858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385c:	f383 8811 	msr	BASEPRI, r3
 8003860:	f3bf 8f6f 	isb	sy
 8003864:	f3bf 8f4f 	dsb	sy
 8003868:	62bb      	str	r3, [r7, #40]	; 0x28
 800386a:	e7fe      	b.n	800386a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d109      	bne.n	8003886 <xQueueGenericCreateStatic+0x42>
 8003872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003876:	f383 8811 	msr	BASEPRI, r3
 800387a:	f3bf 8f6f 	isb	sy
 800387e:	f3bf 8f4f 	dsb	sy
 8003882:	627b      	str	r3, [r7, #36]	; 0x24
 8003884:	e7fe      	b.n	8003884 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d002      	beq.n	8003892 <xQueueGenericCreateStatic+0x4e>
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <xQueueGenericCreateStatic+0x52>
 8003892:	2301      	movs	r3, #1
 8003894:	e000      	b.n	8003898 <xQueueGenericCreateStatic+0x54>
 8003896:	2300      	movs	r3, #0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d109      	bne.n	80038b0 <xQueueGenericCreateStatic+0x6c>
 800389c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a0:	f383 8811 	msr	BASEPRI, r3
 80038a4:	f3bf 8f6f 	isb	sy
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	623b      	str	r3, [r7, #32]
 80038ae:	e7fe      	b.n	80038ae <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d102      	bne.n	80038bc <xQueueGenericCreateStatic+0x78>
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <xQueueGenericCreateStatic+0x7c>
 80038bc:	2301      	movs	r3, #1
 80038be:	e000      	b.n	80038c2 <xQueueGenericCreateStatic+0x7e>
 80038c0:	2300      	movs	r3, #0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d109      	bne.n	80038da <xQueueGenericCreateStatic+0x96>
 80038c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ca:	f383 8811 	msr	BASEPRI, r3
 80038ce:	f3bf 8f6f 	isb	sy
 80038d2:	f3bf 8f4f 	dsb	sy
 80038d6:	61fb      	str	r3, [r7, #28]
 80038d8:	e7fe      	b.n	80038d8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80038da:	2348      	movs	r3, #72	; 0x48
 80038dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2b48      	cmp	r3, #72	; 0x48
 80038e2:	d009      	beq.n	80038f8 <xQueueGenericCreateStatic+0xb4>
 80038e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e8:	f383 8811 	msr	BASEPRI, r3
 80038ec:	f3bf 8f6f 	isb	sy
 80038f0:	f3bf 8f4f 	dsb	sy
 80038f4:	61bb      	str	r3, [r7, #24]
 80038f6:	e7fe      	b.n	80038f6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80038f8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80038fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00d      	beq.n	8003920 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800390c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	4613      	mov	r3, r2
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	68b9      	ldr	r1, [r7, #8]
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 f844 	bl	80039a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003922:	4618      	mov	r0, r3
 8003924:	3730      	adds	r7, #48	; 0x30
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800392a:	b580      	push	{r7, lr}
 800392c:	b08a      	sub	sp, #40	; 0x28
 800392e:	af02      	add	r7, sp, #8
 8003930:	60f8      	str	r0, [r7, #12]
 8003932:	60b9      	str	r1, [r7, #8]
 8003934:	4613      	mov	r3, r2
 8003936:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <xQueueGenericCreate+0x28>
 800393e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003942:	f383 8811 	msr	BASEPRI, r3
 8003946:	f3bf 8f6f 	isb	sy
 800394a:	f3bf 8f4f 	dsb	sy
 800394e:	613b      	str	r3, [r7, #16]
 8003950:	e7fe      	b.n	8003950 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d102      	bne.n	800395e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003958:	2300      	movs	r3, #0
 800395a:	61fb      	str	r3, [r7, #28]
 800395c:	e004      	b.n	8003968 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	fb02 f303 	mul.w	r3, r2, r3
 8003966:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	3348      	adds	r3, #72	; 0x48
 800396c:	4618      	mov	r0, r3
 800396e:	f001 fba9 	bl	80050c4 <pvPortMalloc>
 8003972:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d011      	beq.n	800399e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	3348      	adds	r3, #72	; 0x48
 8003982:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800398c:	79fa      	ldrb	r2, [r7, #7]
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	4613      	mov	r3, r2
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	68b9      	ldr	r1, [r7, #8]
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 f805 	bl	80039a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800399e:	69bb      	ldr	r3, [r7, #24]
	}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3720      	adds	r7, #32
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
 80039b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d103      	bne.n	80039c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	601a      	str	r2, [r3, #0]
 80039c2:	e002      	b.n	80039ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80039d6:	2101      	movs	r1, #1
 80039d8:	69b8      	ldr	r0, [r7, #24]
 80039da:	f7ff fecb 	bl	8003774 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80039de:	bf00      	nop
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b082      	sub	sp, #8
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00e      	beq.n	8003a12 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003a06:	2300      	movs	r3, #0
 8003a08:	2200      	movs	r2, #0
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f837 	bl	8003a80 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003a12:	bf00      	nop
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b086      	sub	sp, #24
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	4603      	mov	r3, r0
 8003a22:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003a24:	2301      	movs	r3, #1
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	2300      	movs	r3, #0
 8003a2a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003a2c:	79fb      	ldrb	r3, [r7, #7]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	6939      	ldr	r1, [r7, #16]
 8003a32:	6978      	ldr	r0, [r7, #20]
 8003a34:	f7ff ff79 	bl	800392a <xQueueGenericCreate>
 8003a38:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f7ff ffd3 	bl	80039e6 <prvInitialiseMutex>

		return xNewQueue;
 8003a40:	68fb      	ldr	r3, [r7, #12]
	}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b088      	sub	sp, #32
 8003a4e:	af02      	add	r7, sp, #8
 8003a50:	4603      	mov	r3, r0
 8003a52:	6039      	str	r1, [r7, #0]
 8003a54:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003a56:	2301      	movs	r3, #1
 8003a58:	617b      	str	r3, [r7, #20]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003a5e:	79fb      	ldrb	r3, [r7, #7]
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2200      	movs	r2, #0
 8003a66:	6939      	ldr	r1, [r7, #16]
 8003a68:	6978      	ldr	r0, [r7, #20]
 8003a6a:	f7ff feeb 	bl	8003844 <xQueueGenericCreateStatic>
 8003a6e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f7ff ffb8 	bl	80039e6 <prvInitialiseMutex>

		return xNewQueue;
 8003a76:	68fb      	ldr	r3, [r7, #12]
	}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3718      	adds	r7, #24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b08e      	sub	sp, #56	; 0x38
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
 8003a8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d109      	bne.n	8003ab0 <xQueueGenericSend+0x30>
 8003a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa0:	f383 8811 	msr	BASEPRI, r3
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aae:	e7fe      	b.n	8003aae <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d103      	bne.n	8003abe <xQueueGenericSend+0x3e>
 8003ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <xQueueGenericSend+0x42>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e000      	b.n	8003ac4 <xQueueGenericSend+0x44>
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d109      	bne.n	8003adc <xQueueGenericSend+0x5c>
 8003ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003acc:	f383 8811 	msr	BASEPRI, r3
 8003ad0:	f3bf 8f6f 	isb	sy
 8003ad4:	f3bf 8f4f 	dsb	sy
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8003ada:	e7fe      	b.n	8003ada <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d103      	bne.n	8003aea <xQueueGenericSend+0x6a>
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d101      	bne.n	8003aee <xQueueGenericSend+0x6e>
 8003aea:	2301      	movs	r3, #1
 8003aec:	e000      	b.n	8003af0 <xQueueGenericSend+0x70>
 8003aee:	2300      	movs	r3, #0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d109      	bne.n	8003b08 <xQueueGenericSend+0x88>
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	623b      	str	r3, [r7, #32]
 8003b06:	e7fe      	b.n	8003b06 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b08:	f000 ffce 	bl	8004aa8 <xTaskGetSchedulerState>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d102      	bne.n	8003b18 <xQueueGenericSend+0x98>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <xQueueGenericSend+0x9c>
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e000      	b.n	8003b1e <xQueueGenericSend+0x9e>
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d109      	bne.n	8003b36 <xQueueGenericSend+0xb6>
 8003b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b26:	f383 8811 	msr	BASEPRI, r3
 8003b2a:	f3bf 8f6f 	isb	sy
 8003b2e:	f3bf 8f4f 	dsb	sy
 8003b32:	61fb      	str	r3, [r7, #28]
 8003b34:	e7fe      	b.n	8003b34 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b36:	f001 f9e9 	bl	8004f0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d302      	bcc.n	8003b4c <xQueueGenericSend+0xcc>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d129      	bne.n	8003ba0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	68b9      	ldr	r1, [r7, #8]
 8003b50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b52:	f000 f88f 	bl	8003c74 <prvCopyDataToQueue>
 8003b56:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d010      	beq.n	8003b82 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b62:	3324      	adds	r3, #36	; 0x24
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 fde9 	bl	800473c <xTaskRemoveFromEventList>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d013      	beq.n	8003b98 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003b70:	4b3f      	ldr	r3, [pc, #252]	; (8003c70 <xQueueGenericSend+0x1f0>)
 8003b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	f3bf 8f4f 	dsb	sy
 8003b7c:	f3bf 8f6f 	isb	sy
 8003b80:	e00a      	b.n	8003b98 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d007      	beq.n	8003b98 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003b88:	4b39      	ldr	r3, [pc, #228]	; (8003c70 <xQueueGenericSend+0x1f0>)
 8003b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b98:	f001 f9e6 	bl	8004f68 <vPortExitCritical>
				return pdPASS;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e063      	b.n	8003c68 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d103      	bne.n	8003bae <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ba6:	f001 f9df 	bl	8004f68 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003baa:	2300      	movs	r3, #0
 8003bac:	e05c      	b.n	8003c68 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d106      	bne.n	8003bc2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bb4:	f107 0314 	add.w	r3, r7, #20
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 fe21 	bl	8004800 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bc2:	f001 f9d1 	bl	8004f68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bc6:	f000 fbd9 	bl	800437c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bca:	f001 f99f 	bl	8004f0c <vPortEnterCritical>
 8003bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bd4:	b25b      	sxtb	r3, r3
 8003bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bda:	d103      	bne.n	8003be4 <xQueueGenericSend+0x164>
 8003bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bea:	b25b      	sxtb	r3, r3
 8003bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf0:	d103      	bne.n	8003bfa <xQueueGenericSend+0x17a>
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bfa:	f001 f9b5 	bl	8004f68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003bfe:	1d3a      	adds	r2, r7, #4
 8003c00:	f107 0314 	add.w	r3, r7, #20
 8003c04:	4611      	mov	r1, r2
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fe10 	bl	800482c <xTaskCheckForTimeOut>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d124      	bne.n	8003c5c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c14:	f000 f8ea 	bl	8003dec <prvIsQueueFull>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d018      	beq.n	8003c50 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c20:	3310      	adds	r3, #16
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	4611      	mov	r1, r2
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 fd64 	bl	80046f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003c2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c2e:	f000 f88b 	bl	8003d48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c32:	f000 fbb1 	bl	8004398 <xTaskResumeAll>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f47f af7c 	bne.w	8003b36 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003c3e:	4b0c      	ldr	r3, [pc, #48]	; (8003c70 <xQueueGenericSend+0x1f0>)
 8003c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	f3bf 8f4f 	dsb	sy
 8003c4a:	f3bf 8f6f 	isb	sy
 8003c4e:	e772      	b.n	8003b36 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003c50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c52:	f000 f879 	bl	8003d48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c56:	f000 fb9f 	bl	8004398 <xTaskResumeAll>
 8003c5a:	e76c      	b.n	8003b36 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003c5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c5e:	f000 f873 	bl	8003d48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c62:	f000 fb99 	bl	8004398 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3738      	adds	r7, #56	; 0x38
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	e000ed04 	.word	0xe000ed04

08003c74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003c80:	2300      	movs	r3, #0
 8003c82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10d      	bne.n	8003cae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d14d      	bne.n	8003d36 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 ff20 	bl	8004ae4 <xTaskPriorityDisinherit>
 8003ca4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	609a      	str	r2, [r3, #8]
 8003cac:	e043      	b.n	8003d36 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d119      	bne.n	8003ce8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6858      	ldr	r0, [r3, #4]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	f001 fcc4 	bl	800564c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ccc:	441a      	add	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d32b      	bcc.n	8003d36 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	605a      	str	r2, [r3, #4]
 8003ce6:	e026      	b.n	8003d36 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	68d8      	ldr	r0, [r3, #12]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	68b9      	ldr	r1, [r7, #8]
 8003cf4:	f001 fcaa 	bl	800564c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	68da      	ldr	r2, [r3, #12]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d00:	425b      	negs	r3, r3
 8003d02:	441a      	add	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	68da      	ldr	r2, [r3, #12]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d207      	bcs.n	8003d24 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	425b      	negs	r3, r3
 8003d1e:	441a      	add	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d105      	bne.n	8003d36 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	3b01      	subs	r3, #1
 8003d34:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1c5a      	adds	r2, r3, #1
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003d3e:	697b      	ldr	r3, [r7, #20]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003d50:	f001 f8dc 	bl	8004f0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d5c:	e011      	b.n	8003d82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d012      	beq.n	8003d8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3324      	adds	r3, #36	; 0x24
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 fce6 	bl	800473c <xTaskRemoveFromEventList>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003d76:	f000 fdb9 	bl	80048ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003d7a:	7bfb      	ldrb	r3, [r7, #15]
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	dce9      	bgt.n	8003d5e <prvUnlockQueue+0x16>
 8003d8a:	e000      	b.n	8003d8e <prvUnlockQueue+0x46>
					break;
 8003d8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	22ff      	movs	r2, #255	; 0xff
 8003d92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003d96:	f001 f8e7 	bl	8004f68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003d9a:	f001 f8b7 	bl	8004f0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003da4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003da6:	e011      	b.n	8003dcc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d012      	beq.n	8003dd6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3310      	adds	r3, #16
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 fcc1 	bl	800473c <xTaskRemoveFromEventList>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003dc0:	f000 fd94 	bl	80048ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003dc4:	7bbb      	ldrb	r3, [r7, #14]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003dcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	dce9      	bgt.n	8003da8 <prvUnlockQueue+0x60>
 8003dd4:	e000      	b.n	8003dd8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003dd6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	22ff      	movs	r2, #255	; 0xff
 8003ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003de0:	f001 f8c2 	bl	8004f68 <vPortExitCritical>
}
 8003de4:	bf00      	nop
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003df4:	f001 f88a 	bl	8004f0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d102      	bne.n	8003e0a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003e04:	2301      	movs	r3, #1
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	e001      	b.n	8003e0e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e0e:	f001 f8ab 	bl	8004f68 <vPortExitCritical>

	return xReturn;
 8003e12:	68fb      	ldr	r3, [r7, #12]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b08e      	sub	sp, #56	; 0x38
 8003e20:	af04      	add	r7, sp, #16
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
 8003e28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d109      	bne.n	8003e44 <xTaskCreateStatic+0x28>
 8003e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e34:	f383 8811 	msr	BASEPRI, r3
 8003e38:	f3bf 8f6f 	isb	sy
 8003e3c:	f3bf 8f4f 	dsb	sy
 8003e40:	623b      	str	r3, [r7, #32]
 8003e42:	e7fe      	b.n	8003e42 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d109      	bne.n	8003e5e <xTaskCreateStatic+0x42>
 8003e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4e:	f383 8811 	msr	BASEPRI, r3
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	61fb      	str	r3, [r7, #28]
 8003e5c:	e7fe      	b.n	8003e5c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e5e:	2354      	movs	r3, #84	; 0x54
 8003e60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	2b54      	cmp	r3, #84	; 0x54
 8003e66:	d009      	beq.n	8003e7c <xTaskCreateStatic+0x60>
 8003e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6c:	f383 8811 	msr	BASEPRI, r3
 8003e70:	f3bf 8f6f 	isb	sy
 8003e74:	f3bf 8f4f 	dsb	sy
 8003e78:	61bb      	str	r3, [r7, #24]
 8003e7a:	e7fe      	b.n	8003e7a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003e7c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d01e      	beq.n	8003ec2 <xTaskCreateStatic+0xa6>
 8003e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d01b      	beq.n	8003ec2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e8c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e92:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	9303      	str	r3, [sp, #12]
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	9302      	str	r3, [sp, #8]
 8003ea4:	f107 0314 	add.w	r3, r7, #20
 8003ea8:	9301      	str	r3, [sp, #4]
 8003eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	68b9      	ldr	r1, [r7, #8]
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 f850 	bl	8003f5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003eba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ebc:	f000 f8d4 	bl	8004068 <prvAddNewTaskToReadyList>
 8003ec0:	e001      	b.n	8003ec6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003ec6:	697b      	ldr	r3, [r7, #20]
	}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3728      	adds	r7, #40	; 0x28
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b08c      	sub	sp, #48	; 0x30
 8003ed4:	af04      	add	r7, sp, #16
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	603b      	str	r3, [r7, #0]
 8003edc:	4613      	mov	r3, r2
 8003ede:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ee0:	88fb      	ldrh	r3, [r7, #6]
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f001 f8ed 	bl	80050c4 <pvPortMalloc>
 8003eea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00e      	beq.n	8003f10 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ef2:	2054      	movs	r0, #84	; 0x54
 8003ef4:	f001 f8e6 	bl	80050c4 <pvPortMalloc>
 8003ef8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d003      	beq.n	8003f08 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	631a      	str	r2, [r3, #48]	; 0x30
 8003f06:	e005      	b.n	8003f14 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f08:	6978      	ldr	r0, [r7, #20]
 8003f0a:	f001 f99d 	bl	8005248 <vPortFree>
 8003f0e:	e001      	b.n	8003f14 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f10:	2300      	movs	r3, #0
 8003f12:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d017      	beq.n	8003f4a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f22:	88fa      	ldrh	r2, [r7, #6]
 8003f24:	2300      	movs	r3, #0
 8003f26:	9303      	str	r3, [sp, #12]
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	9302      	str	r3, [sp, #8]
 8003f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2e:	9301      	str	r3, [sp, #4]
 8003f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	68b9      	ldr	r1, [r7, #8]
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 f80e 	bl	8003f5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f3e:	69f8      	ldr	r0, [r7, #28]
 8003f40:	f000 f892 	bl	8004068 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f44:	2301      	movs	r3, #1
 8003f46:	61bb      	str	r3, [r7, #24]
 8003f48:	e002      	b.n	8003f50 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f50:	69bb      	ldr	r3, [r7, #24]
	}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3720      	adds	r7, #32
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b088      	sub	sp, #32
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	60f8      	str	r0, [r7, #12]
 8003f62:	60b9      	str	r1, [r7, #8]
 8003f64:	607a      	str	r2, [r7, #4]
 8003f66:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f72:	3b01      	subs	r3, #1
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	f023 0307 	bic.w	r3, r3, #7
 8003f80:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	f003 0307 	and.w	r3, r3, #7
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d009      	beq.n	8003fa0 <prvInitialiseNewTask+0x46>
 8003f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f90:	f383 8811 	msr	BASEPRI, r3
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	617b      	str	r3, [r7, #20]
 8003f9e:	e7fe      	b.n	8003f9e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d01f      	beq.n	8003fe6 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	61fb      	str	r3, [r7, #28]
 8003faa:	e012      	b.n	8003fd2 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	7819      	ldrb	r1, [r3, #0]
 8003fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	4413      	add	r3, r2
 8003fba:	3334      	adds	r3, #52	; 0x34
 8003fbc:	460a      	mov	r2, r1
 8003fbe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d006      	beq.n	8003fda <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	61fb      	str	r3, [r7, #28]
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	2b0f      	cmp	r3, #15
 8003fd6:	d9e9      	bls.n	8003fac <prvInitialiseNewTask+0x52>
 8003fd8:	e000      	b.n	8003fdc <prvInitialiseNewTask+0x82>
			{
				break;
 8003fda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fe4:	e003      	b.n	8003fee <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff0:	2b06      	cmp	r3, #6
 8003ff2:	d901      	bls.n	8003ff8 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ff4:	2306      	movs	r3, #6
 8003ff6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ffc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004000:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004002:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004006:	2200      	movs	r2, #0
 8004008:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800400a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400c:	3304      	adds	r3, #4
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff fb1b 	bl	800364a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004016:	3318      	adds	r3, #24
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff fb16 	bl	800364a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800401e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004022:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004026:	f1c3 0207 	rsb	r2, r3, #7
 800402a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800402e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004032:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004036:	2200      	movs	r2, #0
 8004038:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800403a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	68f9      	ldr	r1, [r7, #12]
 8004046:	69b8      	ldr	r0, [r7, #24]
 8004048:	f000 fe36 	bl	8004cb8 <pxPortInitialiseStack>
 800404c:	4602      	mov	r2, r0
 800404e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004050:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004054:	2b00      	cmp	r3, #0
 8004056:	d002      	beq.n	800405e <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800405c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800405e:	bf00      	nop
 8004060:	3720      	adds	r7, #32
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
	...

08004068 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004070:	f000 ff4c 	bl	8004f0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004074:	4b2a      	ldr	r3, [pc, #168]	; (8004120 <prvAddNewTaskToReadyList+0xb8>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	3301      	adds	r3, #1
 800407a:	4a29      	ldr	r2, [pc, #164]	; (8004120 <prvAddNewTaskToReadyList+0xb8>)
 800407c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800407e:	4b29      	ldr	r3, [pc, #164]	; (8004124 <prvAddNewTaskToReadyList+0xbc>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d109      	bne.n	800409a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004086:	4a27      	ldr	r2, [pc, #156]	; (8004124 <prvAddNewTaskToReadyList+0xbc>)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800408c:	4b24      	ldr	r3, [pc, #144]	; (8004120 <prvAddNewTaskToReadyList+0xb8>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d110      	bne.n	80040b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004094:	f000 fc4e 	bl	8004934 <prvInitialiseTaskLists>
 8004098:	e00d      	b.n	80040b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800409a:	4b23      	ldr	r3, [pc, #140]	; (8004128 <prvAddNewTaskToReadyList+0xc0>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d109      	bne.n	80040b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80040a2:	4b20      	ldr	r3, [pc, #128]	; (8004124 <prvAddNewTaskToReadyList+0xbc>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d802      	bhi.n	80040b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80040b0:	4a1c      	ldr	r2, [pc, #112]	; (8004124 <prvAddNewTaskToReadyList+0xbc>)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80040b6:	4b1d      	ldr	r3, [pc, #116]	; (800412c <prvAddNewTaskToReadyList+0xc4>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	3301      	adds	r3, #1
 80040bc:	4a1b      	ldr	r2, [pc, #108]	; (800412c <prvAddNewTaskToReadyList+0xc4>)
 80040be:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c4:	2201      	movs	r2, #1
 80040c6:	409a      	lsls	r2, r3
 80040c8:	4b19      	ldr	r3, [pc, #100]	; (8004130 <prvAddNewTaskToReadyList+0xc8>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	4a18      	ldr	r2, [pc, #96]	; (8004130 <prvAddNewTaskToReadyList+0xc8>)
 80040d0:	6013      	str	r3, [r2, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d6:	4613      	mov	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4413      	add	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4a15      	ldr	r2, [pc, #84]	; (8004134 <prvAddNewTaskToReadyList+0xcc>)
 80040e0:	441a      	add	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3304      	adds	r3, #4
 80040e6:	4619      	mov	r1, r3
 80040e8:	4610      	mov	r0, r2
 80040ea:	f7ff fabb 	bl	8003664 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80040ee:	f000 ff3b 	bl	8004f68 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80040f2:	4b0d      	ldr	r3, [pc, #52]	; (8004128 <prvAddNewTaskToReadyList+0xc0>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00e      	beq.n	8004118 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80040fa:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <prvAddNewTaskToReadyList+0xbc>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004104:	429a      	cmp	r2, r3
 8004106:	d207      	bcs.n	8004118 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004108:	4b0b      	ldr	r3, [pc, #44]	; (8004138 <prvAddNewTaskToReadyList+0xd0>)
 800410a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004118:	bf00      	nop
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	20000380 	.word	0x20000380
 8004124:	20000280 	.word	0x20000280
 8004128:	2000038c 	.word	0x2000038c
 800412c:	2000039c 	.word	0x2000039c
 8004130:	20000388 	.word	0x20000388
 8004134:	20000284 	.word	0x20000284
 8004138:	e000ed04 	.word	0xe000ed04

0800413c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004144:	f000 fee2 	bl	8004f0c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d102      	bne.n	8004154 <vTaskDelete+0x18>
 800414e:	4b38      	ldr	r3, [pc, #224]	; (8004230 <vTaskDelete+0xf4>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	e000      	b.n	8004156 <vTaskDelete+0x1a>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	3304      	adds	r3, #4
 800415c:	4618      	mov	r0, r3
 800415e:	f7ff fade 	bl	800371e <uxListRemove>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d115      	bne.n	8004194 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800416c:	4931      	ldr	r1, [pc, #196]	; (8004234 <vTaskDelete+0xf8>)
 800416e:	4613      	mov	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	440b      	add	r3, r1
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10a      	bne.n	8004194 <vTaskDelete+0x58>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004182:	2201      	movs	r2, #1
 8004184:	fa02 f303 	lsl.w	r3, r2, r3
 8004188:	43da      	mvns	r2, r3
 800418a:	4b2b      	ldr	r3, [pc, #172]	; (8004238 <vTaskDelete+0xfc>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4013      	ands	r3, r2
 8004190:	4a29      	ldr	r2, [pc, #164]	; (8004238 <vTaskDelete+0xfc>)
 8004192:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004198:	2b00      	cmp	r3, #0
 800419a:	d004      	beq.n	80041a6 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	3318      	adds	r3, #24
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7ff fabc 	bl	800371e <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80041a6:	4b25      	ldr	r3, [pc, #148]	; (800423c <vTaskDelete+0x100>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	3301      	adds	r3, #1
 80041ac:	4a23      	ldr	r2, [pc, #140]	; (800423c <vTaskDelete+0x100>)
 80041ae:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80041b0:	4b1f      	ldr	r3, [pc, #124]	; (8004230 <vTaskDelete+0xf4>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d10b      	bne.n	80041d2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	3304      	adds	r3, #4
 80041be:	4619      	mov	r1, r3
 80041c0:	481f      	ldr	r0, [pc, #124]	; (8004240 <vTaskDelete+0x104>)
 80041c2:	f7ff fa4f 	bl	8003664 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80041c6:	4b1f      	ldr	r3, [pc, #124]	; (8004244 <vTaskDelete+0x108>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	3301      	adds	r3, #1
 80041cc:	4a1d      	ldr	r2, [pc, #116]	; (8004244 <vTaskDelete+0x108>)
 80041ce:	6013      	str	r3, [r2, #0]
 80041d0:	e009      	b.n	80041e6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80041d2:	4b1d      	ldr	r3, [pc, #116]	; (8004248 <vTaskDelete+0x10c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	3b01      	subs	r3, #1
 80041d8:	4a1b      	ldr	r2, [pc, #108]	; (8004248 <vTaskDelete+0x10c>)
 80041da:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 fc15 	bl	8004a0c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80041e2:	f000 fc41 	bl	8004a68 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80041e6:	f000 febf 	bl	8004f68 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80041ea:	4b18      	ldr	r3, [pc, #96]	; (800424c <vTaskDelete+0x110>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d01a      	beq.n	8004228 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 80041f2:	4b0f      	ldr	r3, [pc, #60]	; (8004230 <vTaskDelete+0xf4>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d115      	bne.n	8004228 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80041fc:	4b14      	ldr	r3, [pc, #80]	; (8004250 <vTaskDelete+0x114>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d009      	beq.n	8004218 <vTaskDelete+0xdc>
 8004204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	60bb      	str	r3, [r7, #8]
 8004216:	e7fe      	b.n	8004216 <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 8004218:	4b0e      	ldr	r3, [pc, #56]	; (8004254 <vTaskDelete+0x118>)
 800421a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004228:	bf00      	nop
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	20000280 	.word	0x20000280
 8004234:	20000284 	.word	0x20000284
 8004238:	20000388 	.word	0x20000388
 800423c:	2000039c 	.word	0x2000039c
 8004240:	20000354 	.word	0x20000354
 8004244:	20000368 	.word	0x20000368
 8004248:	20000380 	.word	0x20000380
 800424c:	2000038c 	.word	0x2000038c
 8004250:	200003a8 	.word	0x200003a8
 8004254:	e000ed04 	.word	0xe000ed04

08004258 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004260:	2300      	movs	r3, #0
 8004262:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d016      	beq.n	8004298 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800426a:	4b13      	ldr	r3, [pc, #76]	; (80042b8 <vTaskDelay+0x60>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d009      	beq.n	8004286 <vTaskDelay+0x2e>
 8004272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004276:	f383 8811 	msr	BASEPRI, r3
 800427a:	f3bf 8f6f 	isb	sy
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	60bb      	str	r3, [r7, #8]
 8004284:	e7fe      	b.n	8004284 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004286:	f000 f879 	bl	800437c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800428a:	2100      	movs	r1, #0
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 fcad 	bl	8004bec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004292:	f000 f881 	bl	8004398 <xTaskResumeAll>
 8004296:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d107      	bne.n	80042ae <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800429e:	4b07      	ldr	r3, [pc, #28]	; (80042bc <vTaskDelay+0x64>)
 80042a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042a4:	601a      	str	r2, [r3, #0]
 80042a6:	f3bf 8f4f 	dsb	sy
 80042aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80042ae:	bf00      	nop
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	200003a8 	.word	0x200003a8
 80042bc:	e000ed04 	.word	0xe000ed04

080042c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b08a      	sub	sp, #40	; 0x28
 80042c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80042c6:	2300      	movs	r3, #0
 80042c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80042ca:	2300      	movs	r3, #0
 80042cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80042ce:	463a      	mov	r2, r7
 80042d0:	1d39      	adds	r1, r7, #4
 80042d2:	f107 0308 	add.w	r3, r7, #8
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fc f8fa 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80042dc:	6839      	ldr	r1, [r7, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	9202      	str	r2, [sp, #8]
 80042e4:	9301      	str	r3, [sp, #4]
 80042e6:	2300      	movs	r3, #0
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	2300      	movs	r3, #0
 80042ec:	460a      	mov	r2, r1
 80042ee:	491d      	ldr	r1, [pc, #116]	; (8004364 <vTaskStartScheduler+0xa4>)
 80042f0:	481d      	ldr	r0, [pc, #116]	; (8004368 <vTaskStartScheduler+0xa8>)
 80042f2:	f7ff fd93 	bl	8003e1c <xTaskCreateStatic>
 80042f6:	4602      	mov	r2, r0
 80042f8:	4b1c      	ldr	r3, [pc, #112]	; (800436c <vTaskStartScheduler+0xac>)
 80042fa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80042fc:	4b1b      	ldr	r3, [pc, #108]	; (800436c <vTaskStartScheduler+0xac>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d002      	beq.n	800430a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004304:	2301      	movs	r3, #1
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	e001      	b.n	800430e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800430a:	2300      	movs	r3, #0
 800430c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d115      	bne.n	8004340 <vTaskStartScheduler+0x80>
 8004314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004326:	4b12      	ldr	r3, [pc, #72]	; (8004370 <vTaskStartScheduler+0xb0>)
 8004328:	f04f 32ff 	mov.w	r2, #4294967295
 800432c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800432e:	4b11      	ldr	r3, [pc, #68]	; (8004374 <vTaskStartScheduler+0xb4>)
 8004330:	2201      	movs	r2, #1
 8004332:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004334:	4b10      	ldr	r3, [pc, #64]	; (8004378 <vTaskStartScheduler+0xb8>)
 8004336:	2200      	movs	r2, #0
 8004338:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800433a:	f000 fd49 	bl	8004dd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800433e:	e00d      	b.n	800435c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004346:	d109      	bne.n	800435c <vTaskStartScheduler+0x9c>
 8004348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434c:	f383 8811 	msr	BASEPRI, r3
 8004350:	f3bf 8f6f 	isb	sy
 8004354:	f3bf 8f4f 	dsb	sy
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	e7fe      	b.n	800435a <vTaskStartScheduler+0x9a>
}
 800435c:	bf00      	nop
 800435e:	3718      	adds	r7, #24
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	080056b4 	.word	0x080056b4
 8004368:	08004905 	.word	0x08004905
 800436c:	200003a4 	.word	0x200003a4
 8004370:	200003a0 	.word	0x200003a0
 8004374:	2000038c 	.word	0x2000038c
 8004378:	20000384 	.word	0x20000384

0800437c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004380:	4b04      	ldr	r3, [pc, #16]	; (8004394 <vTaskSuspendAll+0x18>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	3301      	adds	r3, #1
 8004386:	4a03      	ldr	r2, [pc, #12]	; (8004394 <vTaskSuspendAll+0x18>)
 8004388:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800438a:	bf00      	nop
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	200003a8 	.word	0x200003a8

08004398 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800439e:	2300      	movs	r3, #0
 80043a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80043a2:	2300      	movs	r3, #0
 80043a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80043a6:	4b41      	ldr	r3, [pc, #260]	; (80044ac <xTaskResumeAll+0x114>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d109      	bne.n	80043c2 <xTaskResumeAll+0x2a>
 80043ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b2:	f383 8811 	msr	BASEPRI, r3
 80043b6:	f3bf 8f6f 	isb	sy
 80043ba:	f3bf 8f4f 	dsb	sy
 80043be:	603b      	str	r3, [r7, #0]
 80043c0:	e7fe      	b.n	80043c0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80043c2:	f000 fda3 	bl	8004f0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80043c6:	4b39      	ldr	r3, [pc, #228]	; (80044ac <xTaskResumeAll+0x114>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	4a37      	ldr	r2, [pc, #220]	; (80044ac <xTaskResumeAll+0x114>)
 80043ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043d0:	4b36      	ldr	r3, [pc, #216]	; (80044ac <xTaskResumeAll+0x114>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d161      	bne.n	800449c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80043d8:	4b35      	ldr	r3, [pc, #212]	; (80044b0 <xTaskResumeAll+0x118>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d05d      	beq.n	800449c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043e0:	e02e      	b.n	8004440 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043e2:	4b34      	ldr	r3, [pc, #208]	; (80044b4 <xTaskResumeAll+0x11c>)
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	3318      	adds	r3, #24
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff f995 	bl	800371e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	3304      	adds	r3, #4
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff f990 	bl	800371e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004402:	2201      	movs	r2, #1
 8004404:	409a      	lsls	r2, r3
 8004406:	4b2c      	ldr	r3, [pc, #176]	; (80044b8 <xTaskResumeAll+0x120>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4313      	orrs	r3, r2
 800440c:	4a2a      	ldr	r2, [pc, #168]	; (80044b8 <xTaskResumeAll+0x120>)
 800440e:	6013      	str	r3, [r2, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004414:	4613      	mov	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4a27      	ldr	r2, [pc, #156]	; (80044bc <xTaskResumeAll+0x124>)
 800441e:	441a      	add	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	3304      	adds	r3, #4
 8004424:	4619      	mov	r1, r3
 8004426:	4610      	mov	r0, r2
 8004428:	f7ff f91c 	bl	8003664 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004430:	4b23      	ldr	r3, [pc, #140]	; (80044c0 <xTaskResumeAll+0x128>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004436:	429a      	cmp	r2, r3
 8004438:	d302      	bcc.n	8004440 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800443a:	4b22      	ldr	r3, [pc, #136]	; (80044c4 <xTaskResumeAll+0x12c>)
 800443c:	2201      	movs	r2, #1
 800443e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004440:	4b1c      	ldr	r3, [pc, #112]	; (80044b4 <xTaskResumeAll+0x11c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1cc      	bne.n	80043e2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800444e:	f000 fb0b 	bl	8004a68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004452:	4b1d      	ldr	r3, [pc, #116]	; (80044c8 <xTaskResumeAll+0x130>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d010      	beq.n	8004480 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800445e:	f000 f837 	bl	80044d0 <xTaskIncrementTick>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004468:	4b16      	ldr	r3, [pc, #88]	; (80044c4 <xTaskResumeAll+0x12c>)
 800446a:	2201      	movs	r2, #1
 800446c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	3b01      	subs	r3, #1
 8004472:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1f1      	bne.n	800445e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800447a:	4b13      	ldr	r3, [pc, #76]	; (80044c8 <xTaskResumeAll+0x130>)
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004480:	4b10      	ldr	r3, [pc, #64]	; (80044c4 <xTaskResumeAll+0x12c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d009      	beq.n	800449c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004488:	2301      	movs	r3, #1
 800448a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800448c:	4b0f      	ldr	r3, [pc, #60]	; (80044cc <xTaskResumeAll+0x134>)
 800448e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	f3bf 8f4f 	dsb	sy
 8004498:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800449c:	f000 fd64 	bl	8004f68 <vPortExitCritical>

	return xAlreadyYielded;
 80044a0:	68bb      	ldr	r3, [r7, #8]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	200003a8 	.word	0x200003a8
 80044b0:	20000380 	.word	0x20000380
 80044b4:	20000340 	.word	0x20000340
 80044b8:	20000388 	.word	0x20000388
 80044bc:	20000284 	.word	0x20000284
 80044c0:	20000280 	.word	0x20000280
 80044c4:	20000394 	.word	0x20000394
 80044c8:	20000390 	.word	0x20000390
 80044cc:	e000ed04 	.word	0xe000ed04

080044d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80044d6:	2300      	movs	r3, #0
 80044d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044da:	4b4e      	ldr	r3, [pc, #312]	; (8004614 <xTaskIncrementTick+0x144>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f040 8087 	bne.w	80045f2 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80044e4:	4b4c      	ldr	r3, [pc, #304]	; (8004618 <xTaskIncrementTick+0x148>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3301      	adds	r3, #1
 80044ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80044ec:	4a4a      	ldr	r2, [pc, #296]	; (8004618 <xTaskIncrementTick+0x148>)
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d11f      	bne.n	8004538 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80044f8:	4b48      	ldr	r3, [pc, #288]	; (800461c <xTaskIncrementTick+0x14c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d009      	beq.n	8004516 <xTaskIncrementTick+0x46>
 8004502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004506:	f383 8811 	msr	BASEPRI, r3
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	603b      	str	r3, [r7, #0]
 8004514:	e7fe      	b.n	8004514 <xTaskIncrementTick+0x44>
 8004516:	4b41      	ldr	r3, [pc, #260]	; (800461c <xTaskIncrementTick+0x14c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	4b40      	ldr	r3, [pc, #256]	; (8004620 <xTaskIncrementTick+0x150>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a3e      	ldr	r2, [pc, #248]	; (800461c <xTaskIncrementTick+0x14c>)
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	4a3e      	ldr	r2, [pc, #248]	; (8004620 <xTaskIncrementTick+0x150>)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	4b3e      	ldr	r3, [pc, #248]	; (8004624 <xTaskIncrementTick+0x154>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	3301      	adds	r3, #1
 8004530:	4a3c      	ldr	r2, [pc, #240]	; (8004624 <xTaskIncrementTick+0x154>)
 8004532:	6013      	str	r3, [r2, #0]
 8004534:	f000 fa98 	bl	8004a68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004538:	4b3b      	ldr	r3, [pc, #236]	; (8004628 <xTaskIncrementTick+0x158>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	429a      	cmp	r2, r3
 8004540:	d348      	bcc.n	80045d4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004542:	4b36      	ldr	r3, [pc, #216]	; (800461c <xTaskIncrementTick+0x14c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d104      	bne.n	8004556 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800454c:	4b36      	ldr	r3, [pc, #216]	; (8004628 <xTaskIncrementTick+0x158>)
 800454e:	f04f 32ff 	mov.w	r2, #4294967295
 8004552:	601a      	str	r2, [r3, #0]
					break;
 8004554:	e03e      	b.n	80045d4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004556:	4b31      	ldr	r3, [pc, #196]	; (800461c <xTaskIncrementTick+0x14c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	429a      	cmp	r2, r3
 800456c:	d203      	bcs.n	8004576 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800456e:	4a2e      	ldr	r2, [pc, #184]	; (8004628 <xTaskIncrementTick+0x158>)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004574:	e02e      	b.n	80045d4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	3304      	adds	r3, #4
 800457a:	4618      	mov	r0, r3
 800457c:	f7ff f8cf 	bl	800371e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004584:	2b00      	cmp	r3, #0
 8004586:	d004      	beq.n	8004592 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	3318      	adds	r3, #24
 800458c:	4618      	mov	r0, r3
 800458e:	f7ff f8c6 	bl	800371e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004596:	2201      	movs	r2, #1
 8004598:	409a      	lsls	r2, r3
 800459a:	4b24      	ldr	r3, [pc, #144]	; (800462c <xTaskIncrementTick+0x15c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4313      	orrs	r3, r2
 80045a0:	4a22      	ldr	r2, [pc, #136]	; (800462c <xTaskIncrementTick+0x15c>)
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a8:	4613      	mov	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4413      	add	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4a1f      	ldr	r2, [pc, #124]	; (8004630 <xTaskIncrementTick+0x160>)
 80045b2:	441a      	add	r2, r3
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	3304      	adds	r3, #4
 80045b8:	4619      	mov	r1, r3
 80045ba:	4610      	mov	r0, r2
 80045bc:	f7ff f852 	bl	8003664 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c4:	4b1b      	ldr	r3, [pc, #108]	; (8004634 <xTaskIncrementTick+0x164>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d3b9      	bcc.n	8004542 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80045ce:	2301      	movs	r3, #1
 80045d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045d2:	e7b6      	b.n	8004542 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80045d4:	4b17      	ldr	r3, [pc, #92]	; (8004634 <xTaskIncrementTick+0x164>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045da:	4915      	ldr	r1, [pc, #84]	; (8004630 <xTaskIncrementTick+0x160>)
 80045dc:	4613      	mov	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	440b      	add	r3, r1
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d907      	bls.n	80045fc <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80045ec:	2301      	movs	r3, #1
 80045ee:	617b      	str	r3, [r7, #20]
 80045f0:	e004      	b.n	80045fc <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80045f2:	4b11      	ldr	r3, [pc, #68]	; (8004638 <xTaskIncrementTick+0x168>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	3301      	adds	r3, #1
 80045f8:	4a0f      	ldr	r2, [pc, #60]	; (8004638 <xTaskIncrementTick+0x168>)
 80045fa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80045fc:	4b0f      	ldr	r3, [pc, #60]	; (800463c <xTaskIncrementTick+0x16c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8004604:	2301      	movs	r3, #1
 8004606:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004608:	697b      	ldr	r3, [r7, #20]
}
 800460a:	4618      	mov	r0, r3
 800460c:	3718      	adds	r7, #24
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	200003a8 	.word	0x200003a8
 8004618:	20000384 	.word	0x20000384
 800461c:	20000338 	.word	0x20000338
 8004620:	2000033c 	.word	0x2000033c
 8004624:	20000398 	.word	0x20000398
 8004628:	200003a0 	.word	0x200003a0
 800462c:	20000388 	.word	0x20000388
 8004630:	20000284 	.word	0x20000284
 8004634:	20000280 	.word	0x20000280
 8004638:	20000390 	.word	0x20000390
 800463c:	20000394 	.word	0x20000394

08004640 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004640:	b480      	push	{r7}
 8004642:	b087      	sub	sp, #28
 8004644:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004646:	4b26      	ldr	r3, [pc, #152]	; (80046e0 <vTaskSwitchContext+0xa0>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800464e:	4b25      	ldr	r3, [pc, #148]	; (80046e4 <vTaskSwitchContext+0xa4>)
 8004650:	2201      	movs	r2, #1
 8004652:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004654:	e03e      	b.n	80046d4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004656:	4b23      	ldr	r3, [pc, #140]	; (80046e4 <vTaskSwitchContext+0xa4>)
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800465c:	4b22      	ldr	r3, [pc, #136]	; (80046e8 <vTaskSwitchContext+0xa8>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	fab3 f383 	clz	r3, r3
 8004668:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800466a:	7afb      	ldrb	r3, [r7, #11]
 800466c:	f1c3 031f 	rsb	r3, r3, #31
 8004670:	617b      	str	r3, [r7, #20]
 8004672:	491e      	ldr	r1, [pc, #120]	; (80046ec <vTaskSwitchContext+0xac>)
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	4613      	mov	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	440b      	add	r3, r1
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d109      	bne.n	800469a <vTaskSwitchContext+0x5a>
	__asm volatile
 8004686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468a:	f383 8811 	msr	BASEPRI, r3
 800468e:	f3bf 8f6f 	isb	sy
 8004692:	f3bf 8f4f 	dsb	sy
 8004696:	607b      	str	r3, [r7, #4]
 8004698:	e7fe      	b.n	8004698 <vTaskSwitchContext+0x58>
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	4613      	mov	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4a11      	ldr	r2, [pc, #68]	; (80046ec <vTaskSwitchContext+0xac>)
 80046a6:	4413      	add	r3, r2
 80046a8:	613b      	str	r3, [r7, #16]
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	605a      	str	r2, [r3, #4]
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	3308      	adds	r3, #8
 80046bc:	429a      	cmp	r2, r3
 80046be:	d104      	bne.n	80046ca <vTaskSwitchContext+0x8a>
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	605a      	str	r2, [r3, #4]
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	4a07      	ldr	r2, [pc, #28]	; (80046f0 <vTaskSwitchContext+0xb0>)
 80046d2:	6013      	str	r3, [r2, #0]
}
 80046d4:	bf00      	nop
 80046d6:	371c      	adds	r7, #28
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	200003a8 	.word	0x200003a8
 80046e4:	20000394 	.word	0x20000394
 80046e8:	20000388 	.word	0x20000388
 80046ec:	20000284 	.word	0x20000284
 80046f0:	20000280 	.word	0x20000280

080046f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d109      	bne.n	8004718 <vTaskPlaceOnEventList+0x24>
 8004704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004708:	f383 8811 	msr	BASEPRI, r3
 800470c:	f3bf 8f6f 	isb	sy
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	e7fe      	b.n	8004716 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004718:	4b07      	ldr	r3, [pc, #28]	; (8004738 <vTaskPlaceOnEventList+0x44>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	3318      	adds	r3, #24
 800471e:	4619      	mov	r1, r3
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f7fe ffc3 	bl	80036ac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004726:	2101      	movs	r1, #1
 8004728:	6838      	ldr	r0, [r7, #0]
 800472a:	f000 fa5f 	bl	8004bec <prvAddCurrentTaskToDelayedList>
}
 800472e:	bf00      	nop
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	20000280 	.word	0x20000280

0800473c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d109      	bne.n	8004766 <xTaskRemoveFromEventList+0x2a>
 8004752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004756:	f383 8811 	msr	BASEPRI, r3
 800475a:	f3bf 8f6f 	isb	sy
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	e7fe      	b.n	8004764 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	3318      	adds	r3, #24
 800476a:	4618      	mov	r0, r3
 800476c:	f7fe ffd7 	bl	800371e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004770:	4b1d      	ldr	r3, [pc, #116]	; (80047e8 <xTaskRemoveFromEventList+0xac>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d11c      	bne.n	80047b2 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	3304      	adds	r3, #4
 800477c:	4618      	mov	r0, r3
 800477e:	f7fe ffce 	bl	800371e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004786:	2201      	movs	r2, #1
 8004788:	409a      	lsls	r2, r3
 800478a:	4b18      	ldr	r3, [pc, #96]	; (80047ec <xTaskRemoveFromEventList+0xb0>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4313      	orrs	r3, r2
 8004790:	4a16      	ldr	r2, [pc, #88]	; (80047ec <xTaskRemoveFromEventList+0xb0>)
 8004792:	6013      	str	r3, [r2, #0]
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004798:	4613      	mov	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4a13      	ldr	r2, [pc, #76]	; (80047f0 <xTaskRemoveFromEventList+0xb4>)
 80047a2:	441a      	add	r2, r3
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	3304      	adds	r3, #4
 80047a8:	4619      	mov	r1, r3
 80047aa:	4610      	mov	r0, r2
 80047ac:	f7fe ff5a 	bl	8003664 <vListInsertEnd>
 80047b0:	e005      	b.n	80047be <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	3318      	adds	r3, #24
 80047b6:	4619      	mov	r1, r3
 80047b8:	480e      	ldr	r0, [pc, #56]	; (80047f4 <xTaskRemoveFromEventList+0xb8>)
 80047ba:	f7fe ff53 	bl	8003664 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c2:	4b0d      	ldr	r3, [pc, #52]	; (80047f8 <xTaskRemoveFromEventList+0xbc>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d905      	bls.n	80047d8 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80047cc:	2301      	movs	r3, #1
 80047ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80047d0:	4b0a      	ldr	r3, [pc, #40]	; (80047fc <xTaskRemoveFromEventList+0xc0>)
 80047d2:	2201      	movs	r2, #1
 80047d4:	601a      	str	r2, [r3, #0]
 80047d6:	e001      	b.n	80047dc <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80047d8:	2300      	movs	r3, #0
 80047da:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80047dc:	697b      	ldr	r3, [r7, #20]
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3718      	adds	r7, #24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	200003a8 	.word	0x200003a8
 80047ec:	20000388 	.word	0x20000388
 80047f0:	20000284 	.word	0x20000284
 80047f4:	20000340 	.word	0x20000340
 80047f8:	20000280 	.word	0x20000280
 80047fc:	20000394 	.word	0x20000394

08004800 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004808:	4b06      	ldr	r3, [pc, #24]	; (8004824 <vTaskInternalSetTimeOutState+0x24>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004810:	4b05      	ldr	r3, [pc, #20]	; (8004828 <vTaskInternalSetTimeOutState+0x28>)
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	605a      	str	r2, [r3, #4]
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	20000398 	.word	0x20000398
 8004828:	20000384 	.word	0x20000384

0800482c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b088      	sub	sp, #32
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d109      	bne.n	8004850 <xTaskCheckForTimeOut+0x24>
 800483c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004840:	f383 8811 	msr	BASEPRI, r3
 8004844:	f3bf 8f6f 	isb	sy
 8004848:	f3bf 8f4f 	dsb	sy
 800484c:	613b      	str	r3, [r7, #16]
 800484e:	e7fe      	b.n	800484e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d109      	bne.n	800486a <xTaskCheckForTimeOut+0x3e>
 8004856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485a:	f383 8811 	msr	BASEPRI, r3
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	f3bf 8f4f 	dsb	sy
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	e7fe      	b.n	8004868 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800486a:	f000 fb4f 	bl	8004f0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800486e:	4b1d      	ldr	r3, [pc, #116]	; (80048e4 <xTaskCheckForTimeOut+0xb8>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004886:	d102      	bne.n	800488e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004888:	2300      	movs	r3, #0
 800488a:	61fb      	str	r3, [r7, #28]
 800488c:	e023      	b.n	80048d6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	4b15      	ldr	r3, [pc, #84]	; (80048e8 <xTaskCheckForTimeOut+0xbc>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	429a      	cmp	r2, r3
 8004898:	d007      	beq.n	80048aa <xTaskCheckForTimeOut+0x7e>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d302      	bcc.n	80048aa <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80048a4:	2301      	movs	r3, #1
 80048a6:	61fb      	str	r3, [r7, #28]
 80048a8:	e015      	b.n	80048d6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d20b      	bcs.n	80048cc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	1ad2      	subs	r2, r2, r3
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7ff ff9d 	bl	8004800 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80048c6:	2300      	movs	r3, #0
 80048c8:	61fb      	str	r3, [r7, #28]
 80048ca:	e004      	b.n	80048d6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	2200      	movs	r2, #0
 80048d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80048d2:	2301      	movs	r3, #1
 80048d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80048d6:	f000 fb47 	bl	8004f68 <vPortExitCritical>

	return xReturn;
 80048da:	69fb      	ldr	r3, [r7, #28]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3720      	adds	r7, #32
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	20000384 	.word	0x20000384
 80048e8:	20000398 	.word	0x20000398

080048ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80048f0:	4b03      	ldr	r3, [pc, #12]	; (8004900 <vTaskMissedYield+0x14>)
 80048f2:	2201      	movs	r2, #1
 80048f4:	601a      	str	r2, [r3, #0]
}
 80048f6:	bf00      	nop
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	20000394 	.word	0x20000394

08004904 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800490c:	f000 f852 	bl	80049b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004910:	4b06      	ldr	r3, [pc, #24]	; (800492c <prvIdleTask+0x28>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d9f9      	bls.n	800490c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004918:	4b05      	ldr	r3, [pc, #20]	; (8004930 <prvIdleTask+0x2c>)
 800491a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004928:	e7f0      	b.n	800490c <prvIdleTask+0x8>
 800492a:	bf00      	nop
 800492c:	20000284 	.word	0x20000284
 8004930:	e000ed04 	.word	0xe000ed04

08004934 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800493a:	2300      	movs	r3, #0
 800493c:	607b      	str	r3, [r7, #4]
 800493e:	e00c      	b.n	800495a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	4613      	mov	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4413      	add	r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4a12      	ldr	r2, [pc, #72]	; (8004994 <prvInitialiseTaskLists+0x60>)
 800494c:	4413      	add	r3, r2
 800494e:	4618      	mov	r0, r3
 8004950:	f7fe fe5b 	bl	800360a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	3301      	adds	r3, #1
 8004958:	607b      	str	r3, [r7, #4]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b06      	cmp	r3, #6
 800495e:	d9ef      	bls.n	8004940 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004960:	480d      	ldr	r0, [pc, #52]	; (8004998 <prvInitialiseTaskLists+0x64>)
 8004962:	f7fe fe52 	bl	800360a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004966:	480d      	ldr	r0, [pc, #52]	; (800499c <prvInitialiseTaskLists+0x68>)
 8004968:	f7fe fe4f 	bl	800360a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800496c:	480c      	ldr	r0, [pc, #48]	; (80049a0 <prvInitialiseTaskLists+0x6c>)
 800496e:	f7fe fe4c 	bl	800360a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004972:	480c      	ldr	r0, [pc, #48]	; (80049a4 <prvInitialiseTaskLists+0x70>)
 8004974:	f7fe fe49 	bl	800360a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004978:	480b      	ldr	r0, [pc, #44]	; (80049a8 <prvInitialiseTaskLists+0x74>)
 800497a:	f7fe fe46 	bl	800360a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800497e:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <prvInitialiseTaskLists+0x78>)
 8004980:	4a05      	ldr	r2, [pc, #20]	; (8004998 <prvInitialiseTaskLists+0x64>)
 8004982:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004984:	4b0a      	ldr	r3, [pc, #40]	; (80049b0 <prvInitialiseTaskLists+0x7c>)
 8004986:	4a05      	ldr	r2, [pc, #20]	; (800499c <prvInitialiseTaskLists+0x68>)
 8004988:	601a      	str	r2, [r3, #0]
}
 800498a:	bf00      	nop
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	20000284 	.word	0x20000284
 8004998:	20000310 	.word	0x20000310
 800499c:	20000324 	.word	0x20000324
 80049a0:	20000340 	.word	0x20000340
 80049a4:	20000354 	.word	0x20000354
 80049a8:	2000036c 	.word	0x2000036c
 80049ac:	20000338 	.word	0x20000338
 80049b0:	2000033c 	.word	0x2000033c

080049b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049ba:	e019      	b.n	80049f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80049bc:	f000 faa6 	bl	8004f0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049c0:	4b0f      	ldr	r3, [pc, #60]	; (8004a00 <prvCheckTasksWaitingTermination+0x4c>)
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	3304      	adds	r3, #4
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7fe fea6 	bl	800371e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80049d2:	4b0c      	ldr	r3, [pc, #48]	; (8004a04 <prvCheckTasksWaitingTermination+0x50>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	3b01      	subs	r3, #1
 80049d8:	4a0a      	ldr	r2, [pc, #40]	; (8004a04 <prvCheckTasksWaitingTermination+0x50>)
 80049da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80049dc:	4b0a      	ldr	r3, [pc, #40]	; (8004a08 <prvCheckTasksWaitingTermination+0x54>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3b01      	subs	r3, #1
 80049e2:	4a09      	ldr	r2, [pc, #36]	; (8004a08 <prvCheckTasksWaitingTermination+0x54>)
 80049e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80049e6:	f000 fabf 	bl	8004f68 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f80e 	bl	8004a0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049f0:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <prvCheckTasksWaitingTermination+0x54>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1e1      	bne.n	80049bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80049f8:	bf00      	nop
 80049fa:	3708      	adds	r7, #8
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	20000354 	.word	0x20000354
 8004a04:	20000380 	.word	0x20000380
 8004a08:	20000368 	.word	0x20000368

08004a0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d108      	bne.n	8004a30 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 fc10 	bl	8005248 <vPortFree>
				vPortFree( pxTCB );
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 fc0d 	bl	8005248 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a2e:	e017      	b.n	8004a60 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d103      	bne.n	8004a42 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 fc04 	bl	8005248 <vPortFree>
	}
 8004a40:	e00e      	b.n	8004a60 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d009      	beq.n	8004a60 <prvDeleteTCB+0x54>
 8004a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a50:	f383 8811 	msr	BASEPRI, r3
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	e7fe      	b.n	8004a5e <prvDeleteTCB+0x52>
	}
 8004a60:	bf00      	nop
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a6e:	4b0c      	ldr	r3, [pc, #48]	; (8004aa0 <prvResetNextTaskUnblockTime+0x38>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d104      	bne.n	8004a82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a78:	4b0a      	ldr	r3, [pc, #40]	; (8004aa4 <prvResetNextTaskUnblockTime+0x3c>)
 8004a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a80:	e008      	b.n	8004a94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a82:	4b07      	ldr	r3, [pc, #28]	; (8004aa0 <prvResetNextTaskUnblockTime+0x38>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	4a04      	ldr	r2, [pc, #16]	; (8004aa4 <prvResetNextTaskUnblockTime+0x3c>)
 8004a92:	6013      	str	r3, [r2, #0]
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	20000338 	.word	0x20000338
 8004aa4:	200003a0 	.word	0x200003a0

08004aa8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004aae:	4b0b      	ldr	r3, [pc, #44]	; (8004adc <xTaskGetSchedulerState+0x34>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d102      	bne.n	8004abc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	607b      	str	r3, [r7, #4]
 8004aba:	e008      	b.n	8004ace <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004abc:	4b08      	ldr	r3, [pc, #32]	; (8004ae0 <xTaskGetSchedulerState+0x38>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d102      	bne.n	8004aca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	607b      	str	r3, [r7, #4]
 8004ac8:	e001      	b.n	8004ace <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004aca:	2300      	movs	r3, #0
 8004acc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ace:	687b      	ldr	r3, [r7, #4]
	}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr
 8004adc:	2000038c 	.word	0x2000038c
 8004ae0:	200003a8 	.word	0x200003a8

08004ae4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004af0:	2300      	movs	r3, #0
 8004af2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d06c      	beq.n	8004bd4 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004afa:	4b39      	ldr	r3, [pc, #228]	; (8004be0 <xTaskPriorityDisinherit+0xfc>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d009      	beq.n	8004b18 <xTaskPriorityDisinherit+0x34>
 8004b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b08:	f383 8811 	msr	BASEPRI, r3
 8004b0c:	f3bf 8f6f 	isb	sy
 8004b10:	f3bf 8f4f 	dsb	sy
 8004b14:	60fb      	str	r3, [r7, #12]
 8004b16:	e7fe      	b.n	8004b16 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d109      	bne.n	8004b34 <xTaskPriorityDisinherit+0x50>
 8004b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b24:	f383 8811 	msr	BASEPRI, r3
 8004b28:	f3bf 8f6f 	isb	sy
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	60bb      	str	r3, [r7, #8]
 8004b32:	e7fe      	b.n	8004b32 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b38:	1e5a      	subs	r2, r3, #1
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d044      	beq.n	8004bd4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d140      	bne.n	8004bd4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	3304      	adds	r3, #4
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fe fde1 	bl	800371e <uxListRemove>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d115      	bne.n	8004b8e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b66:	491f      	ldr	r1, [pc, #124]	; (8004be4 <xTaskPriorityDisinherit+0x100>)
 8004b68:	4613      	mov	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	440b      	add	r3, r1
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10a      	bne.n	8004b8e <xTaskPriorityDisinherit+0xaa>
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b82:	43da      	mvns	r2, r3
 8004b84:	4b18      	ldr	r3, [pc, #96]	; (8004be8 <xTaskPriorityDisinherit+0x104>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	4a17      	ldr	r2, [pc, #92]	; (8004be8 <xTaskPriorityDisinherit+0x104>)
 8004b8c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9a:	f1c3 0207 	rsb	r2, r3, #7
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	409a      	lsls	r2, r3
 8004baa:	4b0f      	ldr	r3, [pc, #60]	; (8004be8 <xTaskPriorityDisinherit+0x104>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	4a0d      	ldr	r2, [pc, #52]	; (8004be8 <xTaskPriorityDisinherit+0x104>)
 8004bb2:	6013      	str	r3, [r2, #0]
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb8:	4613      	mov	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4a08      	ldr	r2, [pc, #32]	; (8004be4 <xTaskPriorityDisinherit+0x100>)
 8004bc2:	441a      	add	r2, r3
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	3304      	adds	r3, #4
 8004bc8:	4619      	mov	r1, r3
 8004bca:	4610      	mov	r0, r2
 8004bcc:	f7fe fd4a 	bl	8003664 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004bd4:	697b      	ldr	r3, [r7, #20]
	}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	20000280 	.word	0x20000280
 8004be4:	20000284 	.word	0x20000284
 8004be8:	20000388 	.word	0x20000388

08004bec <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004bf6:	4b29      	ldr	r3, [pc, #164]	; (8004c9c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bfc:	4b28      	ldr	r3, [pc, #160]	; (8004ca0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	3304      	adds	r3, #4
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fe fd8b 	bl	800371e <uxListRemove>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10b      	bne.n	8004c26 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004c0e:	4b24      	ldr	r3, [pc, #144]	; (8004ca0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c14:	2201      	movs	r2, #1
 8004c16:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1a:	43da      	mvns	r2, r3
 8004c1c:	4b21      	ldr	r3, [pc, #132]	; (8004ca4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4013      	ands	r3, r2
 8004c22:	4a20      	ldr	r2, [pc, #128]	; (8004ca4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c24:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2c:	d10a      	bne.n	8004c44 <prvAddCurrentTaskToDelayedList+0x58>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d007      	beq.n	8004c44 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c34:	4b1a      	ldr	r3, [pc, #104]	; (8004ca0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	3304      	adds	r3, #4
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	481a      	ldr	r0, [pc, #104]	; (8004ca8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004c3e:	f7fe fd11 	bl	8003664 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c42:	e026      	b.n	8004c92 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4413      	add	r3, r2
 8004c4a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c4c:	4b14      	ldr	r3, [pc, #80]	; (8004ca0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d209      	bcs.n	8004c70 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c5c:	4b13      	ldr	r3, [pc, #76]	; (8004cac <prvAddCurrentTaskToDelayedList+0xc0>)
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	4b0f      	ldr	r3, [pc, #60]	; (8004ca0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	3304      	adds	r3, #4
 8004c66:	4619      	mov	r1, r3
 8004c68:	4610      	mov	r0, r2
 8004c6a:	f7fe fd1f 	bl	80036ac <vListInsert>
}
 8004c6e:	e010      	b.n	8004c92 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c70:	4b0f      	ldr	r3, [pc, #60]	; (8004cb0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	4b0a      	ldr	r3, [pc, #40]	; (8004ca0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3304      	adds	r3, #4
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	4610      	mov	r0, r2
 8004c7e:	f7fe fd15 	bl	80036ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c82:	4b0c      	ldr	r3, [pc, #48]	; (8004cb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d202      	bcs.n	8004c92 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004c8c:	4a09      	ldr	r2, [pc, #36]	; (8004cb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	6013      	str	r3, [r2, #0]
}
 8004c92:	bf00      	nop
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	20000384 	.word	0x20000384
 8004ca0:	20000280 	.word	0x20000280
 8004ca4:	20000388 	.word	0x20000388
 8004ca8:	2000036c 	.word	0x2000036c
 8004cac:	2000033c 	.word	0x2000033c
 8004cb0:	20000338 	.word	0x20000338
 8004cb4:	200003a0 	.word	0x200003a0

08004cb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	3b04      	subs	r3, #4
 8004cc8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004cd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	3b04      	subs	r3, #4
 8004cd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	f023 0201 	bic.w	r2, r3, #1
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	3b04      	subs	r3, #4
 8004ce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ce8:	4a0c      	ldr	r2, [pc, #48]	; (8004d1c <pxPortInitialiseStack+0x64>)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	3b14      	subs	r3, #20
 8004cf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	3b04      	subs	r3, #4
 8004cfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f06f 0202 	mvn.w	r2, #2
 8004d06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	3b20      	subs	r3, #32
 8004d0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	08004d21 	.word	0x08004d21

08004d20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004d26:	2300      	movs	r3, #0
 8004d28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d2a:	4b11      	ldr	r3, [pc, #68]	; (8004d70 <prvTaskExitError+0x50>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d32:	d009      	beq.n	8004d48 <prvTaskExitError+0x28>
 8004d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d38:	f383 8811 	msr	BASEPRI, r3
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	60fb      	str	r3, [r7, #12]
 8004d46:	e7fe      	b.n	8004d46 <prvTaskExitError+0x26>
 8004d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4c:	f383 8811 	msr	BASEPRI, r3
 8004d50:	f3bf 8f6f 	isb	sy
 8004d54:	f3bf 8f4f 	dsb	sy
 8004d58:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d5a:	bf00      	nop
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0fc      	beq.n	8004d5c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d62:	bf00      	nop
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	2000000c 	.word	0x2000000c
	...

08004d80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d80:	4b07      	ldr	r3, [pc, #28]	; (8004da0 <pxCurrentTCBConst2>)
 8004d82:	6819      	ldr	r1, [r3, #0]
 8004d84:	6808      	ldr	r0, [r1, #0]
 8004d86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d8a:	f380 8809 	msr	PSP, r0
 8004d8e:	f3bf 8f6f 	isb	sy
 8004d92:	f04f 0000 	mov.w	r0, #0
 8004d96:	f380 8811 	msr	BASEPRI, r0
 8004d9a:	4770      	bx	lr
 8004d9c:	f3af 8000 	nop.w

08004da0 <pxCurrentTCBConst2>:
 8004da0:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004da4:	bf00      	nop
 8004da6:	bf00      	nop

08004da8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004da8:	4808      	ldr	r0, [pc, #32]	; (8004dcc <prvPortStartFirstTask+0x24>)
 8004daa:	6800      	ldr	r0, [r0, #0]
 8004dac:	6800      	ldr	r0, [r0, #0]
 8004dae:	f380 8808 	msr	MSP, r0
 8004db2:	f04f 0000 	mov.w	r0, #0
 8004db6:	f380 8814 	msr	CONTROL, r0
 8004dba:	b662      	cpsie	i
 8004dbc:	b661      	cpsie	f
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	f3bf 8f6f 	isb	sy
 8004dc6:	df00      	svc	0
 8004dc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004dca:	bf00      	nop
 8004dcc:	e000ed08 	.word	0xe000ed08

08004dd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004dd6:	4b44      	ldr	r3, [pc, #272]	; (8004ee8 <xPortStartScheduler+0x118>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a44      	ldr	r2, [pc, #272]	; (8004eec <xPortStartScheduler+0x11c>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d109      	bne.n	8004df4 <xPortStartScheduler+0x24>
 8004de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de4:	f383 8811 	msr	BASEPRI, r3
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	613b      	str	r3, [r7, #16]
 8004df2:	e7fe      	b.n	8004df2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004df4:	4b3c      	ldr	r3, [pc, #240]	; (8004ee8 <xPortStartScheduler+0x118>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a3d      	ldr	r2, [pc, #244]	; (8004ef0 <xPortStartScheduler+0x120>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d109      	bne.n	8004e12 <xPortStartScheduler+0x42>
 8004dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	60fb      	str	r3, [r7, #12]
 8004e10:	e7fe      	b.n	8004e10 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e12:	4b38      	ldr	r3, [pc, #224]	; (8004ef4 <xPortStartScheduler+0x124>)
 8004e14:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	22ff      	movs	r2, #255	; 0xff
 8004e22:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e2c:	78fb      	ldrb	r3, [r7, #3]
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	4b30      	ldr	r3, [pc, #192]	; (8004ef8 <xPortStartScheduler+0x128>)
 8004e38:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e3a:	4b30      	ldr	r3, [pc, #192]	; (8004efc <xPortStartScheduler+0x12c>)
 8004e3c:	2207      	movs	r2, #7
 8004e3e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e40:	e009      	b.n	8004e56 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004e42:	4b2e      	ldr	r3, [pc, #184]	; (8004efc <xPortStartScheduler+0x12c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	3b01      	subs	r3, #1
 8004e48:	4a2c      	ldr	r2, [pc, #176]	; (8004efc <xPortStartScheduler+0x12c>)
 8004e4a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e4c:	78fb      	ldrb	r3, [r7, #3]
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e56:	78fb      	ldrb	r3, [r7, #3]
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e5e:	2b80      	cmp	r3, #128	; 0x80
 8004e60:	d0ef      	beq.n	8004e42 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e62:	4b26      	ldr	r3, [pc, #152]	; (8004efc <xPortStartScheduler+0x12c>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f1c3 0307 	rsb	r3, r3, #7
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	d009      	beq.n	8004e82 <xPortStartScheduler+0xb2>
 8004e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	60bb      	str	r3, [r7, #8]
 8004e80:	e7fe      	b.n	8004e80 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e82:	4b1e      	ldr	r3, [pc, #120]	; (8004efc <xPortStartScheduler+0x12c>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	021b      	lsls	r3, r3, #8
 8004e88:	4a1c      	ldr	r2, [pc, #112]	; (8004efc <xPortStartScheduler+0x12c>)
 8004e8a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e8c:	4b1b      	ldr	r3, [pc, #108]	; (8004efc <xPortStartScheduler+0x12c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e94:	4a19      	ldr	r2, [pc, #100]	; (8004efc <xPortStartScheduler+0x12c>)
 8004e96:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	b2da      	uxtb	r2, r3
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ea0:	4b17      	ldr	r3, [pc, #92]	; (8004f00 <xPortStartScheduler+0x130>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a16      	ldr	r2, [pc, #88]	; (8004f00 <xPortStartScheduler+0x130>)
 8004ea6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004eaa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004eac:	4b14      	ldr	r3, [pc, #80]	; (8004f00 <xPortStartScheduler+0x130>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a13      	ldr	r2, [pc, #76]	; (8004f00 <xPortStartScheduler+0x130>)
 8004eb2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004eb6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004eb8:	f000 f8d6 	bl	8005068 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ebc:	4b11      	ldr	r3, [pc, #68]	; (8004f04 <xPortStartScheduler+0x134>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ec2:	f000 f8f5 	bl	80050b0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ec6:	4b10      	ldr	r3, [pc, #64]	; (8004f08 <xPortStartScheduler+0x138>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a0f      	ldr	r2, [pc, #60]	; (8004f08 <xPortStartScheduler+0x138>)
 8004ecc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004ed0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ed2:	f7ff ff69 	bl	8004da8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ed6:	f7ff fbb3 	bl	8004640 <vTaskSwitchContext>
	prvTaskExitError();
 8004eda:	f7ff ff21 	bl	8004d20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3718      	adds	r7, #24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	e000ed00 	.word	0xe000ed00
 8004eec:	410fc271 	.word	0x410fc271
 8004ef0:	410fc270 	.word	0x410fc270
 8004ef4:	e000e400 	.word	0xe000e400
 8004ef8:	200003ac 	.word	0x200003ac
 8004efc:	200003b0 	.word	0x200003b0
 8004f00:	e000ed20 	.word	0xe000ed20
 8004f04:	2000000c 	.word	0x2000000c
 8004f08:	e000ef34 	.word	0xe000ef34

08004f0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f16:	f383 8811 	msr	BASEPRI, r3
 8004f1a:	f3bf 8f6f 	isb	sy
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f24:	4b0e      	ldr	r3, [pc, #56]	; (8004f60 <vPortEnterCritical+0x54>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	4a0d      	ldr	r2, [pc, #52]	; (8004f60 <vPortEnterCritical+0x54>)
 8004f2c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f2e:	4b0c      	ldr	r3, [pc, #48]	; (8004f60 <vPortEnterCritical+0x54>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d10e      	bne.n	8004f54 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f36:	4b0b      	ldr	r3, [pc, #44]	; (8004f64 <vPortEnterCritical+0x58>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d009      	beq.n	8004f54 <vPortEnterCritical+0x48>
 8004f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	603b      	str	r3, [r7, #0]
 8004f52:	e7fe      	b.n	8004f52 <vPortEnterCritical+0x46>
	}
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	2000000c 	.word	0x2000000c
 8004f64:	e000ed04 	.word	0xe000ed04

08004f68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f6e:	4b11      	ldr	r3, [pc, #68]	; (8004fb4 <vPortExitCritical+0x4c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d109      	bne.n	8004f8a <vPortExitCritical+0x22>
 8004f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7a:	f383 8811 	msr	BASEPRI, r3
 8004f7e:	f3bf 8f6f 	isb	sy
 8004f82:	f3bf 8f4f 	dsb	sy
 8004f86:	607b      	str	r3, [r7, #4]
 8004f88:	e7fe      	b.n	8004f88 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004f8a:	4b0a      	ldr	r3, [pc, #40]	; (8004fb4 <vPortExitCritical+0x4c>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	4a08      	ldr	r2, [pc, #32]	; (8004fb4 <vPortExitCritical+0x4c>)
 8004f92:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f94:	4b07      	ldr	r3, [pc, #28]	; (8004fb4 <vPortExitCritical+0x4c>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d104      	bne.n	8004fa6 <vPortExitCritical+0x3e>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	2000000c 	.word	0x2000000c
	...

08004fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004fc0:	f3ef 8009 	mrs	r0, PSP
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	4b15      	ldr	r3, [pc, #84]	; (8005020 <pxCurrentTCBConst>)
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	f01e 0f10 	tst.w	lr, #16
 8004fd0:	bf08      	it	eq
 8004fd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004fd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fda:	6010      	str	r0, [r2, #0]
 8004fdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004fe0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004fe4:	f380 8811 	msr	BASEPRI, r0
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f7ff fb26 	bl	8004640 <vTaskSwitchContext>
 8004ff4:	f04f 0000 	mov.w	r0, #0
 8004ff8:	f380 8811 	msr	BASEPRI, r0
 8004ffc:	bc09      	pop	{r0, r3}
 8004ffe:	6819      	ldr	r1, [r3, #0]
 8005000:	6808      	ldr	r0, [r1, #0]
 8005002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005006:	f01e 0f10 	tst.w	lr, #16
 800500a:	bf08      	it	eq
 800500c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005010:	f380 8809 	msr	PSP, r0
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	f3af 8000 	nop.w

08005020 <pxCurrentTCBConst>:
 8005020:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005024:	bf00      	nop
 8005026:	bf00      	nop

08005028 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
	__asm volatile
 800502e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005032:	f383 8811 	msr	BASEPRI, r3
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005040:	f7ff fa46 	bl	80044d0 <xTaskIncrementTick>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d003      	beq.n	8005052 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800504a:	4b06      	ldr	r3, [pc, #24]	; (8005064 <SysTick_Handler+0x3c>)
 800504c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	2300      	movs	r3, #0
 8005054:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800505c:	bf00      	nop
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	e000ed04 	.word	0xe000ed04

08005068 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800506c:	4b0b      	ldr	r3, [pc, #44]	; (800509c <vPortSetupTimerInterrupt+0x34>)
 800506e:	2200      	movs	r2, #0
 8005070:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005072:	4b0b      	ldr	r3, [pc, #44]	; (80050a0 <vPortSetupTimerInterrupt+0x38>)
 8005074:	2200      	movs	r2, #0
 8005076:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005078:	4b0a      	ldr	r3, [pc, #40]	; (80050a4 <vPortSetupTimerInterrupt+0x3c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a0a      	ldr	r2, [pc, #40]	; (80050a8 <vPortSetupTimerInterrupt+0x40>)
 800507e:	fba2 2303 	umull	r2, r3, r2, r3
 8005082:	099b      	lsrs	r3, r3, #6
 8005084:	4a09      	ldr	r2, [pc, #36]	; (80050ac <vPortSetupTimerInterrupt+0x44>)
 8005086:	3b01      	subs	r3, #1
 8005088:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800508a:	4b04      	ldr	r3, [pc, #16]	; (800509c <vPortSetupTimerInterrupt+0x34>)
 800508c:	2207      	movs	r2, #7
 800508e:	601a      	str	r2, [r3, #0]
}
 8005090:	bf00      	nop
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	e000e010 	.word	0xe000e010
 80050a0:	e000e018 	.word	0xe000e018
 80050a4:	20000000 	.word	0x20000000
 80050a8:	10624dd3 	.word	0x10624dd3
 80050ac:	e000e014 	.word	0xe000e014

080050b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80050b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80050c0 <vPortEnableVFP+0x10>
 80050b4:	6801      	ldr	r1, [r0, #0]
 80050b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80050ba:	6001      	str	r1, [r0, #0]
 80050bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80050be:	bf00      	nop
 80050c0:	e000ed88 	.word	0xe000ed88

080050c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b08a      	sub	sp, #40	; 0x28
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80050cc:	2300      	movs	r3, #0
 80050ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80050d0:	f7ff f954 	bl	800437c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80050d4:	4b57      	ldr	r3, [pc, #348]	; (8005234 <pvPortMalloc+0x170>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d101      	bne.n	80050e0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80050dc:	f000 f90c 	bl	80052f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80050e0:	4b55      	ldr	r3, [pc, #340]	; (8005238 <pvPortMalloc+0x174>)
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4013      	ands	r3, r2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f040 808c 	bne.w	8005206 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d01c      	beq.n	800512e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80050f4:	2208      	movs	r2, #8
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4413      	add	r3, r2
 80050fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f003 0307 	and.w	r3, r3, #7
 8005102:	2b00      	cmp	r3, #0
 8005104:	d013      	beq.n	800512e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f023 0307 	bic.w	r3, r3, #7
 800510c:	3308      	adds	r3, #8
 800510e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f003 0307 	and.w	r3, r3, #7
 8005116:	2b00      	cmp	r3, #0
 8005118:	d009      	beq.n	800512e <pvPortMalloc+0x6a>
	__asm volatile
 800511a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511e:	f383 8811 	msr	BASEPRI, r3
 8005122:	f3bf 8f6f 	isb	sy
 8005126:	f3bf 8f4f 	dsb	sy
 800512a:	617b      	str	r3, [r7, #20]
 800512c:	e7fe      	b.n	800512c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d068      	beq.n	8005206 <pvPortMalloc+0x142>
 8005134:	4b41      	ldr	r3, [pc, #260]	; (800523c <pvPortMalloc+0x178>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	429a      	cmp	r2, r3
 800513c:	d863      	bhi.n	8005206 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800513e:	4b40      	ldr	r3, [pc, #256]	; (8005240 <pvPortMalloc+0x17c>)
 8005140:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005142:	4b3f      	ldr	r3, [pc, #252]	; (8005240 <pvPortMalloc+0x17c>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005148:	e004      	b.n	8005154 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	429a      	cmp	r2, r3
 800515c:	d903      	bls.n	8005166 <pvPortMalloc+0xa2>
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1f1      	bne.n	800514a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005166:	4b33      	ldr	r3, [pc, #204]	; (8005234 <pvPortMalloc+0x170>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800516c:	429a      	cmp	r2, r3
 800516e:	d04a      	beq.n	8005206 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005170:	6a3b      	ldr	r3, [r7, #32]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2208      	movs	r2, #8
 8005176:	4413      	add	r3, r2
 8005178:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	6a3b      	ldr	r3, [r7, #32]
 8005180:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	1ad2      	subs	r2, r2, r3
 800518a:	2308      	movs	r3, #8
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	429a      	cmp	r2, r3
 8005190:	d91e      	bls.n	80051d0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4413      	add	r3, r2
 8005198:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d009      	beq.n	80051b8 <pvPortMalloc+0xf4>
 80051a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	613b      	str	r3, [r7, #16]
 80051b6:	e7fe      	b.n	80051b6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	1ad2      	subs	r2, r2, r3
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80051ca:	69b8      	ldr	r0, [r7, #24]
 80051cc:	f000 f8f6 	bl	80053bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80051d0:	4b1a      	ldr	r3, [pc, #104]	; (800523c <pvPortMalloc+0x178>)
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	4a18      	ldr	r2, [pc, #96]	; (800523c <pvPortMalloc+0x178>)
 80051dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80051de:	4b17      	ldr	r3, [pc, #92]	; (800523c <pvPortMalloc+0x178>)
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	4b18      	ldr	r3, [pc, #96]	; (8005244 <pvPortMalloc+0x180>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d203      	bcs.n	80051f2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80051ea:	4b14      	ldr	r3, [pc, #80]	; (800523c <pvPortMalloc+0x178>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a15      	ldr	r2, [pc, #84]	; (8005244 <pvPortMalloc+0x180>)
 80051f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	4b10      	ldr	r3, [pc, #64]	; (8005238 <pvPortMalloc+0x174>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	431a      	orrs	r2, r3
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	2200      	movs	r2, #0
 8005204:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005206:	f7ff f8c7 	bl	8004398 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	f003 0307 	and.w	r3, r3, #7
 8005210:	2b00      	cmp	r3, #0
 8005212:	d009      	beq.n	8005228 <pvPortMalloc+0x164>
 8005214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005218:	f383 8811 	msr	BASEPRI, r3
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	60fb      	str	r3, [r7, #12]
 8005226:	e7fe      	b.n	8005226 <pvPortMalloc+0x162>
	return pvReturn;
 8005228:	69fb      	ldr	r3, [r7, #28]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3728      	adds	r7, #40	; 0x28
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	200051dc 	.word	0x200051dc
 8005238:	200051e8 	.word	0x200051e8
 800523c:	200051e0 	.word	0x200051e0
 8005240:	200051d4 	.word	0x200051d4
 8005244:	200051e4 	.word	0x200051e4

08005248 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d046      	beq.n	80052e8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800525a:	2308      	movs	r3, #8
 800525c:	425b      	negs	r3, r3
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	4413      	add	r3, r2
 8005262:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	4b20      	ldr	r3, [pc, #128]	; (80052f0 <vPortFree+0xa8>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4013      	ands	r3, r2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d109      	bne.n	800528a <vPortFree+0x42>
 8005276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527a:	f383 8811 	msr	BASEPRI, r3
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f3bf 8f4f 	dsb	sy
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	e7fe      	b.n	8005288 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d009      	beq.n	80052a6 <vPortFree+0x5e>
 8005292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005296:	f383 8811 	msr	BASEPRI, r3
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	60bb      	str	r3, [r7, #8]
 80052a4:	e7fe      	b.n	80052a4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	4b11      	ldr	r3, [pc, #68]	; (80052f0 <vPortFree+0xa8>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4013      	ands	r3, r2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d019      	beq.n	80052e8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d115      	bne.n	80052e8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <vPortFree+0xa8>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	43db      	mvns	r3, r3
 80052c6:	401a      	ands	r2, r3
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80052cc:	f7ff f856 	bl	800437c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	4b07      	ldr	r3, [pc, #28]	; (80052f4 <vPortFree+0xac>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4413      	add	r3, r2
 80052da:	4a06      	ldr	r2, [pc, #24]	; (80052f4 <vPortFree+0xac>)
 80052dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80052de:	6938      	ldr	r0, [r7, #16]
 80052e0:	f000 f86c 	bl	80053bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80052e4:	f7ff f858 	bl	8004398 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80052e8:	bf00      	nop
 80052ea:	3718      	adds	r7, #24
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	200051e8 	.word	0x200051e8
 80052f4:	200051e0 	.word	0x200051e0

080052f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80052fe:	f644 6320 	movw	r3, #20000	; 0x4e20
 8005302:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005304:	4b27      	ldr	r3, [pc, #156]	; (80053a4 <prvHeapInit+0xac>)
 8005306:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f003 0307 	and.w	r3, r3, #7
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00c      	beq.n	800532c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	3307      	adds	r3, #7
 8005316:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f023 0307 	bic.w	r3, r3, #7
 800531e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	4a1f      	ldr	r2, [pc, #124]	; (80053a4 <prvHeapInit+0xac>)
 8005328:	4413      	add	r3, r2
 800532a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005330:	4a1d      	ldr	r2, [pc, #116]	; (80053a8 <prvHeapInit+0xb0>)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005336:	4b1c      	ldr	r3, [pc, #112]	; (80053a8 <prvHeapInit+0xb0>)
 8005338:	2200      	movs	r2, #0
 800533a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	4413      	add	r3, r2
 8005342:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005344:	2208      	movs	r2, #8
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	1a9b      	subs	r3, r3, r2
 800534a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f023 0307 	bic.w	r3, r3, #7
 8005352:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4a15      	ldr	r2, [pc, #84]	; (80053ac <prvHeapInit+0xb4>)
 8005358:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800535a:	4b14      	ldr	r3, [pc, #80]	; (80053ac <prvHeapInit+0xb4>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2200      	movs	r2, #0
 8005360:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005362:	4b12      	ldr	r3, [pc, #72]	; (80053ac <prvHeapInit+0xb4>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2200      	movs	r2, #0
 8005368:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	1ad2      	subs	r2, r2, r3
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005378:	4b0c      	ldr	r3, [pc, #48]	; (80053ac <prvHeapInit+0xb4>)
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	4a0a      	ldr	r2, [pc, #40]	; (80053b0 <prvHeapInit+0xb8>)
 8005386:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	4a09      	ldr	r2, [pc, #36]	; (80053b4 <prvHeapInit+0xbc>)
 800538e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005390:	4b09      	ldr	r3, [pc, #36]	; (80053b8 <prvHeapInit+0xc0>)
 8005392:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005396:	601a      	str	r2, [r3, #0]
}
 8005398:	bf00      	nop
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	200003b4 	.word	0x200003b4
 80053a8:	200051d4 	.word	0x200051d4
 80053ac:	200051dc 	.word	0x200051dc
 80053b0:	200051e4 	.word	0x200051e4
 80053b4:	200051e0 	.word	0x200051e0
 80053b8:	200051e8 	.word	0x200051e8

080053bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80053c4:	4b28      	ldr	r3, [pc, #160]	; (8005468 <prvInsertBlockIntoFreeList+0xac>)
 80053c6:	60fb      	str	r3, [r7, #12]
 80053c8:	e002      	b.n	80053d0 <prvInsertBlockIntoFreeList+0x14>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	60fb      	str	r3, [r7, #12]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d8f7      	bhi.n	80053ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	4413      	add	r3, r2
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d108      	bne.n	80053fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	441a      	add	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	441a      	add	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	429a      	cmp	r2, r3
 8005410:	d118      	bne.n	8005444 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	4b15      	ldr	r3, [pc, #84]	; (800546c <prvInsertBlockIntoFreeList+0xb0>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	429a      	cmp	r2, r3
 800541c:	d00d      	beq.n	800543a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	441a      	add	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	e008      	b.n	800544c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800543a:	4b0c      	ldr	r3, [pc, #48]	; (800546c <prvInsertBlockIntoFreeList+0xb0>)
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	e003      	b.n	800544c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	429a      	cmp	r2, r3
 8005452:	d002      	beq.n	800545a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800545a:	bf00      	nop
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	200051d4 	.word	0x200051d4
 800546c:	200051dc 	.word	0x200051dc

08005470 <APP_Init>:
// Mutex for UART

static app_context_t __appContext;

app_err_t APP_Init(void * uartHandle)
{
 8005470:	b5b0      	push	{r4, r5, r7, lr}
 8005472:	b0aa      	sub	sp, #168	; 0xa8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]

	app_context_t * appContext = APP_ContextGetForUpdate();
 8005478:	f000 f89a 	bl	80055b0 <APP_ContextGetForUpdate>
 800547c:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
	APP_IF_RETURN(appContext == NULL, APP_ERR_NULL_REF);
 8005480:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005484:	2b00      	cmp	r3, #0
 8005486:	d101      	bne.n	800548c <APP_Init+0x1c>
 8005488:	2302      	movs	r3, #2
 800548a:	e085      	b.n	8005598 <APP_Init+0x128>

	// Mutexes
	osMutexDef(uart_mutex);
 800548c:	2300      	movs	r3, #0
 800548e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005492:	2300      	movs	r3, #0
 8005494:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	appContext->uartMutexId = osMutexCreate(osMutex(uart_mutex));
 8005498:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800549c:	4618      	mov	r0, r3
 800549e:	f7fd ffe7 	bl	8003470 <osMutexCreate>
 80054a2:	4602      	mov	r2, r0
 80054a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80054a8:	601a      	str	r2, [r3, #0]

	// Queues
	osMailQDef(from_uart_pool_q, APP_FROM_UART_QUEUE_SIZE, APP_UART_QUEUE_TYPE);
 80054aa:	2340      	movs	r3, #64	; 0x40
 80054ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80054b0:	2302      	movs	r3, #2
 80054b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80054b6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80054ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	appContext->fromUartQueueId = osMailCreate(osMailQ(from_uart_pool_q), NULL);
 80054be:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80054c2:	2100      	movs	r1, #0
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7fe f848 	bl	800355a <osMailCreate>
 80054ca:	4602      	mov	r2, r0
 80054cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80054d0:	605a      	str	r2, [r3, #4]

	osMailQDef(to_uart_pool_q, APP_FROM_UART_QUEUE_SIZE, APP_UART_QUEUE_TYPE);
 80054d2:	2340      	movs	r3, #64	; 0x40
 80054d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80054d6:	2302      	movs	r3, #2
 80054d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054dc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80054e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	appContext->toUartQueueId = osMailCreate(osMailQ(to_uart_pool_q), NULL);
 80054e4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80054e8:	2100      	movs	r1, #0
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fe f835 	bl	800355a <osMailCreate>
 80054f0:	4602      	mov	r2, r0
 80054f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80054f6:	609a      	str	r2, [r3, #8]

	// Tasks
	osThreadDef(mainTask, APP_MainTask, APP_MAIN_THREAD_PRIO, 1, APP_MAIN_THREAD_STACK_SIZE);
 80054f8:	4b29      	ldr	r3, [pc, #164]	; (80055a0 <APP_Init+0x130>)
 80054fa:	f107 0460 	add.w	r4, r7, #96	; 0x60
 80054fe:	461d      	mov	r5, r3
 8005500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005504:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005508:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	appContext->mainThreadId = osThreadCreate(osThread(mainTask), NULL);
 800550c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005510:	2100      	movs	r1, #0
 8005512:	4618      	mov	r0, r3
 8005514:	f7fd ff40 	bl	8003398 <osThreadCreate>
 8005518:	4602      	mov	r2, r0
 800551a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800551e:	60da      	str	r2, [r3, #12]

	osThreadDef(uiTask, APP_UI_Task, APP_UI_THREAD_PRIO, 1, APP_UI_THREAD_STACK_SIZE);
 8005520:	4b20      	ldr	r3, [pc, #128]	; (80055a4 <APP_Init+0x134>)
 8005522:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8005526:	461d      	mov	r5, r3
 8005528:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800552a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800552c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005530:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	appContext->uiThreadId = osThreadCreate(osThread(uiTask), NULL);
 8005534:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005538:	2100      	movs	r1, #0
 800553a:	4618      	mov	r0, r3
 800553c:	f7fd ff2c 	bl	8003398 <osThreadCreate>
 8005540:	4602      	mov	r2, r0
 8005542:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005546:	611a      	str	r2, [r3, #16]

	osThreadDef(uartRxTask, APP_UART_RxTask, APP_UART_RX_THREAD_PRIO, 1, APP_UART_RX_THREAD_STACK_SIZE);
 8005548:	4b17      	ldr	r3, [pc, #92]	; (80055a8 <APP_Init+0x138>)
 800554a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800554e:	461d      	mov	r5, r3
 8005550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005554:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005558:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	appContext->uartRxThreadId = osThreadCreate(osThread(uartRxTask), NULL);
 800555c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005560:	2100      	movs	r1, #0
 8005562:	4618      	mov	r0, r3
 8005564:	f7fd ff18 	bl	8003398 <osThreadCreate>
 8005568:	4602      	mov	r2, r0
 800556a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800556e:	615a      	str	r2, [r3, #20]

	osThreadDef(uartTxTask, APP_UART_TxTask, APP_UART_TX_THREAD_PRIO, 1, APP_UART_TX_THREAD_STACK_SIZE);
 8005570:	4b0e      	ldr	r3, [pc, #56]	; (80055ac <APP_Init+0x13c>)
 8005572:	f107 040c 	add.w	r4, r7, #12
 8005576:	461d      	mov	r5, r3
 8005578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800557a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800557c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005580:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	appContext->uartTxThreadId = osThreadCreate(osThread(uartTxTask), NULL);
 8005584:	f107 030c 	add.w	r3, r7, #12
 8005588:	2100      	movs	r1, #0
 800558a:	4618      	mov	r0, r3
 800558c:	f7fd ff04 	bl	8003398 <osThreadCreate>
 8005590:	4602      	mov	r2, r0
 8005592:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005596:	619a      	str	r2, [r3, #24]

}
 8005598:	4618      	mov	r0, r3
 800559a:	37a8      	adds	r7, #168	; 0xa8
 800559c:	46bd      	mov	sp, r7
 800559e:	bdb0      	pop	{r4, r5, r7, pc}
 80055a0:	080056c8 	.word	0x080056c8
 80055a4:	080056ec 	.word	0x080056ec
 80055a8:	08005714 	.word	0x08005714
 80055ac:	0800573c 	.word	0x0800573c

080055b0 <APP_ContextGetForUpdate>:
{
	return (const app_context_t *) &__appContext;
}

app_context_t * APP_ContextGetForUpdate(void)
{
 80055b0:	b480      	push	{r7}
 80055b2:	af00      	add	r7, sp, #0
	return &__appContext;
 80055b4:	4b02      	ldr	r3, [pc, #8]	; (80055c0 <APP_ContextGetForUpdate+0x10>)
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	200051ec 	.word	0x200051ec

080055c4 <APP_MainTask>:

void APP_MainTask(const void * argument)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
	for (;;)
	{
		osDelay(1000);
 80055cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80055d0:	f7fd ff3a 	bl	8003448 <osDelay>
 80055d4:	e7fa      	b.n	80055cc <APP_MainTask+0x8>
	...

080055d8 <APP_UART_RxTask>:
#include "app_uart.h"

#include "cmsis_os.h"

void APP_UART_RxTask(const void * argument)
{
 80055d8:	b508      	push	{r3, lr}
	for (;;)
	{
		osDelay(1000);
 80055da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80055de:	f7fd ff33 	bl	8003448 <osDelay>
 80055e2:	e7fa      	b.n	80055da <APP_UART_RxTask+0x2>

080055e4 <APP_UART_TxTask>:
 80055e4:	b508      	push	{r3, lr}
 80055e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80055ea:	f7fd ff2d 	bl	8003448 <osDelay>
 80055ee:	e7fa      	b.n	80055e6 <APP_UART_TxTask+0x2>

080055f0 <APP_UI_Task>:
#include "app_ui.h"

#include "cmsis_os.h"

void APP_UI_Task(const void * argument)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
	for (;;)
	{
		osDelay(1000);
 80055f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80055fc:	f7fd ff24 	bl	8003448 <osDelay>
 8005600:	e7fa      	b.n	80055f8 <APP_UI_Task+0x8>
	...

08005604 <__libc_init_array>:
 8005604:	b570      	push	{r4, r5, r6, lr}
 8005606:	4e0d      	ldr	r6, [pc, #52]	; (800563c <__libc_init_array+0x38>)
 8005608:	4c0d      	ldr	r4, [pc, #52]	; (8005640 <__libc_init_array+0x3c>)
 800560a:	1ba4      	subs	r4, r4, r6
 800560c:	10a4      	asrs	r4, r4, #2
 800560e:	2500      	movs	r5, #0
 8005610:	42a5      	cmp	r5, r4
 8005612:	d109      	bne.n	8005628 <__libc_init_array+0x24>
 8005614:	4e0b      	ldr	r6, [pc, #44]	; (8005644 <__libc_init_array+0x40>)
 8005616:	4c0c      	ldr	r4, [pc, #48]	; (8005648 <__libc_init_array+0x44>)
 8005618:	f000 f82c 	bl	8005674 <_init>
 800561c:	1ba4      	subs	r4, r4, r6
 800561e:	10a4      	asrs	r4, r4, #2
 8005620:	2500      	movs	r5, #0
 8005622:	42a5      	cmp	r5, r4
 8005624:	d105      	bne.n	8005632 <__libc_init_array+0x2e>
 8005626:	bd70      	pop	{r4, r5, r6, pc}
 8005628:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800562c:	4798      	blx	r3
 800562e:	3501      	adds	r5, #1
 8005630:	e7ee      	b.n	8005610 <__libc_init_array+0xc>
 8005632:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005636:	4798      	blx	r3
 8005638:	3501      	adds	r5, #1
 800563a:	e7f2      	b.n	8005622 <__libc_init_array+0x1e>
 800563c:	080057a8 	.word	0x080057a8
 8005640:	080057a8 	.word	0x080057a8
 8005644:	080057a8 	.word	0x080057a8
 8005648:	080057ac 	.word	0x080057ac

0800564c <memcpy>:
 800564c:	b510      	push	{r4, lr}
 800564e:	1e43      	subs	r3, r0, #1
 8005650:	440a      	add	r2, r1
 8005652:	4291      	cmp	r1, r2
 8005654:	d100      	bne.n	8005658 <memcpy+0xc>
 8005656:	bd10      	pop	{r4, pc}
 8005658:	f811 4b01 	ldrb.w	r4, [r1], #1
 800565c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005660:	e7f7      	b.n	8005652 <memcpy+0x6>

08005662 <memset>:
 8005662:	4402      	add	r2, r0
 8005664:	4603      	mov	r3, r0
 8005666:	4293      	cmp	r3, r2
 8005668:	d100      	bne.n	800566c <memset+0xa>
 800566a:	4770      	bx	lr
 800566c:	f803 1b01 	strb.w	r1, [r3], #1
 8005670:	e7f9      	b.n	8005666 <memset+0x4>
	...

08005674 <_init>:
 8005674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005676:	bf00      	nop
 8005678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800567a:	bc08      	pop	{r3}
 800567c:	469e      	mov	lr, r3
 800567e:	4770      	bx	lr

08005680 <_fini>:
 8005680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005682:	bf00      	nop
 8005684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005686:	bc08      	pop	{r3}
 8005688:	469e      	mov	lr, r3
 800568a:	4770      	bx	lr
